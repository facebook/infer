"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7698],{6344:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"checker-loop-hoisting","title":"Loop Hoisting","description":"Detect opportunities to hoist function calls that are invariant outside of loop bodies for efficiency.","source":"@site/versioned_docs/version-1.1.0/checker-loop-hoisting.md","sourceDirName":".","slug":"/checker-loop-hoisting","permalink":"/docs/1.1.0/checker-loop-hoisting","draft":false,"unlisted":false,"tags":[],"version":"1.1.0","frontMatter":{"title":"Loop Hoisting","description":"Detect opportunities to hoist function calls that are invariant outside of loop bodies for efficiency."},"sidebar":"docs","previous":{"title":"Liveness","permalink":"/docs/1.1.0/checker-liveness"},"next":{"title":"`printf()` Argument Types","permalink":"/docs/1.1.0/checker-printf-args"}}');var s=t(4848),o=t(8453);const r={title:"Loop Hoisting",description:"Detect opportunities to hoist function calls that are invariant outside of loop bodies for efficiency."},c=void 0,l={},a=[{value:"List of Issue Types",id:"list-of-issue-types",level:2}];function p(e){const i={a:"a",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.p,{children:"Detect opportunities to hoist function calls that are invariant outside of loop bodies for efficiency."}),"\n",(0,s.jsxs)(i.p,{children:["Activate with ",(0,s.jsx)(i.code,{children:"--loop-hoisting"}),"."]}),"\n",(0,s.jsx)(i.p,{children:"Supported languages:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"C/C++/ObjC: Yes"}),"\n",(0,s.jsx)(i.li,{children:"Java: Yes"}),"\n",(0,s.jsx)(i.li,{children:"C#/.Net: Yes"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["This checker detects opportunities to hoist function calls that are invariant to outside of loop bodies. The hoisting analysis relies on ",(0,s.jsx)(i.a,{href:"/docs/1.1.0/checker-purity",children:"purity"})," analysis to determine whether a function is pure or not."]}),"\n",(0,s.jsxs)(i.p,{children:["It has an additional mode that reports ",(0,s.jsx)(i.a,{href:"/docs/1.1.0/all-issue-types#expensive_loop_invariant_call",children:"loop-invariant functions that are expensive"})," (i.e. at least linear). This is enabled by the flag ",(0,s.jsx)(i.code,{children:"--hoisting-report-only-expensive"}),"."]}),"\n",(0,s.jsx)(i.h2,{id:"list-of-issue-types",children:"List of Issue Types"}),"\n",(0,s.jsx)(i.p,{children:"The following issue types are reported by this checker:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"/docs/1.1.0/all-issue-types#expensive_loop_invariant_call",children:"EXPENSIVE_LOOP_INVARIANT_CALL"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.a,{href:"/docs/1.1.0/all-issue-types#invariant_call",children:"INVARIANT_CALL"})}),"\n"]})]})}function d(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>r,x:()=>c});var n=t(6540);const s={},o=n.createContext(s);function r(e){const i=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(o.Provider,{value:i},e.children)}}}]);