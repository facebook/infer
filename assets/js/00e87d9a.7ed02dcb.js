"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7207],{6527:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"analyzing-apps-or-projects","title":"Analyzing apps or projects","description":"To analyze files with Infer you can use the compilers javac and clang. You","source":"@site/versioned_docs/version-1.2.0/01-analyzing-apps-or-projects.md","sourceDirName":".","slug":"/analyzing-apps-or-projects","permalink":"/docs/analyzing-apps-or-projects","draft":false,"unlisted":false,"tags":[],"version":"1.2.0","sidebarPosition":1,"frontMatter":{"id":"analyzing-apps-or-projects","title":"Analyzing apps or projects"},"sidebar":"docs","previous":{"title":"Infer workflow","permalink":"/docs/infer-workflow"},"next":{"title":"Recommended flow for CI","permalink":"/docs/steps-for-ci"}}');var i=s(4848),o=s(8453);const r={id:"analyzing-apps-or-projects",title:"Analyzing apps or projects"},t=void 0,c={},l=[{value:"ant",id:"ant",level:3},{value:"Buck",id:"buck",level:3},{value:"cmake",id:"cmake",level:3},{value:"Gradle",id:"gradle",level:3},{value:"Make",id:"make",level:3},{value:"Maven",id:"maven",level:3},{value:"Xcodebuild",id:"xcodebuild",level:3},{value:"xctool",id:"xctool",level:3},{value:"Using a compilation database",id:"using-a-compilation-database",level:3},{value:"Other build systems",id:"other-build-systems",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["To analyze files with Infer you can use the compilers ",(0,i.jsx)(n.code,{children:"javac"})," and ",(0,i.jsx)(n.code,{children:"clang"}),". You\ncan also use Infer with ",(0,i.jsx)(n.code,{children:"gcc"}),", however, internally Infer will use ",(0,i.jsx)(n.code,{children:"clang"})," to\ncompile your code. So, it may not work if your code does not compile with\n",(0,i.jsx)(n.code,{children:"clang"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Moreover, you can run Infer with a variety of build systems. Notice that you can\nrun infer faster by running the compilation command in parallel, e.g.\n",(0,i.jsx)(n.code,{children:"infer run -- make -j8"}),". Please also take into account that if you wish to\nanalyze a project, you should probably do ",(0,i.jsx)(n.code,{children:"clean"})," beforehand so that the\ncompiler compiles all the files and so Infer also analyses all the files (see\nthe ",(0,i.jsx)(n.a,{href:"infer-workflow",children:"previous section"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["Here is an overview of the build systems supported by Infer. You can get more\ninformation about how a particular build system is supported by looking at the\nSYNOPSIS section of the infer-capture manual: ",(0,i.jsx)(n.code,{children:"infer capture --help"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"ant",children:"ant"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"infer run -- ant\n"})}),"\n",(0,i.jsx)(n.h3,{id:"buck",children:"Buck"}),"\n",(0,i.jsx)(n.p,{children:"Running:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"infer run -- buck <buck target>\n"})}),"\n",(0,i.jsx)(n.p,{children:"will compute the list of Infer warnings in the targets passed as argument."}),"\n",(0,i.jsx)(n.p,{children:"Running:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"infer run -- buck --deep <buck target>\n"})}),"\n",(0,i.jsx)(n.p,{children:"will compute the list of Infer warnings in the targets passed as argument and\nall the transitive dependencies."}),"\n",(0,i.jsxs)(n.p,{children:["The distinction between ",(0,i.jsx)(n.code,{children:"--deep"})," and the normal Buck complation mode is only\nsupported for Java projects. For the other kinds of projects, the ",(0,i.jsx)(n.code,{children:"--deep"}),"\noption has no effect."]}),"\n",(0,i.jsx)(n.h3,{id:"cmake",children:"cmake"}),"\n",(0,i.jsxs)(n.p,{children:["The most robust way is to have ",(0,i.jsx)(n.code,{children:"cmake"})," generate a compilation database that can\nbe then processed by Infer:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd build\ncmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ..\ncd ..\ninfer run --compilation-database build/compile_commands.json\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Alternatively, one can trick ",(0,i.jsx)(n.code,{children:"cmake"})," into using infer instead of the system's\ncompilers:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd build\ninfer compile -- cmake ..\ninfer run -- make -j 4\n"})}),"\n",(0,i.jsx)(n.h3,{id:"gradle",children:"Gradle"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'infer run -- gradle <gradle task, e.g. "build">\ninfer run -- ./gradlew <gradle task, e.g. "build">\n'})}),"\n",(0,i.jsx)(n.h3,{id:"make",children:"Make"}),"\n",(0,i.jsxs)(n.p,{children:["Infer can analyze projects that compile with ",(0,i.jsx)(n.code,{children:"make"})," by switching the compilers\n(for C/C++/Objective-C or Java) called by ",(0,i.jsx)(n.code,{children:"make"})," with infer wrappers. This\ndoesn't always work, for instance if the Makefiles hardcode the absolute paths\nto the compilers (eg, if ",(0,i.jsx)(n.code,{children:"make"})," calls ",(0,i.jsx)(n.code,{children:"/usr/bin/gcc"})," instead of ",(0,i.jsx)(n.code,{children:"gcc"}),"). This is\nbecause this integration works by modifying ",(0,i.jsx)(n.code,{children:"PATH"})," under the hood."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"infer run -- make <make target>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"maven",children:"Maven"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"infer run -- mvn <maven target>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"xcodebuild",children:"Xcodebuild"}),"\n",(0,i.jsx)(n.p,{children:"The most robust way is to generate a compilation database, then pass that\ndatabase to Infer:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"xcodebuild <your build options> | tee xcodebuild.log\nxcpretty -r json-compilation-database -o compile_commands.json < xcodebuild.log > /dev/null\ninfer run --skip-analysis-in-path Pods --clang-compilation-db-files-escaped compile_commands.json\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See also\n",(0,i.jsx)(n.a,{href:"https://github.com/facebook/infer/issues/9#issuecomment-280121791",children:"this comment on GitHub"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Infer also provides a direct integration to xcodebuild that swaps the compiler\nused by xcodebuild under the hood. For instance, for an iOS app:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"infer run -- xcodebuild -target <target name> -configuration <build configuration> -sdk iphonesimulator\n"})}),"\n",(0,i.jsxs)(n.p,{children:["There is an alternative xcodebuild integration that uses ",(0,i.jsx)(n.code,{children:"xcpretty"})," under the\nhood; use it by passing ",(0,i.jsx)(n.code,{children:"--xcpretty"})," to infer."]}),"\n",(0,i.jsx)(n.h3,{id:"xctool",children:"xctool"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"xctool"})," to generate a compilation database then pass it to infer:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"xctool.sh <your build options> -reporter json-compilation-database:compile_commands.json\ninfer run --skip-analysis-in-path Pods --clang-compilation-db-files-escaped compile_commands.json\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See also\n",(0,i.jsx)(n.a,{href:"https://github.com/facebook/infer/issues/9#issuecomment-280121791",children:"this comment on GitHub"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"using-a-compilation-database",children:"Using a compilation database"}),"\n",(0,i.jsx)(n.p,{children:"Many build systems like cmake, Xcode or Buck generate compilation databases.\ninfer is able to use this database directly, simplifying its usage."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"infer --compilation-database compile_commands.json\n"})}),"\n",(0,i.jsx)(n.h3,{id:"other-build-systems",children:"Other build systems"}),"\n",(0,i.jsx)(n.p,{children:"If infer doesn't recognize your build system, you will get an error like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"$ infer run -- foo\nUsage Error: Unsupported build command foo\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If your build system behaves like one of the above, you can tell infer to use\nthe same integration with ",(0,i.jsx)(n.code,{children:"--force-integration"}),". For instance this will proceed\nas if ",(0,i.jsx)(n.code,{children:"foo"})," was working the same way as ",(0,i.jsx)(n.code,{children:"make"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"infer run --force-integration make -- foo\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If your build system is more exotic, and it doesn't support outputting\ncompilation databases, please let us know by\n",(0,i.jsx)(n.a,{href:"https://github.com/facebook/infer/issues/new",children:"opening an issue"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>t});var a=s(6540);const i={},o=a.createContext(i);function r(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);