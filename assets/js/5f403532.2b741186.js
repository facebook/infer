"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7197],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}},8999:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"steps-for-ci","title":"Recommended flow for CI","description":"The recommended flow for CI integration is to determine the modified files, and","source":"@site/docs/01-steps-for-ci.md","sourceDirName":".","slug":"/steps-for-ci","permalink":"/docs/next/steps-for-ci","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"steps-for-ci","title":"Recommended flow for CI"},"sidebar":"docs","previous":{"title":"Analyzing apps or projects","permalink":"/docs/next/analyzing-apps-or-projects"},"next":{"title":"Suppression of Infer Issues","permalink":"/docs/next/suppressions"}}');var i=t(4848),s=t(8453);const o={id:"steps-for-ci",title:"Recommended flow for CI"},a=void 0,c={},d=[{value:"Differential Workflow",id:"differential-workflow",level:3},{value:"Example: Android Gradle",id:"example-android-gradle",level:3}];function l(e){const n={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The recommended flow for CI integration is to determine the modified files, and\nrun the analysis in reactive mode starting from those files. If you would like\nto run more than one analyzer, it is more efficient to separate the capture\nphase, so that the result can be used by all the analyzers."}),"\n",(0,i.jsx)(n.h3,{id:"differential-workflow",children:"Differential Workflow"}),"\n",(0,i.jsx)(n.p,{children:"Here's how to run infer on two versions of a project and compare the results in\ngeneral."}),"\n",(0,i.jsxs)(n.p,{children:["Assume the project uses git, ",(0,i.jsx)(n.code,{children:"feature"})," is the feature branch (the code change\nyou want to analyze), ",(0,i.jsx)(n.code,{children:"main"})," is the main branch, and ",(0,i.jsx)(n.code,{children:"make"})," builds the\nproject."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# go to feature branch if not there already\ngit checkout feature\n# get list of changed files\ngit diff --name-only origin/feature..origin/main > index.txt\n## first run: feature branch\n# run infer on the feature branch\ninfer capture -- make -j 4  # assuming a machine with 4 cores\ninfer analyze --changed-files-index index.txt\n# store the infer report\ncp infer-out/report.json report-feature.json\n## second run: main branch\ngit checkout main\n# run capture in reactive mode so that previously-captured source files are kept if they are up-to-date\ninfer capture --reactive --mark-if-unchanged -- make -j 4\ninfer analyze --incremental-analysis --changed-files-index index.txt\n# compare reports\ninfer reportdiff --report-current report-feature.json --report-previous infer-out/report.json\n"})}),"\n",(0,i.jsx)(n.p,{children:'At the end of this process, "infer-out/differential/" contains three files,\nwhich follow the same format as normal infer JSON reports:'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"introduced.json contains the issues found in the feature branch but not in\nmain;"}),"\n",(0,i.jsx)(n.li,{children:"fixed.json contains the issues found in main but not in the feature branch;"}),"\n",(0,i.jsx)(n.li,{children:"preexisting.json contains the issues found in both branches."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-android-gradle",children:"Example: Android Gradle"}),"\n",(0,i.jsxs)(n.p,{children:["The following CI script runs the ",(0,i.jsx)(n.code,{children:"infer"})," and ",(0,i.jsx)(n.code,{children:"eradicate"})," analyzers. Assume again\nthat ",(0,i.jsx)(n.code,{children:"feature"})," is the feature branch, and ",(0,i.jsx)(n.code,{children:"main"})," is the main branch."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git diff --name-only origin/feature..origin/main > index.txt\ninfer capture -- ./gradlew --offline assembleDebug\ninfer analyze --fail-on-issue --eradicate --changed-files-index ./index.txt\n"})}),"\n",(0,i.jsx)(n.p,{children:"Notice that"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We use git to find the changed files ",(0,i.jsx)(n.code,{children:"git diff --name-only"})]}),"\n",(0,i.jsx)(n.li,{children:"We run capture only once, and the output is kept for the subsequent analyses"}),"\n",(0,i.jsxs)(n.li,{children:["We run the eradicate analysis alongside the default analyses: ",(0,i.jsx)(n.code,{children:"--eradicate"})]}),"\n",(0,i.jsxs)(n.li,{children:["We analyze only the changed files ",(0,i.jsx)(n.code,{children:"--changed-files-index ./index.txt"})]}),"\n"]})]})}function f(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);