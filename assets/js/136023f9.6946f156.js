"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7331],{5480:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"suppressions","title":"Suppression of Infer Issues","description":"Infer includes a language-agnostic method to suppress Infer issues in source files.","source":"@site/docs/01-suppressions.md","sourceDirName":".","slug":"/suppressions","permalink":"/docs/next/suppressions","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"suppressions","title":"Suppression of Infer Issues"},"sidebar":"docs","previous":{"title":"Recommended flow for CI","permalink":"/docs/next/steps-for-ci"},"next":{"title":"infer","permalink":"/docs/next/man-infer"}}');var r=s(4848),t=s(8453);const o={id:"suppressions",title:"Suppression of Infer Issues"},l=void 0,a={},c=[{value:"Wildcards",id:"wildcards",level:3},{value:"Examples",id:"examples",level:3},{value:"Accumulation",id:"accumulation",level:4}];function d(e){const n={code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Infer includes a language-agnostic method to suppress Infer issues in source files."}),"\n",(0,r.jsxs)(n.p,{children:["When an Infer issue is suppressed, it will not appear in the text report (infer-out/report.txt) after an Infer run. Suppressed issues will still appear in the JSON report file (infer-out/report.json) but with the added key ",(0,r.jsx)(n.code,{children:'"suppressed": true'}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Two keywords are supported:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"@infer-ignore ISSUE_TYPE, ISSUE_TYPE2, ..."})}),"\n",(0,r.jsxs)(n.p,{children:["Ignore matching Infer issues on the next or current line. Comma ",(0,r.jsx)(n.code,{children:","})," is used to separate multiple issue types on the same line."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"@infer-ignore-every ISSUE_TYPE, ISSUE_TYPE2, ..."})}),"\n",(0,r.jsx)(n.p,{children:"Ignore all matching Infer issues in the current file. This keyword can be added anywhere in the source file."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"These two keywords are meant to be added as comment lines in the source files you run Infer on."}),"\n",(0,r.jsxs)(n.p,{children:["The full name of the issue type is given as an argument to the @ignore keywords. For example, use ",(0,r.jsx)(n.code,{children:"DEAD_STORE"})," and not 'Dead Store' which is the name used in the text report file."]}),"\n",(0,r.jsx)(n.h3,{id:"wildcards",children:"Wildcards"}),"\n",(0,r.jsx)(n.p,{children:"Wildcards can be used as arguments to the @ignore keywords to suppress a larger set of Infer issue types without the need to list all of them."}),"\n",(0,r.jsxs)(n.p,{children:["For example, ",(0,r.jsx)(n.code,{children:"@infer-ignore PULSE_UNNECESSARY_COPY*"})," will suppress all unnecessary copy issues, including ",(0,r.jsx)(n.code,{children:"PULSE_UNNECESSARY_COPY_ASSIGNMENT_CONST"})," and ",(0,r.jsx)(n.code,{children:"PULSE_UNNECESSARY_COPY_INTERMEDIATE"}),", etc."]}),"\n",(0,r.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Suppress a single issue"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// @infer-ignore THREAD_SAFETY_VIOLATION\nif (ConfigUtil.getBoolean(context)) {\n    ...\n}\n\n// or\n\nif (ConfigUtil.getBoolean(context)) { // @infer-ignore THREAD_SAFETY_VIOLATION\n    ...\n}\n\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Suppress all issues in a file"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:'% @infer-ignore-every TOPL_ERROR, TOPL_ERROR_LATENT\n-module(hello).\n-export([hello_world/0]).\nhello_world() -> io:fwrite("hello\\n").\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A line without an @ignore keyword cannot be placed between the @ignore line and the line with the issues."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// @infer-ignore THREAD_SAFETY_VIOLATION\n// some more context\nif (ConfigUtil.getBoolean(context)) {\n    ...\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"In this case, the issue on the if statement line is not suppressed since a line without a @infer-ignore is added between the suppression and the line with the issue."}),"\n",(0,r.jsx)(n.h4,{id:"accumulation",children:"Accumulation"}),"\n",(0,r.jsxs)(n.p,{children:["When using the ",(0,r.jsx)(n.code,{children:"@infer-ignore"})," keyword, all issue types in a contiguous block of comment lines containing the ",(0,r.jsx)(n.code,{children:"@infer-ignore"})," keyword are accumulated and applied to the next line without a @ignore keyword. This way, long lines can be avoided, and extra context can be given."]}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"free(x);\n// a really good explanation why we are suppressing this warning\n// @infer-ignore USE_AFTER_FREE\n// also this one @infer-ignore DEAD_STORE\nreturn *x;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In the example above, on the ",(0,r.jsx)(n.code,{children:"return"})," line, both the issue types ",(0,r.jsx)(n.code,{children:"USE_AFTER_FREE"})," and ",(0,r.jsx)(n.code,{children:"DEAD_STORE"})," are suppressed."]}),"\n",(0,r.jsx)(n.p,{children:"Equivalent to the example above:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"free(x);\n// a really good explanation why we are suppressing this warning\n// @infer-ignore USE_AFTER_FREE\nreturn *x; // @infer-ignore DEAD_STORE\n"})}),"\n",(0,r.jsx)(n.p,{children:"An alternative way to achieve the same result would be:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"free(x);\n// a really good explanation why we are suppressing this warning\n// @infer-ignore USE_AFTER_FREE, DEAD_STORE\nreturn *x;\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(6540);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);