(*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *)

type json_trace_item = {
  level : int;
  filename : string;
  line_number : int;
  column_number : int;
  description : string;
}

type loc = {
  file: string;
  lnum: int;
  cnum: int;
  enum: int;
}

type nullsafe_mode = [Default | LocalTrustAll | LocalTrustSome | LocalTrustNone | Strict]

type nullsafe_meta_issue_info = {
  num_issues: int;
  num_fixmes: int;
  curr_nullsafe_mode: nullsafe_mode;
  can_be_promoted_to: nullsafe_mode nullable (* If present, it implies that the class is not only free of issues, but the mode can be promoted to a stricter one *)
}

type method_info = {
  class_name: string;
  package: string;
  method_name: string;
  call_line: int;
}

type annotation_point_kind = [Method | Field | Param]

type access_level = [Private | Protected | Public | Default]

type annotation_point_method = {
  method_name: string;
  params: string list;
  access_level: access_level;
}

(* A potential place to annotate as [@Nullable] *)
type annotation_point = {
  id: string; (* A symbolic id of an annotation point *)
  kind: annotation_point_kind;
  ?method_info: annotation_point_method option; (* Present iff this is a Method or Param annotation point *)
  ?field_name: string option; (* Present iff this is a Field annotation point *)
  ?param_num: int option; (* Present iff this is a Param annotation point *)
  num_violations: int; (* How many violations (NOT counting violations happening in other annotation points) would be introduced if this point was annotated *)
  dependent_point_ids: string list; (* List of other points that need to be annotated when this one is annotated *)
}

type field_name = {
  class_name: string;
  package_name: string nullable;
  field: string;
}

type issue_method = {
  name: string;
  params: string list;
}

type parameter_not_nullable_info = {
  class_name: string;
  package_name: string nullable;
  method_info: issue_method;
  param_index: int;
}

type redundant_fixme_info = {
  present_issue_types: string list;
  comment_start_line: int;
  comment_end_line: int;
}

type nullsafe_extra = {
  class_name: string;
  package: string nullable;
  ?method_info: issue_method option; (* The method the issue is detected on. Not present for issues not associated with a method (e.g. meta issues) *)
  ?field: field_name option; (* For field-specific issues (e.g. Field Not Nullable and Field Not Initialized). *)
  ?inconsistent_param_index: int option; (* Iff the issue is "Inconsistent subclass param annotation", this is the index of the offending param *)
  ?parameter_not_nullable_info: parameter_not_nullable_info option; (* Iff the issue is "Parameter Not Nullable", this is the details of the offending method *)
  ?nullable_methods: method_info list option; (* If the issue is related to unsafe use of methods being nullable, here's the list of them *)
  ?unvetted_3rd_party: string list option; (* If the issue is related to the use of a not yet registered third-party methods, here's the list of their signatures *)
  ?meta_issue_info: nullsafe_meta_issue_info option; (* Should be present if the issue is "nullsafe meta issue" *)
  ?annotation_graph: annotation_point list option; (* Annotation graph (only for annotation mode) *)
  ?redundant_fixme_info: redundant_fixme_info option; (* Information necessary to codemod redundant NULLSAFE_FIXME comments *)
}

type config_usage_extra = {
  config_name: string;
  function_name: string;
  filename: string;
  line_number: int;
}

type taint_extra = {
  ?taint_source : string option;
  ?taint_sink : string option;
  ?taint_policy_privacy_effect : string option;
  ?tainted_expression : string option;
}

type transitive_callee_kind = [Static | Virtual | Closure]

type transitive_callee_resolution = [ResolvedUsingDynamicType | ResolvedUsingStaticType | Unresolved]

type transitive_callee = {
  callsite_filename: string;
  callsite_absolute_position_in_file: int;
  caller_name: string;
  callsite_relative_position_in_caller: int;
  kind: transitive_callee_kind;
  resolution: transitive_callee_resolution
}

type missed_capture = {
  class_name: string;
}

type extra = {
  ?cost_polynomial : string option;
  ?cost_degree : int option;
  ?nullsafe_extra : nullsafe_extra option;
  ?copy_type : string option;
  ?config_usage_extra : config_usage_extra option;
  ?taint_extra : taint_extra option;
  ~transitive_callees: transitive_callee list;
  ~transitive_missed_captures: missed_capture list;
}

type jsonbug = {
  bug_type : string;
  qualifier : string;
  ?suggestion : string option;
  severity : string;
  ?category: string option;
  line: int;
  column: int;
  procedure : string;
  procedure_start_line : int;
  file : string;
  bug_trace : json_trace_item list;
  bug_trace_length : int;
  bug_trace_max_depth : int;
  key : string;
  ?node_key : string option;
  hash : string;
  ?dotty : string option;
  ?infer_source_loc: loc option;
  bug_type_hum: string;
  ?traceview_id: int option;
  ?censored_reason : string option;
  ?access : string option;
  ?extras : extra option;
}

type report = jsonbug list
