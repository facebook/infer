(*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *)

type taint_target = [
   ReturnValue
 | AllArguments
 | ArgumentPositions of int list
 | AllArgumentsButPositions of int list
 | ArgumentsMatchingTypes of string list
 | InstanceReference
 | FieldsOfValue of (string * taint_target) list
 | GetField (* only for field matchers *)
 | SetField (* only for field matchers *)
]

type argument_constraint = { index: int; type_matches: string list }

type matcher = {
  (* exactly one of field_regex or procedure or procedure_regex or class_name_regex or class_with_annotation or allocation
  or block_passed_to or block_passed_to_regex must be specified,
  or else class_names and method_names must be specified,
  or else class_names and procedure_regex must be specified
  or else class_names and field_names must be specified,
  or else class_names and method_return_type_names must be specified,
  or else class_name_regex and procedure_regex must be specified
  or else overrides_of_class_with_annotation/method_with_annotation
  or else class_with_annotation and class_name_regex and procedure_regex must be specified *)
  ?field_regex: string option;
  ?procedure: string option;
  ?procedure_regex: string option;
  ?class_name_regex: string option;
  ?class_names: string list option;
  ?class_with_annotation: string option;
  ?field_names: string list option;
  ?method_names: string list option;
  ?method_return_type_names: string list option;
  ?overrides_of_class_with_annotation: string option;
  ?method_with_annotation: string option;
  ?field_with_annotation: string option;
  ?annotation_values: string list option;
  ?block_passed_to: string option;
  ?block_passed_to_regex: string option;
  ?allocation: string option;
  ~argument_constraints: argument_constraint list;
  ?kinds: string list option; (** default is [Simple] which matches all Simple sources to all Simple sinks provided they haven't been sanitized by a Simple sanitizer *)
  ?taint_target: taint_target option; (** default is all formals for sinks and sanitizers, return value for sources *)
  ?exclude_from_regex_in: string list option; (** Optional, only relevant for procedure, field or class regexes *)
  ?sanitized_in: string list option (** Optional, only relevant for field matchers *)
}

type matchers = matcher list

type taint_flow = {
  source_kinds: string list;
  ~sanitizer_kinds: string list;
  sink_kinds: string list;
}

(** Taint kinds to be used only for data flow reporting *)
type data_flow_kinds = string list

type taint_policy = {
  short_description: string;
  taint_flows: taint_flow list;
  ?privacy_effect: string option;
  ?exclude_in: string list option;
  ?exclude_matching: string list option;
}

type taint_policies = taint_policy list
