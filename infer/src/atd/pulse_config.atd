(*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *)

type taint_target = [
   ReturnValue
 | AllArguments
 | ArgumentPositions of int list
 | AllArgumentsButPositions of int list
 | ArgumentsMatchingTypes of string list
]

type argument_constraint = { index: int; type_matches: string list }

type matcher = {
  (* exactly one of procedure or procedure_regex must be specified, or else class_name and
  method_names must be specified, or else overrides_of_class_with_annotation *)
  ?procedure: string option;
  ?procedure_regex: string option;
  ?class_names: string list option;
  ?method_names: string list option;
  ?overrides_of_class_with_annotation: string option;
  ~argument_constraints: argument_constraint list;
  ?kinds: string list option; (** default is [Simple] which matches all Simple sources to all Simple sinks provided they haven't been sanitized by a Simple sanitizer *)
  ?taint_target: taint_target option; (** default is all formals for sinks and sanitizers, return value for sources *)
}

type matchers = matcher list

type taint_flow = {
  source_kinds: string list;
  ~sanitizer_kinds: string list;
  sink_kinds: string list;
}

type taint_policy = {
  short_description: string;
  taint_flows: taint_flow list
}

type taint_policies = taint_policy list
