# Final ULLBC before control-flow reconstruction:

// Full name: calculate::calculate
pub fn calculate(@1: i32, @2: i32) -> i32
{
    let @0: i32; // return
    let a@1: i32; // arg #1
    let b@2: i32; // arg #2
    let result1@3: i32; // local
    let @4: i32; // anonymous local
    let result2@5: i32; // local
    let @6: i32; // anonymous local
    let @7: i32; // anonymous local
    let @8: i32; // anonymous local

    bb0: {
        storage_live(result1@3);
        storage_live(@4);
        @4 := copy (a@1);
        result1@3 := square(move (@4)) -> bb1 (unwind: bb2);
    }

    bb1: {
        storage_dead(@4);
        storage_live(result2@5);
        storage_live(@6);
        @6 := copy (result1@3);
        result2@5 := square(move (@6)) -> bb3 (unwind: bb2);
    }

    bb2: {
        unwind_continue;
    }

    bb3: {
        storage_dead(@6);
        storage_live(@7);
        @7 := copy (result1@3);
        storage_live(@8);
        @8 := copy (result2@5);
        @0 := subtract(move (@7), move (@8)) -> bb4 (unwind: bb2);
    }

    bb4: {
        storage_dead(@8);
        storage_dead(@7);
        storage_dead(result2@5);
        storage_dead(result1@3);
        return;
    }
}

// Full name: calculate::square
fn square(@1: i32) -> i32
{
    let @0: i32; // return
    let x@1: i32; // arg #1
    let @2: i32; // anonymous local
    let @3: i32; // anonymous local
    let @4: i32; // anonymous local

    bb0: {
        storage_live(@2);
        @2 := copy (x@1);
        storage_live(@3);
        @3 := copy (x@1);
        @4 := copy (@2) panic.* copy (@3);
        nop;
        @0 := move (@4);
        storage_dead(@3);
        storage_dead(@2);
        return;
    }
}

// Full name: calculate::subtract
fn subtract(@1: i32, @2: i32) -> i32
{
    let @0: i32; // return
    let x@1: i32; // arg #1
    let y@2: i32; // arg #2
    let @3: i32; // anonymous local
    let @4: i32; // anonymous local
    let @5: i32; // anonymous local

    bb0: {
        storage_live(@3);
        @3 := copy (x@1);
        storage_live(@4);
        @4 := copy (y@2);
        @5 := copy (@3) panic.- copy (@4);
        nop;
        @0 := move (@5);
        storage_dead(@4);
        storage_dead(@3);
        return;
    }
}

// Full name: calculate::main
fn main()
{
    let @0: (); // return
    let x@1: i32; // local
    let y@2: i32; // local
    let result@3: i32; // local
    let @4: i32; // anonymous local
    let @5: i32; // anonymous local
    let @6: (); // anonymous local

    bb0: {
        storage_live(x@1);
        x@1 := const (0 : i32);
        storage_live(y@2);
        y@2 := const (1 : i32);
        storage_live(result@3);
        storage_live(@4);
        @4 := copy (x@1);
        storage_live(@5);
        @5 := copy (y@2);
        result@3 := calculate(move (@4), move (@5)) -> bb1 (unwind: bb2);
    }

    bb1: {
        storage_dead(@5);
        storage_dead(@4);
        nop;
        @0 := ();
        storage_dead(result@3);
        storage_dead(y@2);
        storage_dead(x@1);
        @0 := ();
        return;
    }

    bb2: {
        unwind_continue;
    }
}