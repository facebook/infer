# Final ULLBC before control-flow reconstruction:

// Full name: nested::swi_nested
pub fn swi_nested(@1: i32, @2: i32) -> i32
{
    let @0: i32; // return
    let a@1: i32; // arg #1
    let b@2: i32; // arg #2
    let @3: bool; // anonymous local
    let @4: i32; // anonymous local
    let @5: bool; // anonymous local
    let @6: i32; // anonymous local

    bb0: {
        storage_live(@3);
        storage_live(@4);
        @4 := copy (a@1);
        @3 := move (@4) >= const (0 : i32);
        if move (@3) -> bb1 else -> bb2;
    }

    bb1: {
        storage_dead(@4);
        storage_live(@5);
        storage_live(@6);
        @6 := copy (b@2);
        @5 := move (@6) == const (0 : i32);
        if move (@5) -> bb3 else -> bb4;
    }

    bb2: {
        storage_dead(@4);
        @0 := const (3 : i32);
        goto bb5;
    }

    bb3: {
        storage_dead(@6);
        @0 := const (1 : i32);
        goto bb6;
    }

    bb4: {
        storage_dead(@6);
        @0 := const (2 : i32);
        goto bb6;
    }

    bb5: {
        storage_dead(@3);
        return;
    }

    bb6: {
        storage_dead(@5);
        goto bb5;
    }
}

// Full name: nested::main
fn main()
{
    let @0: (); // return
    let x@1: i32; // local
    let y@2: i32; // local
    let @3: i32; // anonymous local
    let @4: i32; // anonymous local
    let @5: i32; // anonymous local
    let @6: (); // anonymous local

    bb0: {
        storage_live(x@1);
        x@1 := const (0 : i32);
        storage_live(y@2);
        y@2 := const (1 : i32);
        storage_live(@3);
        storage_live(@4);
        @4 := copy (x@1);
        storage_live(@5);
        @5 := copy (y@2);
        @3 := swi_nested(move (@4), move (@5)) -> bb1 (unwind: bb2);
    }

    bb1: {
        storage_dead(@5);
        storage_dead(@4);
        storage_dead(@3);
        nop;
        @0 := ();
        storage_dead(y@2);
        storage_dead(x@1);
        @0 := ();
        return;
    }

    bb2: {
        unwind_continue;
    }
}