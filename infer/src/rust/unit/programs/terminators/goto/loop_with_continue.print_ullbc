# Final ULLBC before control-flow reconstruction:

// Full name: loop_with_continue::goto_with_continue
pub fn goto_with_continue(@1: i32, @2: i32) -> i32
{
    let @0: i32; // return
    let x@1: i32; // arg #1
    let y@2: i32; // arg #2
    let @3: (); // anonymous local
    let @4: (); // anonymous local
    let @5: (); // anonymous local
    let @6: bool; // anonymous local
    let @7: i32; // anonymous local
    let @8: i32; // anonymous local
    let @9: !; // anonymous local
    let @10: i32; // anonymous local
    let @11: (); // anonymous local
    let @12: (); // anonymous local

    bb0: {
        storage_live(@3);
        goto bb1;
    }

    bb1: {
        storage_live(@5);
        storage_live(@6);
        storage_live(@7);
        @7 := copy (x@1);
        storage_live(@8);
        @8 := copy (y@2);
        @6 := move (@7) < move (@8);
        if move (@6) -> bb2 else -> bb3;
    }

    bb2: {
        storage_dead(@8);
        storage_dead(@7);
        @10 := copy (x@1) panic.+ const (1 : i32);
        nop;
        x@1 := move (@10);
        storage_dead(@6);
        storage_dead(@5);
        goto bb1;
    }

    bb3: {
        storage_dead(@8);
        storage_dead(@7);
        nop;
        nop;
        storage_dead(@6);
        storage_dead(@5);
        nop;
        nop;
        storage_dead(@3);
        @0 := copy (x@1);
        return;
    }
}

// Full name: loop_with_continue::main
fn main()
{
    let @0: (); // return
    let x@1: i32; // local
    let y@2: i32; // local
    let @3: i32; // anonymous local
    let @4: i32; // anonymous local
    let @5: i32; // anonymous local
    let @6: (); // anonymous local

    bb0: {
        storage_live(x@1);
        x@1 := const (0 : i32);
        storage_live(y@2);
        y@2 := const (1 : i32);
        storage_live(@3);
        storage_live(@4);
        @4 := copy (x@1);
        storage_live(@5);
        @5 := copy (y@2);
        @3 := goto_with_continue(move (@4), move (@5)) -> bb1 (unwind: bb2);
    }

    bb1: {
        storage_dead(@5);
        storage_dead(@4);
        storage_dead(@3);
        nop;
        @0 := ();
        storage_dead(y@2);
        storage_dead(x@1);
        @0 := ();
        return;
    }

    bb2: {
        unwind_continue;
    }
}