# Final ULLBC before control-flow reconstruction:

// Full name: alloc::string::String
#[lang_item("String")]
pub opaque type String

// Full name: alloc::alloc::Global
#[lang_item("global_alloc_ty")]
pub struct Global {}

// Full name: core::alloc::layout::Layout
#[lang_item("alloc_layout")]
pub opaque type Layout

// Full name: core::result::Result
#[lang_item("Result")]
pub enum Result<T, E>
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: Sized<E>,
{
  Ok(T),
  Err(E),
}

// Full name: core::ptr::non_null::NonNull
#[lang_item("NonNull")]
pub opaque type NonNull<T>

// Full name: core::alloc::AllocError
pub struct AllocError {}

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::alloc::Allocator
pub trait Allocator<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn allocate<'_0> = core::alloc::Allocator::allocate<'_0_0, Self>[Self]
    fn deallocate<'_0> = core::alloc::Allocator::deallocate<'_0_0, Self>[Self]
    vtable: core::alloc::Allocator::{vtable}
}

// Full name: core::convert::From
#[lang_item("From")]
pub trait From<Self, T>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    parent_clause1 : [@TraitClause1]: Sized<T>
    fn from = core::convert::From::from<Self, T>[Self]
    non-dyn-compatible
}

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

// Full name: alloc::alloc::{impl Allocator for Global}
impl Allocator for Global {
    parent_clause0 = MetaSized<Global>
    fn allocate<'_0> = {impl Allocator for Global}::allocate<'_0_0>
    fn deallocate<'_0> = {impl Allocator for Global}::deallocate<'_0_0>
    vtable: {impl Allocator for Global}::{vtable}
}

// Full name: alloc::string::{impl From<&'_0 (Str)> for String}
impl<'_0> From<&'_0 (Str)> for String {
    parent_clause0 = Sized<String>
    parent_clause1 = Sized<&'_ (Str)>
    fn from = {impl From<&'_0 (Str)> for String}::from<'_0>
    non-dyn-compatible
}

// Full name: alloc::boxed::{impl Drop for alloc::boxed::Box<T, A>[@TraitClause0, @TraitClause1, @TraitClause2]}
impl<T, A> Drop for alloc::boxed::Box<T, A>[@TraitClause0, @TraitClause1, @TraitClause2]
where
    [@TraitClause0]: MetaSized<T>,
    [@TraitClause1]: Sized<A>,
    [@TraitClause2]: Allocator<A>,
{
    parent_clause0 = MetaSized<alloc::boxed::Box<T, A>[@TraitClause0, @TraitClause1, @TraitClause2]>
    fn drop<'_0> = {impl Drop for alloc::boxed::Box<T, A>[@TraitClause0, @TraitClause1, @TraitClause2]}::drop<'_0_0, T, A>[@TraitClause0, @TraitClause1, @TraitClause2]
    vtable: {impl Drop for alloc::boxed::Box<T, A>[@TraitClause0, @TraitClause1, @TraitClause2]}::{vtable}<T, A>[@TraitClause0, @TraitClause1, @TraitClause2]
}

// Full name: alloc::string::String::{impl Drop for String}
impl Drop for String {
    parent_clause0 = MetaSized<String>
    fn drop<'_0> = {impl Drop for String}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: drop_implicit::drop_implicit
pub fn drop_implicit() -> i32
{
    let @0: i32; // return
    let s@1: String; // local
    let b@2: alloc::boxed::Box<i32, Global>[MetaSized<i32>, Sized<Global>, {impl Allocator for Global}]; // local

    bb0: {
        storage_live(s@1);
        s@1 := {impl From<&'_0 (Str)> for String}::from<'_>(const ("hello")) -> bb1 (unwind: bb2);
    }

    bb1: {
        storage_live(b@2);
        b@2 := @BoxNew<i32>[Sized<i32>](const (42 : i32)) -> bb3 (unwind: bb4);
    }

    bb2: {
        unwind_continue;
    }

    bb3: {
        @0 := copy (*(b@2));
        drop[{impl Drop for alloc::boxed::Box<T, A>[@TraitClause0, @TraitClause1, @TraitClause2]}<i32, Global>[MetaSized<i32>, Sized<Global>, {impl Allocator for Global}]] b@2;
        storage_dead(b@2);
        drop[{impl Drop for String}] s@1;
        storage_dead(s@1);
        return;
    }

    bb4: {
        drop[{impl Drop for String}] s@1;
        goto bb2;
    }
}

// Full name: drop_implicit::main
fn main()
{
    let @0: (); // return
    let @1: i32; // anonymous local
    let @2: (); // anonymous local

    bb0: {
        storage_live(@1);
        @1 := drop_implicit() -> bb1 (unwind: bb2);
    }

    bb1: {
        storage_dead(@1);
        nop;
        @0 := ();
        @0 := ();
        return;
    }

    bb2: {
        unwind_continue;
    }
}

#[lang_item("from_fn")]
pub fn core::convert::From::from<Self, T>(@1: T) -> Self
where
    [@TraitClause0]: From<Self, T>,

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

pub fn core::alloc::Allocator::allocate<'_0, Self>(@1: &'_0 (Self), @2: Layout) -> Result<NonNull<Slice<u8>>, AllocError>[Sized<NonNull<Slice<u8>>>, Sized<AllocError>]
where
    [@TraitClause0]: Allocator<Self>,

pub unsafe fn core::alloc::Allocator::deallocate<'_0, Self>(@1: &'_0 (Self), @2: NonNull<u8>, @3: Layout)
where
    [@TraitClause0]: Allocator<Self>,

// Full name: alloc::alloc::{impl Allocator for Global}::allocate
pub fn {impl Allocator for Global}::allocate<'_0>(@1: &'_0 (Global), @2: Layout) -> Result<NonNull<Slice<u8>>, AllocError>[Sized<NonNull<Slice<u8>>>, Sized<AllocError>]

// Full name: alloc::alloc::{impl Allocator for Global}::deallocate
pub unsafe fn {impl Allocator for Global}::deallocate<'_0>(@1: &'_0 (Global), @2: NonNull<u8>, @3: Layout)

// Full name: alloc::boxed::{impl Drop for alloc::boxed::Box<T, A>[@TraitClause0, @TraitClause1, @TraitClause2]}::drop
pub fn {impl Drop for alloc::boxed::Box<T, A>[@TraitClause0, @TraitClause1, @TraitClause2]}::drop<'_0, T, A>(@1: &'_0 mut (alloc::boxed::Box<T, A>[@TraitClause0, @TraitClause1, @TraitClause2]))
where
    [@TraitClause0]: MetaSized<T>,
    [@TraitClause1]: Sized<A>,
    [@TraitClause2]: Allocator<A>,

// Full name: alloc::string::{impl From<&'_0 (Str)> for String}::from
pub fn {impl From<&'_0 (Str)> for String}::from<'_0>(@1: &'_0 (Str)) -> String

// Full name: alloc::string::String::{impl Drop for String}::drop
fn {impl Drop for String}::drop<'_0>(@1: &'_0 mut (String))