{
    "charon_version": "0.1.123",
    "translated": {
        "crate_name": "basic_move",
        "options": {
            "ullbc": true,
            "lib": false,
            "bin": null,
            "mir_promoted": false,
            "mir_optimized": false,
            "mir": null,
            "input_file": "./basic_move.rs",
            "read_llbc": null,
            "dest_dir": null,
            "dest_file": "./output.ullbc",
            "use_polonius": false,
            "skip_borrowck": false,
            "monomorphize": false,
            "monomorphize_conservative": false,
            "extract_opaque_bodies": false,
            "translate_all_methods": false,
            "include": [],
            "opaque": [],
            "exclude": [],
            "remove_associated_types": [],
            "hide_marker_traits": false,
            "hide_allocator": false,
            "remove_unused_self_clauses": false,
            "add_drop_bounds": false,
            "start_from": [],
            "no_cargo": true,
            "rustc_args": [],
            "cargo_args": [],
            "abort_on_error": false,
            "error_on_warnings": false,
            "no_serialize": false,
            "print_original_ullbc": false,
            "print_ullbc": false,
            "print_built_llbc": false,
            "print_llbc": false,
            "no_merge_goto_chains": false,
            "no_ops_to_function_calls": false,
            "raw_boxes": false,
            "preset": null
        },
        "target_information": {
            "target_pointer_size": 8,
            "is_little_endian": true
        },
        "item_names": [
            {
                "key": {
                    "TraitDecl": 0
                },
                "value": [
                    {
                        "Ident": [
                            "core",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "convert",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "From",
                            0
                        ]
                    }
                ]
            },
            {
                "key": {
                    "TraitImpl": 1
                },
                "value": [
                    {
                        "Ident": [
                            "alloc",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "string",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "String",
                            0
                        ]
                    },
                    {
                        "Impl": {
                            "Trait": 1
                        }
                    }
                ]
            },
            {
                "key": {
                    "Type": 1
                },
                "value": [
                    {
                        "Ident": [
                            "core",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "ops",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "drop",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "Drop",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "{vtable}",
                            0
                        ]
                    }
                ]
            },
            {
                "key": {
                    "Fun": 4
                },
                "value": [
                    {
                        "Ident": [
                            "alloc",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "string",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "String",
                            0
                        ]
                    },
                    {
                        "Impl": {
                            "Trait": 1
                        }
                    },
                    {
                        "Ident": [
                            "drop",
                            0
                        ]
                    }
                ]
            },
            {
                "key": {
                    "Type": 2
                },
                "value": [
                    {
                        "Ident": [
                            "core",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "marker",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "MetaSized",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "{vtable}",
                            0
                        ]
                    }
                ]
            },
            {
                "key": {
                    "Fun": 2
                },
                "value": [
                    {
                        "Ident": [
                            "core",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "ops",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "drop",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "Drop",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "drop",
                            0
                        ]
                    }
                ]
            },
            {
                "key": {
                    "Fun": 1
                },
                "value": [
                    {
                        "Ident": [
                            "core",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "convert",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "From",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "from",
                            0
                        ]
                    }
                ]
            },
            {
                "key": {
                    "TraitDecl": 1
                },
                "value": [
                    {
                        "Ident": [
                            "core",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "ops",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "drop",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "Drop",
                            0
                        ]
                    }
                ]
            },
            {
                "key": {
                    "TraitDecl": 2
                },
                "value": [
                    {
                        "Ident": [
                            "core",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "marker",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "Sized",
                            0
                        ]
                    }
                ]
            },
            {
                "key": {
                    "Fun": 3
                },
                "value": [
                    {
                        "Ident": [
                            "alloc",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "string",
                            0
                        ]
                    },
                    {
                        "Impl": {
                            "Trait": 0
                        }
                    },
                    {
                        "Ident": [
                            "from",
                            0
                        ]
                    }
                ]
            },
            {
                "key": {
                    "Type": 0
                },
                "value": [
                    {
                        "Ident": [
                            "alloc",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "string",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "String",
                            0
                        ]
                    }
                ]
            },
            {
                "key": {
                    "TraitDecl": 3
                },
                "value": [
                    {
                        "Ident": [
                            "core",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "marker",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "MetaSized",
                            0
                        ]
                    }
                ]
            },
            {
                "key": {
                    "TraitImpl": 0
                },
                "value": [
                    {
                        "Ident": [
                            "alloc",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "string",
                            0
                        ]
                    },
                    {
                        "Impl": {
                            "Trait": 0
                        }
                    }
                ]
            },
            {
                "key": {
                    "Fun": 0
                },
                "value": [
                    {
                        "Ident": [
                            "basic_move",
                            0
                        ]
                    },
                    {
                        "Ident": [
                            "main",
                            0
                        ]
                    }
                ]
            }
        ],
        "short_names": [
            {
                "key": {
                    "TraitImpl": 0
                },
                "value": [
                    {
                        "Impl": {
                            "Trait": 0
                        }
                    }
                ]
            },
            {
                "key": {
                    "TraitDecl": 3
                },
                "value": [
                    {
                        "Ident": [
                            "MetaSized",
                            0
                        ]
                    }
                ]
            },
            {
                "key": {
                    "Fun": 0
                },
                "value": [
                    {
                        "Ident": [
                            "main",
                            0
                        ]
                    }
                ]
            },
            {
                "key": {
                    "TraitDecl": 1
                },
                "value": [
                    {
                        "Ident": [
                            "Drop",
                            0
                        ]
                    }
                ]
            },
            {
                "key": {
                    "TraitDecl": 2
                },
                "value": [
                    {
                        "Ident": [
                            "Sized",
                            0
                        ]
                    }
                ]
            },
            {
                "key": {
                    "Type": 0
                },
                "value": [
                    {
                        "Ident": [
                            "String",
                            0
                        ]
                    }
                ]
            },
            {
                "key": {
                    "Fun": 3
                },
                "value": [
                    {
                        "Impl": {
                            "Trait": 0
                        }
                    },
                    {
                        "Ident": [
                            "from",
                            0
                        ]
                    }
                ]
            },
            {
                "key": {
                    "TraitDecl": 0
                },
                "value": [
                    {
                        "Ident": [
                            "From",
                            0
                        ]
                    }
                ]
            },
            {
                "key": {
                    "TraitImpl": 1
                },
                "value": [
                    {
                        "Impl": {
                            "Trait": 1
                        }
                    }
                ]
            },
            {
                "key": {
                    "Fun": 4
                },
                "value": [
                    {
                        "Impl": {
                            "Trait": 1
                        }
                    },
                    {
                        "Ident": [
                            "drop",
                            0
                        ]
                    }
                ]
            }
        ],
        "files": [
            {
                "name": {
                    "Local": "./basic_move.rs"
                },
                "crate_name": "basic_move",
                "contents": "fn main() {\n    let x = String::from(\"hello\");\n    let y = x;\n}"
            },
            {
                "name": {
                    "Local": "/rustc/library/alloc/src/string.rs"
                },
                "crate_name": "alloc",
                "contents": null
            },
            {
                "name": {
                    "Local": "/rustc/library/alloc/src/lib.rs"
                },
                "crate_name": "alloc",
                "contents": null
            },
            {
                "name": {
                    "Local": "/rustc/library/core/src/convert/mod.rs"
                },
                "crate_name": "core",
                "contents": null
            },
            {
                "name": {
                    "Local": "/rustc/library/core/src/lib.rs"
                },
                "crate_name": "core",
                "contents": null
            },
            {
                "name": {
                    "Local": "/rustc/library/core/src/ops/drop.rs"
                },
                "crate_name": "core",
                "contents": null
            },
            {
                "name": {
                    "Local": "/rustc/library/core/src/ops/mod.rs"
                },
                "crate_name": "core",
                "contents": null
            },
            {
                "name": {
                    "Local": "/rustc/library/core/src/marker.rs"
                },
                "crate_name": "core",
                "contents": null
            }
        ],
        "type_decls": [
            {
                "def_id": 0,
                "item_meta": {
                    "name": [
                        {
                            "Ident": [
                                "alloc",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "string",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "String",
                                0
                            ]
                        }
                    ],
                    "span": {
                        "span": {
                            "file_id": 1,
                            "beg": {
                                "line": 360,
                                "col": 0
                            },
                            "end": {
                                "line": 360,
                                "col": 17
                            }
                        },
                        "generated_from_span": null
                    },
                    "source_text": null,
                    "attr_info": {
                        "attributes": [
                            {
                                "DocComment": " A UTF-8–encoded, growable string."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " `String` is the most common string type. It has ownership over the contents"
                            },
                            {
                                "DocComment": " of the string, stored in a heap-allocated buffer (see [Representation](#representation))."
                            },
                            {
                                "DocComment": " It is closely related to its borrowed counterpart, the primitive [`str`]."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " # Examples"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " You can create a `String` from [a literal string][`&str`] with [`String::from`]:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " [`String::from`]: From::from"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": " let hello = String::from(\"Hello, world!\");"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " You can append a [`char`] to a `String` with the [`push`] method, and"
                            },
                            {
                                "DocComment": " append a [`&str`] with the [`push_str`] method:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": " let mut hello = String::from(\"Hello, \");"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " hello.push('w');"
                            },
                            {
                                "DocComment": " hello.push_str(\"orld!\");"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " [`push`]: String::push"
                            },
                            {
                                "DocComment": " [`push_str`]: String::push_str"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " If you have a vector of UTF-8 bytes, you can create a `String` from it with"
                            },
                            {
                                "DocComment": " the [`from_utf8`] method:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": " // some bytes, in a vector"
                            },
                            {
                                "DocComment": " let sparkle_heart = vec![240, 159, 146, 150];"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " // We know these bytes are valid, so we'll use `unwrap()`."
                            },
                            {
                                "DocComment": " let sparkle_heart = String::from_utf8(sparkle_heart).unwrap();"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " assert_eq!(\"💖\", sparkle_heart);"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " [`from_utf8`]: String::from_utf8"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " # UTF-8"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " `String`s are always valid UTF-8. If you need a non-UTF-8 string, consider"
                            },
                            {
                                "DocComment": " [`OsString`]. It is similar, but without the UTF-8 constraint. Because UTF-8"
                            },
                            {
                                "DocComment": " is a variable width encoding, `String`s are typically smaller than an array of"
                            },
                            {
                                "DocComment": " the same `char`s:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": " // `s` is ASCII which represents each `char` as one byte"
                            },
                            {
                                "DocComment": " let s = \"hello\";"
                            },
                            {
                                "DocComment": " assert_eq!(s.len(), 5);"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " // A `char` array with the same contents would be longer because"
                            },
                            {
                                "DocComment": " // every `char` is four bytes"
                            },
                            {
                                "DocComment": " let s = ['h', 'e', 'l', 'l', 'o'];"
                            },
                            {
                                "DocComment": " let size: usize = s.into_iter().map(|c| size_of_val(&c)).sum();"
                            },
                            {
                                "DocComment": " assert_eq!(size, 20);"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " // However, for non-ASCII strings, the difference will be smaller"
                            },
                            {
                                "DocComment": " // and sometimes they are the same"
                            },
                            {
                                "DocComment": " let s = \"💖💖💖💖💖\";"
                            },
                            {
                                "DocComment": " assert_eq!(s.len(), 20);"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " let s = ['💖', '💖', '💖', '💖', '💖'];"
                            },
                            {
                                "DocComment": " let size: usize = s.into_iter().map(|c| size_of_val(&c)).sum();"
                            },
                            {
                                "DocComment": " assert_eq!(size, 20);"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " This raises interesting questions as to how `s[i]` should work."
                            },
                            {
                                "DocComment": " What should `i` be here? Several options include byte indices and"
                            },
                            {
                                "DocComment": " `char` indices but, because of UTF-8 encoding, only byte indices"
                            },
                            {
                                "DocComment": " would provide constant time indexing. Getting the `i`th `char`, for"
                            },
                            {
                                "DocComment": " example, is available using [`chars`]:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": " let s = \"hello\";"
                            },
                            {
                                "DocComment": " let third_character = s.chars().nth(2);"
                            },
                            {
                                "DocComment": " assert_eq!(third_character, Some('l'));"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " let s = \"💖💖💖💖💖\";"
                            },
                            {
                                "DocComment": " let third_character = s.chars().nth(2);"
                            },
                            {
                                "DocComment": " assert_eq!(third_character, Some('💖'));"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " Next, what should `s[i]` return? Because indexing returns a reference"
                            },
                            {
                                "DocComment": " to underlying data it could be `&u8`, `&[u8]`, or something else similar."
                            },
                            {
                                "DocComment": " Since we're only providing one index, `&u8` makes the most sense but that"
                            },
                            {
                                "DocComment": " might not be what the user expects and can be explicitly achieved with"
                            },
                            {
                                "DocComment": " [`as_bytes()`]:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": " // The first byte is 104 - the byte value of `'h'`"
                            },
                            {
                                "DocComment": " let s = \"hello\";"
                            },
                            {
                                "DocComment": " assert_eq!(s.as_bytes()[0], 104);"
                            },
                            {
                                "DocComment": " // or"
                            },
                            {
                                "DocComment": " assert_eq!(s.as_bytes()[0], b'h');"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " // The first byte is 240 which isn't obviously useful"
                            },
                            {
                                "DocComment": " let s = \"💖💖💖💖💖\";"
                            },
                            {
                                "DocComment": " assert_eq!(s.as_bytes()[0], 240);"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " Due to these ambiguities/restrictions, indexing with a `usize` is simply"
                            },
                            {
                                "DocComment": " forbidden:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```compile_fail,E0277"
                            },
                            {
                                "DocComment": " let s = \"hello\";"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " // The following will not compile!"
                            },
                            {
                                "DocComment": " println!(\"The first letter of s is {}\", s[0]);"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " It is more clear, however, how `&s[i..j]` should work (that is,"
                            },
                            {
                                "DocComment": " indexing with a range). It should accept byte indices (to be constant-time)"
                            },
                            {
                                "DocComment": " and return a `&str` which is UTF-8 encoded. This is also called \"string slicing\"."
                            },
                            {
                                "DocComment": " Note this will panic if the byte indices provided are not character"
                            },
                            {
                                "DocComment": " boundaries - see [`is_char_boundary`] for more details. See the implementations"
                            },
                            {
                                "DocComment": " for [`SliceIndex<str>`] for more details on string slicing. For a non-panicking"
                            },
                            {
                                "DocComment": " version of string slicing, see [`get`]."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " [`OsString`]: ../../std/ffi/struct.OsString.html \"ffi::OsString\""
                            },
                            {
                                "DocComment": " [`SliceIndex<str>`]: core::slice::SliceIndex"
                            },
                            {
                                "DocComment": " [`as_bytes()`]: str::as_bytes"
                            },
                            {
                                "DocComment": " [`get`]: str::get"
                            },
                            {
                                "DocComment": " [`is_char_boundary`]: str::is_char_boundary"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " The [`bytes`] and [`chars`] methods return iterators over the bytes and"
                            },
                            {
                                "DocComment": " codepoints of the string, respectively. To iterate over codepoints along"
                            },
                            {
                                "DocComment": " with byte indices, use [`char_indices`]."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " [`bytes`]: str::bytes"
                            },
                            {
                                "DocComment": " [`chars`]: str::chars"
                            },
                            {
                                "DocComment": " [`char_indices`]: str::char_indices"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " # Deref"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " `String` implements <code>[Deref]<Target = [str]></code>, and so inherits all of [`str`]'s"
                            },
                            {
                                "DocComment": " methods. In addition, this means that you can pass a `String` to a"
                            },
                            {
                                "DocComment": " function which takes a [`&str`] by using an ampersand (`&`):"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": " fn takes_str(s: &str) { }"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " let s = String::from(\"Hello\");"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " takes_str(&s);"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " This will create a [`&str`] from the `String` and pass it in. This"
                            },
                            {
                                "DocComment": " conversion is very inexpensive, and so generally, functions will accept"
                            },
                            {
                                "DocComment": " [`&str`]s as arguments unless they need a `String` for some specific"
                            },
                            {
                                "DocComment": " reason."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " In certain cases Rust doesn't have enough information to make this"
                            },
                            {
                                "DocComment": " conversion, known as [`Deref`] coercion. In the following example a string"
                            },
                            {
                                "DocComment": " slice [`&'a str`][`&str`] implements the trait `TraitExample`, and the function"
                            },
                            {
                                "DocComment": " `example_func` takes anything that implements the trait. In this case Rust"
                            },
                            {
                                "DocComment": " would need to make two implicit conversions, which Rust doesn't have the"
                            },
                            {
                                "DocComment": " means to do. For that reason, the following example will not compile."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```compile_fail,E0277"
                            },
                            {
                                "DocComment": " trait TraitExample {}"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " impl<'a> TraitExample for &'a str {}"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " fn example_func<A: TraitExample>(example_arg: A) {}"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " let example_string = String::from(\"example_string\");"
                            },
                            {
                                "DocComment": " example_func(&example_string);"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " There are two options that would work instead. The first would be to"
                            },
                            {
                                "DocComment": " change the line `example_func(&example_string);` to"
                            },
                            {
                                "DocComment": " `example_func(example_string.as_str());`, using the method [`as_str()`]"
                            },
                            {
                                "DocComment": " to explicitly extract the string slice containing the string. The second"
                            },
                            {
                                "DocComment": " way changes `example_func(&example_string);` to"
                            },
                            {
                                "DocComment": " `example_func(&*example_string);`. In this case we are dereferencing a"
                            },
                            {
                                "DocComment": " `String` to a [`str`], then referencing the [`str`] back to"
                            },
                            {
                                "DocComment": " [`&str`]. The second way is more idiomatic, however both work to do the"
                            },
                            {
                                "DocComment": " conversion explicitly rather than relying on the implicit conversion."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " # Representation"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " A `String` is made up of three components: a pointer to some bytes, a"
                            },
                            {
                                "DocComment": " length, and a capacity. The pointer points to the internal buffer which `String`"
                            },
                            {
                                "DocComment": " uses to store its data. The length is the number of bytes currently stored"
                            },
                            {
                                "DocComment": " in the buffer, and the capacity is the size of the buffer in bytes. As such,"
                            },
                            {
                                "DocComment": " the length will always be less than or equal to the capacity."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " This buffer is always stored on the heap."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " You can look at these with the [`as_ptr`], [`len`], and [`capacity`]"
                            },
                            {
                                "DocComment": " methods:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": " use std::mem;"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " let story = String::from(\"Once upon a time...\");"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " // Prevent automatically dropping the String's data"
                            },
                            {
                                "DocComment": " let mut story = mem::ManuallyDrop::new(story);"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " let ptr = story.as_mut_ptr();"
                            },
                            {
                                "DocComment": " let len = story.len();"
                            },
                            {
                                "DocComment": " let capacity = story.capacity();"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " // story has nineteen bytes"
                            },
                            {
                                "DocComment": " assert_eq!(19, len);"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " // We can re-build a String out of ptr, len, and capacity. This is all"
                            },
                            {
                                "DocComment": " // unsafe because we are responsible for making sure the components are"
                            },
                            {
                                "DocComment": " // valid:"
                            },
                            {
                                "DocComment": " let s = unsafe { String::from_raw_parts(ptr, len, capacity) } ;"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " assert_eq!(String::from(\"Once upon a time...\"), s);"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " [`as_ptr`]: str::as_ptr"
                            },
                            {
                                "DocComment": " [`len`]: String::len"
                            },
                            {
                                "DocComment": " [`capacity`]: String::capacity"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " If a `String` has enough capacity, adding elements to it will not"
                            },
                            {
                                "DocComment": " re-allocate. For example, consider this program:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": " let mut s = String::new();"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " println!(\"{}\", s.capacity());"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " for _ in 0..5 {"
                            },
                            {
                                "DocComment": "     s.push_str(\"hello\");"
                            },
                            {
                                "DocComment": "     println!(\"{}\", s.capacity());"
                            },
                            {
                                "DocComment": " }"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " This will output the following:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```text"
                            },
                            {
                                "DocComment": " 0"
                            },
                            {
                                "DocComment": " 8"
                            },
                            {
                                "DocComment": " 16"
                            },
                            {
                                "DocComment": " 16"
                            },
                            {
                                "DocComment": " 32"
                            },
                            {
                                "DocComment": " 32"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " At first, we have no memory allocated at all, but as we append to the"
                            },
                            {
                                "DocComment": " string, it increases its capacity appropriately. If we instead use the"
                            },
                            {
                                "DocComment": " [`with_capacity`] method to allocate the correct capacity initially:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": " let mut s = String::with_capacity(25);"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " println!(\"{}\", s.capacity());"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " for _ in 0..5 {"
                            },
                            {
                                "DocComment": "     s.push_str(\"hello\");"
                            },
                            {
                                "DocComment": "     println!(\"{}\", s.capacity());"
                            },
                            {
                                "DocComment": " }"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " [`with_capacity`]: String::with_capacity"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " We end up with a different output:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```text"
                            },
                            {
                                "DocComment": " 25"
                            },
                            {
                                "DocComment": " 25"
                            },
                            {
                                "DocComment": " 25"
                            },
                            {
                                "DocComment": " 25"
                            },
                            {
                                "DocComment": " 25"
                            },
                            {
                                "DocComment": " 25"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " Here, there's no need to allocate more memory inside the loop."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " [str]: prim@str \"str\""
                            },
                            {
                                "DocComment": " [`str`]: prim@str \"str\""
                            },
                            {
                                "DocComment": " [`&str`]: prim@str \"&str\""
                            },
                            {
                                "DocComment": " [Deref]: core::ops::Deref \"ops::Deref\""
                            },
                            {
                                "DocComment": " [`Deref`]: core::ops::Deref \"ops::Deref\""
                            },
                            {
                                "DocComment": " [`as_str()`]: String::as_str"
                            }
                        ],
                        "inline": null,
                        "rename": null,
                        "public": true
                    },
                    "is_local": false,
                    "opacity": "Foreign",
                    "lang_item": "String"
                },
                "generics": {
                    "regions": [],
                    "types": [],
                    "const_generics": [],
                    "trait_clauses": [],
                    "regions_outlive": [],
                    "types_outlive": [],
                    "trait_type_constraints": []
                },
                "src": "TopLevel",
                "kind": "Opaque",
                "layout": {
                    "size": 24,
                    "align": 8,
                    "discriminant_layout": null,
                    "uninhabited": false,
                    "variant_layouts": [
                        {
                            "field_offsets": [
                                0
                            ],
                            "uninhabited": false,
                            "tag": null
                        }
                    ]
                },
                "ptr_metadata": "null"
            },
            null,
            null
        ],
        "fun_decls": [
            {
                "def_id": 0,
                "item_meta": {
                    "name": [
                        {
                            "Ident": [
                                "basic_move",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "main",
                                0
                            ]
                        }
                    ],
                    "span": {
                        "span": {
                            "file_id": 0,
                            "beg": {
                                "line": 1,
                                "col": 0
                            },
                            "end": {
                                "line": 4,
                                "col": 1
                            }
                        },
                        "generated_from_span": null
                    },
                    "source_text": "fn main() {\n    let x = String::from(\"hello\");\n    let y = x;\n}",
                    "attr_info": {
                        "attributes": [],
                        "inline": null,
                        "rename": null,
                        "public": false
                    },
                    "is_local": true,
                    "opacity": "Transparent",
                    "lang_item": null
                },
                "signature": {
                    "is_unsafe": false,
                    "generics": {
                        "regions": [],
                        "types": [],
                        "const_generics": [],
                        "trait_clauses": [],
                        "regions_outlive": [],
                        "types_outlive": [],
                        "trait_type_constraints": []
                    },
                    "inputs": [],
                    "output": {
                        "Adt": {
                            "id": "Tuple",
                            "generics": {
                                "regions": [],
                                "types": [],
                                "const_generics": [],
                                "trait_refs": []
                            }
                        }
                    }
                },
                "kind": "TopLevel",
                "is_global_initializer": null,
                "body": {
                    "Ok": {
                        "Unstructured": {
                            "span": {
                                "span": {
                                    "file_id": 0,
                                    "beg": {
                                        "line": 1,
                                        "col": 0
                                    },
                                    "end": {
                                        "line": 4,
                                        "col": 1
                                    }
                                },
                                "generated_from_span": null
                            },
                            "locals": {
                                "arg_count": 0,
                                "locals": [
                                    {
                                        "index": 0,
                                        "name": null,
                                        "ty": {
                                            "Adt": {
                                                "id": "Tuple",
                                                "generics": {
                                                    "regions": [],
                                                    "types": [],
                                                    "const_generics": [],
                                                    "trait_refs": []
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "index": 1,
                                        "name": "x",
                                        "ty": {
                                            "Adt": {
                                                "id": {
                                                    "Adt": 0
                                                },
                                                "generics": {
                                                    "regions": [],
                                                    "types": [],
                                                    "const_generics": [],
                                                    "trait_refs": []
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "index": 2,
                                        "name": "y",
                                        "ty": {
                                            "Adt": {
                                                "id": {
                                                    "Adt": 0
                                                },
                                                "generics": {
                                                    "regions": [],
                                                    "types": [],
                                                    "const_generics": [],
                                                    "trait_refs": []
                                                }
                                            }
                                        }
                                    }
                                ]
                            },
                            "comments": [],
                            "body": [
                                {
                                    "statements": [
                                        {
                                            "span": {
                                                "span": {
                                                    "file_id": 0,
                                                    "beg": {
                                                        "line": 2,
                                                        "col": 8
                                                    },
                                                    "end": {
                                                        "line": 2,
                                                        "col": 9
                                                    }
                                                },
                                                "generated_from_span": null
                                            },
                                            "content": {
                                                "StorageLive": 1
                                            },
                                            "comments_before": []
                                        }
                                    ],
                                    "terminator": {
                                        "span": {
                                            "span": {
                                                "file_id": 0,
                                                "beg": {
                                                    "line": 2,
                                                    "col": 12
                                                },
                                                "end": {
                                                    "line": 2,
                                                    "col": 33
                                                }
                                            },
                                            "generated_from_span": null
                                        },
                                        "content": {
                                            "Call": {
                                                "call": {
                                                    "func": {
                                                        "Regular": {
                                                            "func": {
                                                                "Fun": {
                                                                    "Regular": 3
                                                                }
                                                            },
                                                            "generics": {
                                                                "regions": [
                                                                    "Erased"
                                                                ],
                                                                "types": [],
                                                                "const_generics": [],
                                                                "trait_refs": []
                                                            }
                                                        }
                                                    },
                                                    "args": [
                                                        {
                                                            "Const": {
                                                                "value": {
                                                                    "Literal": {
                                                                        "Str": "hello"
                                                                    }
                                                                },
                                                                "ty": {
                                                                    "Ref": [
                                                                        "Erased",
                                                                        {
                                                                            "Adt": {
                                                                                "id": {
                                                                                    "Builtin": "Str"
                                                                                },
                                                                                "generics": {
                                                                                    "regions": [],
                                                                                    "types": [],
                                                                                    "const_generics": [],
                                                                                    "trait_refs": []
                                                                                }
                                                                            }
                                                                        },
                                                                        "Shared"
                                                                    ]
                                                                }
                                                            }
                                                        }
                                                    ],
                                                    "dest": {
                                                        "kind": {
                                                            "Local": 1
                                                        },
                                                        "ty": {
                                                            "Adt": {
                                                                "id": {
                                                                    "Adt": 0
                                                                },
                                                                "generics": {
                                                                    "regions": [],
                                                                    "types": [],
                                                                    "const_generics": [],
                                                                    "trait_refs": []
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                "target": 1,
                                                "on_unwind": 2
                                            }
                                        },
                                        "comments_before": []
                                    }
                                },
                                {
                                    "statements": [
                                        {
                                            "span": {
                                                "span": {
                                                    "file_id": 0,
                                                    "beg": {
                                                        "line": 3,
                                                        "col": 8
                                                    },
                                                    "end": {
                                                        "line": 3,
                                                        "col": 9
                                                    }
                                                },
                                                "generated_from_span": null
                                            },
                                            "content": {
                                                "StorageLive": 2
                                            },
                                            "comments_before": []
                                        },
                                        {
                                            "span": {
                                                "span": {
                                                    "file_id": 0,
                                                    "beg": {
                                                        "line": 3,
                                                        "col": 12
                                                    },
                                                    "end": {
                                                        "line": 3,
                                                        "col": 13
                                                    }
                                                },
                                                "generated_from_span": null
                                            },
                                            "content": {
                                                "Assign": [
                                                    {
                                                        "kind": {
                                                            "Local": 2
                                                        },
                                                        "ty": {
                                                            "Adt": {
                                                                "id": {
                                                                    "Adt": 0
                                                                },
                                                                "generics": {
                                                                    "regions": [],
                                                                    "types": [],
                                                                    "const_generics": [],
                                                                    "trait_refs": []
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "Use": {
                                                            "Move": {
                                                                "kind": {
                                                                    "Local": 1
                                                                },
                                                                "ty": {
                                                                    "Adt": {
                                                                        "id": {
                                                                            "Adt": 0
                                                                        },
                                                                        "generics": {
                                                                            "regions": [],
                                                                            "types": [],
                                                                            "const_generics": [],
                                                                            "trait_refs": []
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            "comments_before": []
                                        },
                                        {
                                            "span": {
                                                "span": {
                                                    "file_id": 0,
                                                    "beg": {
                                                        "line": 1,
                                                        "col": 10
                                                    },
                                                    "end": {
                                                        "line": 4,
                                                        "col": 1
                                                    }
                                                },
                                                "generated_from_span": null
                                            },
                                            "content": {
                                                "Assign": [
                                                    {
                                                        "kind": {
                                                            "Local": 0
                                                        },
                                                        "ty": {
                                                            "Adt": {
                                                                "id": "Tuple",
                                                                "generics": {
                                                                    "regions": [],
                                                                    "types": [],
                                                                    "const_generics": [],
                                                                    "trait_refs": []
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "Aggregate": [
                                                            {
                                                                "Adt": [
                                                                    {
                                                                        "id": "Tuple",
                                                                        "generics": {
                                                                            "regions": [],
                                                                            "types": [],
                                                                            "const_generics": [],
                                                                            "trait_refs": []
                                                                        }
                                                                    },
                                                                    null,
                                                                    null
                                                                ]
                                                            },
                                                            []
                                                        ]
                                                    }
                                                ]
                                            },
                                            "comments_before": []
                                        },
                                        {
                                            "span": {
                                                "span": {
                                                    "file_id": 0,
                                                    "beg": {
                                                        "line": 4,
                                                        "col": 0
                                                    },
                                                    "end": {
                                                        "line": 4,
                                                        "col": 1
                                                    }
                                                },
                                                "generated_from_span": null
                                            },
                                            "content": {
                                                "Drop": [
                                                    {
                                                        "kind": {
                                                            "Local": 2
                                                        },
                                                        "ty": {
                                                            "Adt": {
                                                                "id": {
                                                                    "Adt": 0
                                                                },
                                                                "generics": {
                                                                    "regions": [],
                                                                    "types": [],
                                                                    "const_generics": [],
                                                                    "trait_refs": []
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "kind": {
                                                            "TraitImpl": {
                                                                "id": 1,
                                                                "generics": {
                                                                    "regions": [],
                                                                    "types": [],
                                                                    "const_generics": [],
                                                                    "trait_refs": []
                                                                }
                                                            }
                                                        },
                                                        "trait_decl_ref": {
                                                            "regions": [],
                                                            "skip_binder": {
                                                                "id": 1,
                                                                "generics": {
                                                                    "regions": [],
                                                                    "types": [
                                                                        {
                                                                            "Adt": {
                                                                                "id": {
                                                                                    "Adt": 0
                                                                                },
                                                                                "generics": {
                                                                                    "regions": [],
                                                                                    "types": [],
                                                                                    "const_generics": [],
                                                                                    "trait_refs": []
                                                                                }
                                                                            }
                                                                        }
                                                                    ],
                                                                    "const_generics": [],
                                                                    "trait_refs": []
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            "comments_before": []
                                        },
                                        {
                                            "span": {
                                                "span": {
                                                    "file_id": 0,
                                                    "beg": {
                                                        "line": 4,
                                                        "col": 0
                                                    },
                                                    "end": {
                                                        "line": 4,
                                                        "col": 1
                                                    }
                                                },
                                                "generated_from_span": null
                                            },
                                            "content": {
                                                "StorageDead": 2
                                            },
                                            "comments_before": []
                                        },
                                        {
                                            "span": {
                                                "span": {
                                                    "file_id": 0,
                                                    "beg": {
                                                        "line": 4,
                                                        "col": 0
                                                    },
                                                    "end": {
                                                        "line": 4,
                                                        "col": 1
                                                    }
                                                },
                                                "generated_from_span": null
                                            },
                                            "content": {
                                                "Drop": [
                                                    {
                                                        "kind": {
                                                            "Local": 1
                                                        },
                                                        "ty": {
                                                            "Adt": {
                                                                "id": {
                                                                    "Adt": 0
                                                                },
                                                                "generics": {
                                                                    "regions": [],
                                                                    "types": [],
                                                                    "const_generics": [],
                                                                    "trait_refs": []
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "kind": {
                                                            "TraitImpl": {
                                                                "id": 1,
                                                                "generics": {
                                                                    "regions": [],
                                                                    "types": [],
                                                                    "const_generics": [],
                                                                    "trait_refs": []
                                                                }
                                                            }
                                                        },
                                                        "trait_decl_ref": {
                                                            "regions": [],
                                                            "skip_binder": {
                                                                "id": 1,
                                                                "generics": {
                                                                    "regions": [],
                                                                    "types": [
                                                                        {
                                                                            "Adt": {
                                                                                "id": {
                                                                                    "Adt": 0
                                                                                },
                                                                                "generics": {
                                                                                    "regions": [],
                                                                                    "types": [],
                                                                                    "const_generics": [],
                                                                                    "trait_refs": []
                                                                                }
                                                                            }
                                                                        }
                                                                    ],
                                                                    "const_generics": [],
                                                                    "trait_refs": []
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            "comments_before": []
                                        },
                                        {
                                            "span": {
                                                "span": {
                                                    "file_id": 0,
                                                    "beg": {
                                                        "line": 4,
                                                        "col": 0
                                                    },
                                                    "end": {
                                                        "line": 4,
                                                        "col": 1
                                                    }
                                                },
                                                "generated_from_span": null
                                            },
                                            "content": {
                                                "StorageDead": 1
                                            },
                                            "comments_before": []
                                        },
                                        {
                                            "span": {
                                                "span": {
                                                    "file_id": 0,
                                                    "beg": {
                                                        "line": 4,
                                                        "col": 1
                                                    },
                                                    "end": {
                                                        "line": 4,
                                                        "col": 1
                                                    }
                                                },
                                                "generated_from_span": null
                                            },
                                            "content": {
                                                "Assign": [
                                                    {
                                                        "kind": {
                                                            "Local": 0
                                                        },
                                                        "ty": {
                                                            "Adt": {
                                                                "id": "Tuple",
                                                                "generics": {
                                                                    "regions": [],
                                                                    "types": [],
                                                                    "const_generics": [],
                                                                    "trait_refs": []
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "Aggregate": [
                                                            {
                                                                "Adt": [
                                                                    {
                                                                        "id": "Tuple",
                                                                        "generics": {
                                                                            "regions": [],
                                                                            "types": [],
                                                                            "const_generics": [],
                                                                            "trait_refs": []
                                                                        }
                                                                    },
                                                                    null,
                                                                    null
                                                                ]
                                                            },
                                                            []
                                                        ]
                                                    }
                                                ]
                                            },
                                            "comments_before": []
                                        }
                                    ],
                                    "terminator": {
                                        "span": {
                                            "span": {
                                                "file_id": 0,
                                                "beg": {
                                                    "line": 4,
                                                    "col": 1
                                                },
                                                "end": {
                                                    "line": 4,
                                                    "col": 1
                                                }
                                            },
                                            "generated_from_span": null
                                        },
                                        "content": "Return",
                                        "comments_before": []
                                    }
                                },
                                {
                                    "statements": [],
                                    "terminator": {
                                        "span": {
                                            "span": {
                                                "file_id": 0,
                                                "beg": {
                                                    "line": 1,
                                                    "col": 0
                                                },
                                                "end": {
                                                    "line": 4,
                                                    "col": 1
                                                }
                                            },
                                            "generated_from_span": null
                                        },
                                        "content": "UnwindResume",
                                        "comments_before": []
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            {
                "def_id": 1,
                "item_meta": {
                    "name": [
                        {
                            "Ident": [
                                "core",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "convert",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "From",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "from",
                                0
                            ]
                        }
                    ],
                    "span": {
                        "span": {
                            "file_id": 3,
                            "beg": {
                                "line": 588,
                                "col": 4
                            },
                            "end": {
                                "line": 588,
                                "col": 30
                            }
                        },
                        "generated_from_span": null
                    },
                    "source_text": null,
                    "attr_info": {
                        "attributes": [
                            {
                                "DocComment": " Converts to this type from the input type."
                            },
                            {
                                "Unknown": {
                                    "path": "rustc_diagnostic_item",
                                    "args": "\"from_fn\""
                                }
                            }
                        ],
                        "inline": null,
                        "rename": null,
                        "public": true
                    },
                    "is_local": false,
                    "opacity": "Foreign",
                    "lang_item": "from_fn"
                },
                "signature": {
                    "is_unsafe": false,
                    "generics": {
                        "regions": [],
                        "types": [
                            {
                                "index": 0,
                                "name": "Self"
                            },
                            {
                                "index": 1,
                                "name": "T"
                            }
                        ],
                        "const_generics": [],
                        "trait_clauses": [
                            {
                                "clause_id": 0,
                                "span": {
                                    "span": {
                                        "file_id": 0,
                                        "beg": {
                                            "line": 1,
                                            "col": 0
                                        },
                                        "end": {
                                            "line": 1,
                                            "col": 0
                                        }
                                    },
                                    "generated_from_span": null
                                },
                                "origin": "WhereClauseOnFn",
                                "trait_": {
                                    "regions": [],
                                    "skip_binder": {
                                        "id": 0,
                                        "generics": {
                                            "regions": [],
                                            "types": [
                                                {
                                                    "TypeVar": {
                                                        "Free": 0
                                                    }
                                                },
                                                {
                                                    "TypeVar": {
                                                        "Free": 1
                                                    }
                                                }
                                            ],
                                            "const_generics": [],
                                            "trait_refs": []
                                        }
                                    }
                                }
                            }
                        ],
                        "regions_outlive": [],
                        "types_outlive": [],
                        "trait_type_constraints": []
                    },
                    "inputs": [
                        {
                            "TypeVar": {
                                "Free": 1
                            }
                        }
                    ],
                    "output": {
                        "TypeVar": {
                            "Free": 0
                        }
                    }
                },
                "kind": {
                    "TraitDecl": {
                        "trait_ref": {
                            "id": 0,
                            "generics": {
                                "regions": [],
                                "types": [
                                    {
                                        "TypeVar": {
                                            "Free": 0
                                        }
                                    },
                                    {
                                        "TypeVar": {
                                            "Free": 1
                                        }
                                    }
                                ],
                                "const_generics": [],
                                "trait_refs": []
                            }
                        },
                        "item_name": "from",
                        "has_default": false
                    }
                },
                "is_global_initializer": null,
                "body": {
                    "Err": null
                }
            },
            {
                "def_id": 2,
                "item_meta": {
                    "name": [
                        {
                            "Ident": [
                                "core",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "ops",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "drop",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "Drop",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "drop",
                                0
                            ]
                        }
                    ],
                    "span": {
                        "span": {
                            "file_id": 5,
                            "beg": {
                                "line": 241,
                                "col": 4
                            },
                            "end": {
                                "line": 241,
                                "col": 23
                            }
                        },
                        "generated_from_span": null
                    },
                    "source_text": null,
                    "attr_info": {
                        "attributes": [
                            {
                                "DocComment": " Executes the destructor for this type."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " This method is called implicitly when the value goes out of scope,"
                            },
                            {
                                "DocComment": " and cannot be called explicitly (this is compiler error [E0040])."
                            },
                            {
                                "DocComment": " However, the [`mem::drop`] function in the prelude can be"
                            },
                            {
                                "DocComment": " used to call the argument's `Drop` implementation."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " When this method has been called, `self` has not yet been deallocated."
                            },
                            {
                                "DocComment": " That only happens after the method is over."
                            },
                            {
                                "DocComment": " If this wasn't the case, `self` would be a dangling reference."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " # Panics"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " Implementations should generally avoid [`panic!`]ing, because `drop()` may itself be called"
                            },
                            {
                                "DocComment": " during unwinding due to a panic, and if the `drop()` panics in that situation (a “double"
                            },
                            {
                                "DocComment": " panic”), this will likely abort the program. It is possible to check [`panicking()`] first,"
                            },
                            {
                                "DocComment": " which may be desirable for a `Drop` implementation that is reporting a bug of the kind"
                            },
                            {
                                "DocComment": " “you didn't finish using this before it was dropped”; but most types should simply clean up"
                            },
                            {
                                "DocComment": " their owned allocations or other resources and return normally from `drop()`, regardless of"
                            },
                            {
                                "DocComment": " what state they are in."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " Note that even if this panics, the value is considered to be dropped;"
                            },
                            {
                                "DocComment": " you must not cause `drop` to be called again. This is normally automatically"
                            },
                            {
                                "DocComment": " handled by the compiler, but when using unsafe code, can sometimes occur"
                            },
                            {
                                "DocComment": " unintentionally, particularly when using [`ptr::drop_in_place`]."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " [E0040]: ../../error_codes/E0040.html"
                            },
                            {
                                "DocComment": " [`panic!`]: crate::panic!"
                            },
                            {
                                "DocComment": " [`panicking()`]: ../../std/thread/fn.panicking.html"
                            },
                            {
                                "DocComment": " [`mem::drop`]: drop"
                            },
                            {
                                "DocComment": " [`ptr::drop_in_place`]: crate::ptr::drop_in_place"
                            }
                        ],
                        "inline": null,
                        "rename": null,
                        "public": true
                    },
                    "is_local": false,
                    "opacity": "Foreign",
                    "lang_item": null
                },
                "signature": {
                    "is_unsafe": false,
                    "generics": {
                        "regions": [
                            {
                                "index": 0,
                                "name": null
                            }
                        ],
                        "types": [
                            {
                                "index": 0,
                                "name": "Self"
                            }
                        ],
                        "const_generics": [],
                        "trait_clauses": [
                            {
                                "clause_id": 0,
                                "span": {
                                    "span": {
                                        "file_id": 0,
                                        "beg": {
                                            "line": 1,
                                            "col": 0
                                        },
                                        "end": {
                                            "line": 1,
                                            "col": 0
                                        }
                                    },
                                    "generated_from_span": null
                                },
                                "origin": "WhereClauseOnFn",
                                "trait_": {
                                    "regions": [],
                                    "skip_binder": {
                                        "id": 1,
                                        "generics": {
                                            "regions": [],
                                            "types": [
                                                {
                                                    "TypeVar": {
                                                        "Free": 0
                                                    }
                                                }
                                            ],
                                            "const_generics": [],
                                            "trait_refs": []
                                        }
                                    }
                                }
                            }
                        ],
                        "regions_outlive": [],
                        "types_outlive": [],
                        "trait_type_constraints": []
                    },
                    "inputs": [
                        {
                            "Ref": [
                                {
                                    "Var": {
                                        "Free": 0
                                    }
                                },
                                {
                                    "TypeVar": {
                                        "Free": 0
                                    }
                                },
                                "Mut"
                            ]
                        }
                    ],
                    "output": {
                        "Adt": {
                            "id": "Tuple",
                            "generics": {
                                "regions": [],
                                "types": [],
                                "const_generics": [],
                                "trait_refs": []
                            }
                        }
                    }
                },
                "kind": {
                    "TraitDecl": {
                        "trait_ref": {
                            "id": 1,
                            "generics": {
                                "regions": [],
                                "types": [
                                    {
                                        "TypeVar": {
                                            "Free": 0
                                        }
                                    }
                                ],
                                "const_generics": [],
                                "trait_refs": []
                            }
                        },
                        "item_name": "drop",
                        "has_default": false
                    }
                },
                "is_global_initializer": null,
                "body": {
                    "Err": null
                }
            },
            {
                "def_id": 3,
                "item_meta": {
                    "name": [
                        {
                            "Ident": [
                                "alloc",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "string",
                                0
                            ]
                        },
                        {
                            "Impl": {
                                "Trait": 0
                            }
                        },
                        {
                            "Ident": [
                                "from",
                                0
                            ]
                        }
                    ],
                    "span": {
                        "span": {
                            "file_id": 1,
                            "beg": {
                                "line": 3052,
                                "col": 4
                            },
                            "end": {
                                "line": 3052,
                                "col": 30
                            }
                        },
                        "generated_from_span": null
                    },
                    "source_text": null,
                    "attr_info": {
                        "attributes": [
                            {
                                "DocComment": " Converts a `&str` into a [`String`]."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " The result is allocated on the heap."
                            }
                        ],
                        "inline": "Hint",
                        "rename": null,
                        "public": true
                    },
                    "is_local": false,
                    "opacity": "Foreign",
                    "lang_item": null
                },
                "signature": {
                    "is_unsafe": false,
                    "generics": {
                        "regions": [
                            {
                                "index": 0,
                                "name": null
                            }
                        ],
                        "types": [],
                        "const_generics": [],
                        "trait_clauses": [],
                        "regions_outlive": [],
                        "types_outlive": [],
                        "trait_type_constraints": []
                    },
                    "inputs": [
                        {
                            "Ref": [
                                {
                                    "Var": {
                                        "Free": 0
                                    }
                                },
                                {
                                    "Adt": {
                                        "id": {
                                            "Builtin": "Str"
                                        },
                                        "generics": {
                                            "regions": [],
                                            "types": [],
                                            "const_generics": [],
                                            "trait_refs": []
                                        }
                                    }
                                },
                                "Shared"
                            ]
                        }
                    ],
                    "output": {
                        "Adt": {
                            "id": {
                                "Adt": 0
                            },
                            "generics": {
                                "regions": [],
                                "types": [],
                                "const_generics": [],
                                "trait_refs": []
                            }
                        }
                    }
                },
                "kind": {
                    "TraitImpl": {
                        "impl_ref": {
                            "id": 0,
                            "generics": {
                                "regions": [
                                    {
                                        "Var": {
                                            "Free": 0
                                        }
                                    }
                                ],
                                "types": [],
                                "const_generics": [],
                                "trait_refs": []
                            }
                        },
                        "trait_ref": {
                            "id": 0,
                            "generics": {
                                "regions": [],
                                "types": [
                                    {
                                        "Adt": {
                                            "id": {
                                                "Adt": 0
                                            },
                                            "generics": {
                                                "regions": [],
                                                "types": [],
                                                "const_generics": [],
                                                "trait_refs": []
                                            }
                                        }
                                    },
                                    {
                                        "Ref": [
                                            {
                                                "Var": {
                                                    "Free": 0
                                                }
                                            },
                                            {
                                                "Adt": {
                                                    "id": {
                                                        "Builtin": "Str"
                                                    },
                                                    "generics": {
                                                        "regions": [],
                                                        "types": [],
                                                        "const_generics": [],
                                                        "trait_refs": []
                                                    }
                                                }
                                            },
                                            "Shared"
                                        ]
                                    }
                                ],
                                "const_generics": [],
                                "trait_refs": []
                            }
                        },
                        "item_name": "from",
                        "reuses_default": true
                    }
                },
                "is_global_initializer": null,
                "body": {
                    "Err": null
                }
            },
            {
                "def_id": 4,
                "item_meta": {
                    "name": [
                        {
                            "Ident": [
                                "alloc",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "string",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "String",
                                0
                            ]
                        },
                        {
                            "Impl": {
                                "Trait": 1
                            }
                        },
                        {
                            "Ident": [
                                "drop",
                                0
                            ]
                        }
                    ],
                    "span": {
                        "span": {
                            "file_id": 1,
                            "beg": {
                                "line": 360,
                                "col": 0
                            },
                            "end": {
                                "line": 360,
                                "col": 17
                            }
                        },
                        "generated_from_span": null
                    },
                    "source_text": null,
                    "attr_info": {
                        "attributes": [],
                        "inline": null,
                        "rename": null,
                        "public": false
                    },
                    "is_local": false,
                    "opacity": "Foreign",
                    "lang_item": null
                },
                "signature": {
                    "is_unsafe": false,
                    "generics": {
                        "regions": [
                            {
                                "index": 0,
                                "name": null
                            }
                        ],
                        "types": [],
                        "const_generics": [],
                        "trait_clauses": [],
                        "regions_outlive": [],
                        "types_outlive": [],
                        "trait_type_constraints": []
                    },
                    "inputs": [
                        {
                            "Ref": [
                                {
                                    "Var": {
                                        "Free": 0
                                    }
                                },
                                {
                                    "Adt": {
                                        "id": {
                                            "Adt": 0
                                        },
                                        "generics": {
                                            "regions": [],
                                            "types": [],
                                            "const_generics": [],
                                            "trait_refs": []
                                        }
                                    }
                                },
                                "Mut"
                            ]
                        }
                    ],
                    "output": {
                        "Adt": {
                            "id": "Tuple",
                            "generics": {
                                "regions": [],
                                "types": [],
                                "const_generics": [],
                                "trait_refs": []
                            }
                        }
                    }
                },
                "kind": {
                    "TraitImpl": {
                        "impl_ref": {
                            "id": 1,
                            "generics": {
                                "regions": [],
                                "types": [],
                                "const_generics": [],
                                "trait_refs": []
                            }
                        },
                        "trait_ref": {
                            "id": 1,
                            "generics": {
                                "regions": [],
                                "types": [
                                    {
                                        "Adt": {
                                            "id": {
                                                "Adt": 0
                                            },
                                            "generics": {
                                                "regions": [],
                                                "types": [],
                                                "const_generics": [],
                                                "trait_refs": []
                                            }
                                        }
                                    }
                                ],
                                "const_generics": [],
                                "trait_refs": []
                            }
                        },
                        "item_name": "drop",
                        "reuses_default": false
                    }
                },
                "is_global_initializer": null,
                "body": {
                    "Err": null
                }
            }
        ],
        "global_decls": [],
        "trait_decls": [
            {
                "def_id": 0,
                "item_meta": {
                    "name": [
                        {
                            "Ident": [
                                "core",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "convert",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "From",
                                0
                            ]
                        }
                    ],
                    "span": {
                        "span": {
                            "file_id": 3,
                            "beg": {
                                "line": 583,
                                "col": 0
                            },
                            "end": {
                                "line": 583,
                                "col": 24
                            }
                        },
                        "generated_from_span": null
                    },
                    "source_text": null,
                    "attr_info": {
                        "attributes": [
                            {
                                "DocComment": " Used to do value-to-value conversions while consuming the input value. It is the reciprocal of"
                            },
                            {
                                "DocComment": " [`Into`]."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " One should always prefer implementing `From` over [`Into`]"
                            },
                            {
                                "DocComment": " because implementing `From` automatically provides one with an implementation of [`Into`]"
                            },
                            {
                                "DocComment": " thanks to the blanket implementation in the standard library."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " Only implement [`Into`] when targeting a version prior to Rust 1.41 and converting to a type"
                            },
                            {
                                "DocComment": " outside the current crate."
                            },
                            {
                                "DocComment": " `From` was not able to do these types of conversions in earlier versions because of Rust's"
                            },
                            {
                                "DocComment": " orphaning rules."
                            },
                            {
                                "DocComment": " See [`Into`] for more details."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " Prefer using [`Into`] over [`From`] when specifying trait bounds on a generic function"
                            },
                            {
                                "DocComment": " to ensure that types that only implement [`Into`] can be used as well."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " The `From` trait is also very useful when performing error handling. When constructing a function"
                            },
                            {
                                "DocComment": " that is capable of failing, the return type will generally be of the form `Result<T, E>`."
                            },
                            {
                                "DocComment": " `From` simplifies error handling by allowing a function to return a single error type"
                            },
                            {
                                "DocComment": " that encapsulates multiple error types. See the \"Examples\" section and [the book][book] for more"
                            },
                            {
                                "DocComment": " details."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " **Note: This trait must not fail**. The `From` trait is intended for perfect conversions."
                            },
                            {
                                "DocComment": " If the conversion can fail or is not perfect, use [`TryFrom`]."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " # Generic Implementations"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " - `From<T> for U` implies [`Into`]`<U> for T`"
                            },
                            {
                                "DocComment": " - `From` is reflexive, which means that `From<T> for T` is implemented"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " # When to implement `From`"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " While there's no technical restrictions on which conversions can be done using"
                            },
                            {
                                "DocComment": " a `From` implementation, the general expectation is that the conversions"
                            },
                            {
                                "DocComment": " should typically be restricted as follows:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " * The conversion is *infallible*: if the conversion can fail, use [`TryFrom`]"
                            },
                            {
                                "DocComment": "   instead; don't provide a `From` impl that panics."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " * The conversion is *lossless*: semantically, it should not lose or discard"
                            },
                            {
                                "DocComment": "   information. For example, `i32: From<u16>` exists, where the original"
                            },
                            {
                                "DocComment": "   value can be recovered using `u16: TryFrom<i32>`.  And `String: From<&str>`"
                            },
                            {
                                "DocComment": "   exists, where you can get something equivalent to the original value via"
                            },
                            {
                                "DocComment": "   `Deref`.  But `From` cannot be used to convert from `u32` to `u16`, since"
                            },
                            {
                                "DocComment": "   that cannot succeed in a lossless way.  (There's some wiggle room here for"
                            },
                            {
                                "DocComment": "   information not considered semantically relevant.  For example,"
                            },
                            {
                                "DocComment": "   `Box<[T]>: From<Vec<T>>` exists even though it might not preserve capacity,"
                            },
                            {
                                "DocComment": "   like how two vectors can be equal despite differing capacities.)"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " * The conversion is *value-preserving*: the conceptual kind and meaning of"
                            },
                            {
                                "DocComment": "   the resulting value is the same, even though the Rust type and technical"
                            },
                            {
                                "DocComment": "   representation might be different.  For example `-1_i8 as u8` is *lossless*,"
                            },
                            {
                                "DocComment": "   since `as` casting back can recover the original value, but that conversion"
                            },
                            {
                                "DocComment": "   is *not* available via `From` because `-1` and `255` are different conceptual"
                            },
                            {
                                "DocComment": "   values (despite being identical bit patterns technically).  But"
                            },
                            {
                                "DocComment": "   `f32: From<i16>` *is* available because `1_i16` and `1.0_f32` are conceptually"
                            },
                            {
                                "DocComment": "   the same real number (despite having very different bit patterns technically)."
                            },
                            {
                                "DocComment": "   `String: From<char>` is available because they're both *text*, but"
                            },
                            {
                                "DocComment": "   `String: From<u32>` is *not* available, since `1` (a number) and `\"1\"`"
                            },
                            {
                                "DocComment": "   (text) are too different.  (Converting values to text is instead covered"
                            },
                            {
                                "DocComment": "   by the [`Display`](crate::fmt::Display) trait.)"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " * The conversion is *obvious*: it's the only reasonable conversion between"
                            },
                            {
                                "DocComment": "   the two types.  Otherwise it's better to have it be a named method or"
                            },
                            {
                                "DocComment": "   constructor, like how [`str::as_bytes`] is a method and how integers have"
                            },
                            {
                                "DocComment": "   methods like [`u32::from_ne_bytes`], [`u32::from_le_bytes`], and"
                            },
                            {
                                "DocComment": "   [`u32::from_be_bytes`], none of which are `From` implementations.  Whereas"
                            },
                            {
                                "DocComment": "   there's only one reasonable way to wrap an [`Ipv6Addr`](crate::net::Ipv6Addr)"
                            },
                            {
                                "DocComment": "   into an [`IpAddr`](crate::net::IpAddr), thus `IpAddr: From<Ipv6Addr>` exists."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " # Examples"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " [`String`] implements `From<&str>`:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " An explicit conversion from a `&str` to a String is done as follows:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": " let string = \"hello\".to_string();"
                            },
                            {
                                "DocComment": " let other_string = String::from(\"hello\");"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " assert_eq!(string, other_string);"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " While performing error handling it is often useful to implement `From` for your own error type."
                            },
                            {
                                "DocComment": " By converting underlying error types to our own custom error type that encapsulates the"
                            },
                            {
                                "DocComment": " underlying error type, we can return a single error type without losing information on the"
                            },
                            {
                                "DocComment": " underlying cause. The '?' operator automatically converts the underlying error type to our"
                            },
                            {
                                "DocComment": " custom error type with `From::from`."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": " use std::fs;"
                            },
                            {
                                "DocComment": " use std::io;"
                            },
                            {
                                "DocComment": " use std::num;"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " enum CliError {"
                            },
                            {
                                "DocComment": "     IoError(io::Error),"
                            },
                            {
                                "DocComment": "     ParseError(num::ParseIntError),"
                            },
                            {
                                "DocComment": " }"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " impl From<io::Error> for CliError {"
                            },
                            {
                                "DocComment": "     fn from(error: io::Error) -> Self {"
                            },
                            {
                                "DocComment": "         CliError::IoError(error)"
                            },
                            {
                                "DocComment": "     }"
                            },
                            {
                                "DocComment": " }"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " impl From<num::ParseIntError> for CliError {"
                            },
                            {
                                "DocComment": "     fn from(error: num::ParseIntError) -> Self {"
                            },
                            {
                                "DocComment": "         CliError::ParseError(error)"
                            },
                            {
                                "DocComment": "     }"
                            },
                            {
                                "DocComment": " }"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " fn open_and_parse_file(file_name: &str) -> Result<i32, CliError> {"
                            },
                            {
                                "DocComment": "     let mut contents = fs::read_to_string(&file_name)?;"
                            },
                            {
                                "DocComment": "     let num: i32 = contents.trim().parse()?;"
                            },
                            {
                                "DocComment": "     Ok(num)"
                            },
                            {
                                "DocComment": " }"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " [`String`]: ../../std/string/struct.String.html"
                            },
                            {
                                "DocComment": " [`from`]: From::from"
                            },
                            {
                                "DocComment": " [book]: ../../book/ch09-00-error-handling.html"
                            },
                            {
                                "Unknown": {
                                    "path": "rustc_diagnostic_item",
                                    "args": "\"From\""
                                }
                            },
                            {
                                "Unknown": {
                                    "path": "rustc_on_unimplemented",
                                    "args": "on(all(Self = \"&str\", T = \"alloc::string::String\"), note =\n\"to coerce a `{T}` into a `{Self}`, use `&*` as a prefix\",)"
                                }
                            },
                            {
                                "Unknown": {
                                    "path": "doc",
                                    "args": "search_unbox"
                                }
                            }
                        ],
                        "inline": null,
                        "rename": null,
                        "public": true
                    },
                    "is_local": false,
                    "opacity": "Foreign",
                    "lang_item": "From"
                },
                "generics": {
                    "regions": [],
                    "types": [
                        {
                            "index": 0,
                            "name": "Self"
                        },
                        {
                            "index": 1,
                            "name": "T"
                        }
                    ],
                    "const_generics": [],
                    "trait_clauses": [],
                    "regions_outlive": [],
                    "types_outlive": [],
                    "trait_type_constraints": []
                },
                "parent_clauses": [
                    {
                        "clause_id": 0,
                        "span": {
                            "span": {
                                "file_id": 3,
                                "beg": {
                                    "line": 583,
                                    "col": 19
                                },
                                "end": {
                                    "line": 583,
                                    "col": 24
                                }
                            },
                            "generated_from_span": null
                        },
                        "origin": "WhereClauseOnTrait",
                        "trait_": {
                            "regions": [],
                            "skip_binder": {
                                "id": 2,
                                "generics": {
                                    "regions": [],
                                    "types": [
                                        {
                                            "TypeVar": {
                                                "Free": 0
                                            }
                                        }
                                    ],
                                    "const_generics": [],
                                    "trait_refs": []
                                }
                            }
                        }
                    },
                    {
                        "clause_id": 1,
                        "span": {
                            "span": {
                                "file_id": 3,
                                "beg": {
                                    "line": 583,
                                    "col": 15
                                },
                                "end": {
                                    "line": 583,
                                    "col": 16
                                }
                            },
                            "generated_from_span": null
                        },
                        "origin": "WhereClauseOnTrait",
                        "trait_": {
                            "regions": [],
                            "skip_binder": {
                                "id": 2,
                                "generics": {
                                    "regions": [],
                                    "types": [
                                        {
                                            "TypeVar": {
                                                "Free": 1
                                            }
                                        }
                                    ],
                                    "const_generics": [],
                                    "trait_refs": []
                                }
                            }
                        }
                    }
                ],
                "consts": [],
                "const_defaults": {},
                "types": [],
                "type_defaults": {},
                "type_clauses": [],
                "methods": [
                    [
                        "from",
                        {
                            "params": {
                                "regions": [],
                                "types": [],
                                "const_generics": [],
                                "trait_clauses": [],
                                "regions_outlive": [],
                                "types_outlive": [],
                                "trait_type_constraints": []
                            },
                            "skip_binder": {
                                "id": 1,
                                "generics": {
                                    "regions": [],
                                    "types": [
                                        {
                                            "TypeVar": {
                                                "Free": 0
                                            }
                                        },
                                        {
                                            "TypeVar": {
                                                "Free": 1
                                            }
                                        }
                                    ],
                                    "const_generics": [],
                                    "trait_refs": [
                                        {
                                            "kind": "SelfId",
                                            "trait_decl_ref": {
                                                "regions": [],
                                                "skip_binder": {
                                                    "id": 0,
                                                    "generics": {
                                                        "regions": [],
                                                        "types": [
                                                            {
                                                                "TypeVar": {
                                                                    "Free": 0
                                                                }
                                                            },
                                                            {
                                                                "TypeVar": {
                                                                    "Free": 1
                                                                }
                                                            }
                                                        ],
                                                        "const_generics": [],
                                                        "trait_refs": []
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            "kind": {
                                "TraitMethod": [
                                    0,
                                    "from"
                                ]
                            }
                        }
                    ]
                ],
                "vtable": null
            },
            {
                "def_id": 1,
                "item_meta": {
                    "name": [
                        {
                            "Ident": [
                                "core",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "ops",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "drop",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "Drop",
                                0
                            ]
                        }
                    ],
                    "span": {
                        "span": {
                            "file_id": 5,
                            "beg": {
                                "line": 208,
                                "col": 0
                            },
                            "end": {
                                "line": 208,
                                "col": 14
                            }
                        },
                        "generated_from_span": null
                    },
                    "source_text": null,
                    "attr_info": {
                        "attributes": [
                            {
                                "DocComment": " Custom code within the destructor."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " When a value is no longer needed, Rust will run a \"destructor\" on that value."
                            },
                            {
                                "DocComment": " The most common way that a value is no longer needed is when it goes out of"
                            },
                            {
                                "DocComment": " scope. Destructors may still run in other circumstances, but we're going to"
                            },
                            {
                                "DocComment": " focus on scope for the examples here. To learn about some of those other cases,"
                            },
                            {
                                "DocComment": " please see [the reference] section on destructors."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " [the reference]: https://doc.rust-lang.org/reference/destructors.html"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " This destructor consists of two components:"
                            },
                            {
                                "DocComment": " - A call to `Drop::drop` for that value, if this special `Drop` trait is implemented for its type."
                            },
                            {
                                "DocComment": " - The automatically generated \"drop glue\" which recursively calls the destructors"
                            },
                            {
                                "DocComment": "     of all the fields of this value."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " As Rust automatically calls the destructors of all contained fields,"
                            },
                            {
                                "DocComment": " you don't have to implement `Drop` in most cases. But there are some cases where"
                            },
                            {
                                "DocComment": " it is useful, for example for types which directly manage a resource."
                            },
                            {
                                "DocComment": " That resource may be memory, it may be a file descriptor, it may be a network socket."
                            },
                            {
                                "DocComment": " Once a value of that type is no longer going to be used, it should \"clean up\" its"
                            },
                            {
                                "DocComment": " resource by freeing the memory or closing the file or socket. This is"
                            },
                            {
                                "DocComment": " the job of a destructor, and therefore the job of `Drop::drop`."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ## Examples"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " To see destructors in action, let's take a look at the following program:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```rust"
                            },
                            {
                                "DocComment": " struct HasDrop;"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " impl Drop for HasDrop {"
                            },
                            {
                                "DocComment": "     fn drop(&mut self) {"
                            },
                            {
                                "DocComment": "         println!(\"Dropping HasDrop!\");"
                            },
                            {
                                "DocComment": "     }"
                            },
                            {
                                "DocComment": " }"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " struct HasTwoDrops {"
                            },
                            {
                                "DocComment": "     one: HasDrop,"
                            },
                            {
                                "DocComment": "     two: HasDrop,"
                            },
                            {
                                "DocComment": " }"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " impl Drop for HasTwoDrops {"
                            },
                            {
                                "DocComment": "     fn drop(&mut self) {"
                            },
                            {
                                "DocComment": "         println!(\"Dropping HasTwoDrops!\");"
                            },
                            {
                                "DocComment": "     }"
                            },
                            {
                                "DocComment": " }"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " fn main() {"
                            },
                            {
                                "DocComment": "     let _x = HasTwoDrops { one: HasDrop, two: HasDrop };"
                            },
                            {
                                "DocComment": "     println!(\"Running!\");"
                            },
                            {
                                "DocComment": " }"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " Rust will first call `Drop::drop` for `_x` and then for both `_x.one` and `_x.two`,"
                            },
                            {
                                "DocComment": " meaning that running this will print"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```text"
                            },
                            {
                                "DocComment": " Running!"
                            },
                            {
                                "DocComment": " Dropping HasTwoDrops!"
                            },
                            {
                                "DocComment": " Dropping HasDrop!"
                            },
                            {
                                "DocComment": " Dropping HasDrop!"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " Even if we remove the implementation of `Drop` for `HasTwoDrop`, the destructors of its fields are still called."
                            },
                            {
                                "DocComment": " This would result in"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```test"
                            },
                            {
                                "DocComment": " Running!"
                            },
                            {
                                "DocComment": " Dropping HasDrop!"
                            },
                            {
                                "DocComment": " Dropping HasDrop!"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ## You cannot call `Drop::drop` yourself"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " Because `Drop::drop` is used to clean up a value, it may be dangerous to use this value after"
                            },
                            {
                                "DocComment": " the method has been called. As `Drop::drop` does not take ownership of its input,"
                            },
                            {
                                "DocComment": " Rust prevents misuse by not allowing you to call `Drop::drop` directly."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " In other words, if you tried to explicitly call `Drop::drop` in the above example, you'd get a compiler error."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " If you'd like to explicitly call the destructor of a value, [`mem::drop`] can be used instead."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " [`mem::drop`]: drop"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ## Drop order"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " Which of our two `HasDrop` drops first, though? For structs, it's the same"
                            },
                            {
                                "DocComment": " order that they're declared: first `one`, then `two`. If you'd like to try"
                            },
                            {
                                "DocComment": " this yourself, you can modify `HasDrop` above to contain some data, like an"
                            },
                            {
                                "DocComment": " integer, and then use it in the `println!` inside of `Drop`. This behavior is"
                            },
                            {
                                "DocComment": " guaranteed by the language."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " Unlike for structs, local variables are dropped in reverse order:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```rust"
                            },
                            {
                                "DocComment": " struct Foo;"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " impl Drop for Foo {"
                            },
                            {
                                "DocComment": "     fn drop(&mut self) {"
                            },
                            {
                                "DocComment": "         println!(\"Dropping Foo!\")"
                            },
                            {
                                "DocComment": "     }"
                            },
                            {
                                "DocComment": " }"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " struct Bar;"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " impl Drop for Bar {"
                            },
                            {
                                "DocComment": "     fn drop(&mut self) {"
                            },
                            {
                                "DocComment": "         println!(\"Dropping Bar!\")"
                            },
                            {
                                "DocComment": "     }"
                            },
                            {
                                "DocComment": " }"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " fn main() {"
                            },
                            {
                                "DocComment": "     let _foo = Foo;"
                            },
                            {
                                "DocComment": "     let _bar = Bar;"
                            },
                            {
                                "DocComment": " }"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " This will print"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```text"
                            },
                            {
                                "DocComment": " Dropping Bar!"
                            },
                            {
                                "DocComment": " Dropping Foo!"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " Please see [the reference] for the full rules."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " [the reference]: https://doc.rust-lang.org/reference/destructors.html"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ## `Copy` and `Drop` are exclusive"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " You cannot implement both [`Copy`] and `Drop` on the same type. Types that"
                            },
                            {
                                "DocComment": " are `Copy` get implicitly duplicated by the compiler, making it very"
                            },
                            {
                                "DocComment": " hard to predict when, and how often destructors will be executed. As such,"
                            },
                            {
                                "DocComment": " these types cannot have destructors."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ## Drop check"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " Dropping interacts with the borrow checker in subtle ways: when a type `T` is being implicitly"
                            },
                            {
                                "DocComment": " dropped as some variable of this type goes out of scope, the borrow checker needs to ensure that"
                            },
                            {
                                "DocComment": " calling `T`'s destructor at this moment is safe. In particular, it also needs to be safe to"
                            },
                            {
                                "DocComment": " recursively drop all the fields of `T`. For example, it is crucial that code like the following"
                            },
                            {
                                "DocComment": " is being rejected:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```compile_fail,E0597"
                            },
                            {
                                "DocComment": " use std::cell::Cell;"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " struct S<'a>(Cell<Option<&'a S<'a>>>, Box<i32>);"
                            },
                            {
                                "DocComment": " impl Drop for S<'_> {"
                            },
                            {
                                "DocComment": "     fn drop(&mut self) {"
                            },
                            {
                                "DocComment": "         if let Some(r) = self.0.get() {"
                            },
                            {
                                "DocComment": "             // Print the contents of the `Box` in `r`."
                            },
                            {
                                "DocComment": "             println!(\"{}\", r.1);"
                            },
                            {
                                "DocComment": "         }"
                            },
                            {
                                "DocComment": "     }"
                            },
                            {
                                "DocComment": " }"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " fn main() {"
                            },
                            {
                                "DocComment": "     // Set up two `S` that point to each other."
                            },
                            {
                                "DocComment": "     let s1 = S(Cell::new(null), Box::new(42));"
                            },
                            {
                                "DocComment": "     let s2 = S(Cell::new(Some(&s1)), Box::new(42));"
                            },
                            {
                                "DocComment": "     s1.0.set(Some(&s2));"
                            },
                            {
                                "DocComment": "     // Now they both get dropped. But whichever is the 2nd one"
                            },
                            {
                                "DocComment": "     // to be dropped will access the `Box` in the first one,"
                            },
                            {
                                "DocComment": "     // which is a use-after-free!"
                            },
                            {
                                "DocComment": " }"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " The Nomicon discusses the need for [drop check in more detail][drop check]."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " To reject such code, the \"drop check\" analysis determines which types and lifetimes need to"
                            },
                            {
                                "DocComment": " still be live when `T` gets dropped. The exact details of this analysis are not yet"
                            },
                            {
                                "DocComment": " stably guaranteed and **subject to change**. Currently, the analysis works as follows:"
                            },
                            {
                                "DocComment": " - If `T` has no drop glue, then trivially nothing is required to be live. This is the case if"
                            },
                            {
                                "DocComment": "   neither `T` nor any of its (recursive) fields have a destructor (`impl Drop`). [`PhantomData`],"
                            },
                            {
                                "DocComment": "   arrays of length 0 and [`ManuallyDrop`] are considered to never have a destructor, no matter"
                            },
                            {
                                "DocComment": "   their field type."
                            },
                            {
                                "DocComment": " - If `T` has drop glue, then, for all types `U` that are *owned* by any field of `T`,"
                            },
                            {
                                "DocComment": "   recursively add the types and lifetimes that need to be live when `U` gets dropped. The set of"
                            },
                            {
                                "DocComment": "   owned types is determined by recursively traversing `T`:"
                            },
                            {
                                "DocComment": "   - Recursively descend through `PhantomData`, `Box`, tuples, and arrays (excluding arrays of"
                            },
                            {
                                "DocComment": "     length 0)."
                            },
                            {
                                "DocComment": "   - Stop at reference and raw pointer types as well as function pointers and function items;"
                            },
                            {
                                "DocComment": "     they do not own anything."
                            },
                            {
                                "DocComment": "   - Stop at non-composite types (type parameters that remain generic in the current context and"
                            },
                            {
                                "DocComment": "     base types such as integers and `bool`); these types are owned."
                            },
                            {
                                "DocComment": "   - When hitting an ADT with `impl Drop`, stop there; this type is owned."
                            },
                            {
                                "DocComment": "   - When hitting an ADT without `impl Drop`, recursively descend to its fields. (For an `enum`,"
                            },
                            {
                                "DocComment": "     consider all fields of all variants.)"
                            },
                            {
                                "DocComment": " - Furthermore, if `T` implements `Drop`, then all generic (lifetime and type) parameters of `T`"
                            },
                            {
                                "DocComment": "   must be live."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " In the above example, the last clause implies that `'a` must be live when `S<'a>` is dropped,"
                            },
                            {
                                "DocComment": " and hence the example is rejected. If we remove the `impl Drop`, the liveness requirement"
                            },
                            {
                                "DocComment": " disappears and the example is accepted."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " There exists an unstable way for a type to opt-out of the last clause; this is called \"drop"
                            },
                            {
                                "DocComment": " check eyepatch\" or `may_dangle`. For more details on this nightly-only feature, see the"
                            },
                            {
                                "DocComment": " [discussion in the Nomicon][nomicon]."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " [`ManuallyDrop`]: crate::mem::ManuallyDrop"
                            },
                            {
                                "DocComment": " [`PhantomData`]: crate::marker::PhantomData"
                            },
                            {
                                "DocComment": " [drop check]: ../../nomicon/dropck.html"
                            },
                            {
                                "DocComment": " [nomicon]: ../../nomicon/phantom-data.html#an-exception-the-special-case-of-the-standard-library-and-its-unstable-may_dangle"
                            }
                        ],
                        "inline": null,
                        "rename": null,
                        "public": true
                    },
                    "is_local": false,
                    "opacity": "Foreign",
                    "lang_item": "drop"
                },
                "generics": {
                    "regions": [],
                    "types": [
                        {
                            "index": 0,
                            "name": "Self"
                        }
                    ],
                    "const_generics": [],
                    "trait_clauses": [],
                    "regions_outlive": [],
                    "types_outlive": [],
                    "trait_type_constraints": []
                },
                "parent_clauses": [
                    {
                        "clause_id": 0,
                        "span": {
                            "span": {
                                "file_id": 5,
                                "beg": {
                                    "line": 208,
                                    "col": 0
                                },
                                "end": {
                                    "line": 242,
                                    "col": 1
                                }
                            },
                            "generated_from_span": null
                        },
                        "origin": "WhereClauseOnTrait",
                        "trait_": {
                            "regions": [],
                            "skip_binder": {
                                "id": 3,
                                "generics": {
                                    "regions": [],
                                    "types": [
                                        {
                                            "TypeVar": {
                                                "Free": 0
                                            }
                                        }
                                    ],
                                    "const_generics": [],
                                    "trait_refs": []
                                }
                            }
                        }
                    }
                ],
                "consts": [],
                "const_defaults": {},
                "types": [],
                "type_defaults": {},
                "type_clauses": [],
                "methods": [
                    [
                        "drop",
                        {
                            "params": {
                                "regions": [
                                    {
                                        "index": 0,
                                        "name": null
                                    }
                                ],
                                "types": [],
                                "const_generics": [],
                                "trait_clauses": [],
                                "regions_outlive": [],
                                "types_outlive": [],
                                "trait_type_constraints": []
                            },
                            "skip_binder": {
                                "id": 2,
                                "generics": {
                                    "regions": [
                                        {
                                            "Var": {
                                                "Bound": [
                                                    0,
                                                    0
                                                ]
                                            }
                                        }
                                    ],
                                    "types": [
                                        {
                                            "TypeVar": {
                                                "Free": 0
                                            }
                                        }
                                    ],
                                    "const_generics": [],
                                    "trait_refs": [
                                        {
                                            "kind": "SelfId",
                                            "trait_decl_ref": {
                                                "regions": [],
                                                "skip_binder": {
                                                    "id": 1,
                                                    "generics": {
                                                        "regions": [],
                                                        "types": [
                                                            {
                                                                "TypeVar": {
                                                                    "Free": 0
                                                                }
                                                            }
                                                        ],
                                                        "const_generics": [],
                                                        "trait_refs": []
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            "kind": {
                                "TraitMethod": [
                                    1,
                                    "drop"
                                ]
                            }
                        }
                    ]
                ],
                "vtable": {
                    "id": {
                        "Adt": 1
                    },
                    "generics": {
                        "regions": [],
                        "types": [],
                        "const_generics": [],
                        "trait_refs": []
                    }
                }
            },
            {
                "def_id": 2,
                "item_meta": {
                    "name": [
                        {
                            "Ident": [
                                "core",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "marker",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "Sized",
                                0
                            ]
                        }
                    ],
                    "span": {
                        "span": {
                            "file_id": 7,
                            "beg": {
                                "line": 161,
                                "col": 0
                            },
                            "end": {
                                "line": 161,
                                "col": 26
                            }
                        },
                        "generated_from_span": null
                    },
                    "source_text": null,
                    "attr_info": {
                        "attributes": [
                            {
                                "DocComment": " Types with a constant size known at compile time."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " All type parameters have an implicit bound of `Sized`. The special syntax"
                            },
                            {
                                "DocComment": " `?Sized` can be used to remove this bound if it's not appropriate."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": " # #![allow(dead_code)]"
                            },
                            {
                                "DocComment": " struct Foo<T>(T);"
                            },
                            {
                                "DocComment": " struct Bar<T: ?Sized>(T);"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " // struct FooUse(Foo<[i32]>); // error: Sized is not implemented for [i32]"
                            },
                            {
                                "DocComment": " struct BarUse(Bar<[i32]>); // OK"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " The one exception is the implicit `Self` type of a trait. A trait does not"
                            },
                            {
                                "DocComment": " have an implicit `Sized` bound as this is incompatible with [trait object]s"
                            },
                            {
                                "DocComment": " where, by definition, the trait needs to work with all possible implementors,"
                            },
                            {
                                "DocComment": " and thus could be any size."
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " Although Rust will let you bind `Sized` to a trait, you won't"
                            },
                            {
                                "DocComment": " be able to use it to form a trait object later:"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": " # #![allow(unused_variables)]"
                            },
                            {
                                "DocComment": " trait Foo { }"
                            },
                            {
                                "DocComment": " trait Bar: Sized { }"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " struct Impl;"
                            },
                            {
                                "DocComment": " impl Foo for Impl { }"
                            },
                            {
                                "DocComment": " impl Bar for Impl { }"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " let x: &dyn Foo = &Impl;    // OK"
                            },
                            {
                                "DocComment": " // let y: &dyn Bar = &Impl; // error: the trait `Bar` cannot"
                            },
                            {
                                "DocComment": "                             // be made into an object"
                            },
                            {
                                "DocComment": " ```"
                            },
                            {
                                "DocComment": ""
                            },
                            {
                                "DocComment": " [trait object]: ../../book/ch17-02-trait-objects.html"
                            },
                            {
                                "Unknown": {
                                    "path": "doc",
                                    "args": "alias = \"?\", alias = \"?Sized\""
                                }
                            },
                            {
                                "Unknown": {
                                    "path": "diagnostic::on_unimplemented",
                                    "args": "message =\n\"the size for values of type `{Self}` cannot be known at compilation time\",\nlabel = \"doesn't have a size known at compile-time\""
                                }
                            },
                            {
                                "Unknown": {
                                    "path": "fundamental",
                                    "args": null
                                }
                            }
                        ],
                        "inline": null,
                        "rename": null,
                        "public": true
                    },
                    "is_local": false,
                    "opacity": "Foreign",
                    "lang_item": "sized"
                },
                "generics": {
                    "regions": [],
                    "types": [
                        {
                            "index": 0,
                            "name": "Self"
                        }
                    ],
                    "const_generics": [],
                    "trait_clauses": [],
                    "regions_outlive": [],
                    "types_outlive": [],
                    "trait_type_constraints": []
                },
                "parent_clauses": [
                    {
                        "clause_id": 0,
                        "span": {
                            "span": {
                                "file_id": 7,
                                "beg": {
                                    "line": 161,
                                    "col": 17
                                },
                                "end": {
                                    "line": 161,
                                    "col": 26
                                }
                            },
                            "generated_from_span": null
                        },
                        "origin": "WhereClauseOnTrait",
                        "trait_": {
                            "regions": [],
                            "skip_binder": {
                                "id": 3,
                                "generics": {
                                    "regions": [],
                                    "types": [
                                        {
                                            "TypeVar": {
                                                "Free": 0
                                            }
                                        }
                                    ],
                                    "const_generics": [],
                                    "trait_refs": []
                                }
                            }
                        }
                    }
                ],
                "consts": [],
                "const_defaults": {},
                "types": [],
                "type_defaults": {},
                "type_clauses": [],
                "methods": [],
                "vtable": null
            },
            {
                "def_id": 3,
                "item_meta": {
                    "name": [
                        {
                            "Ident": [
                                "core",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "marker",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "MetaSized",
                                0
                            ]
                        }
                    ],
                    "span": {
                        "span": {
                            "file_id": 7,
                            "beg": {
                                "line": 179,
                                "col": 0
                            },
                            "end": {
                                "line": 179,
                                "col": 33
                            }
                        },
                        "generated_from_span": null
                    },
                    "source_text": null,
                    "attr_info": {
                        "attributes": [
                            {
                                "DocComment": " Types with a size that can be determined from pointer metadata."
                            },
                            {
                                "Unknown": {
                                    "path": "diagnostic::on_unimplemented",
                                    "args": "message = \"the size for values of type `{Self}` cannot be known\", label =\n\"doesn't have a known size\""
                                }
                            },
                            {
                                "Unknown": {
                                    "path": "fundamental",
                                    "args": null
                                }
                            }
                        ],
                        "inline": null,
                        "rename": null,
                        "public": true
                    },
                    "is_local": false,
                    "opacity": "Foreign",
                    "lang_item": "meta_sized"
                },
                "generics": {
                    "regions": [],
                    "types": [
                        {
                            "index": 0,
                            "name": "Self"
                        }
                    ],
                    "const_generics": [],
                    "trait_clauses": [],
                    "regions_outlive": [],
                    "types_outlive": [],
                    "trait_type_constraints": []
                },
                "parent_clauses": [],
                "consts": [],
                "const_defaults": {},
                "types": [],
                "type_defaults": {},
                "type_clauses": [],
                "methods": [],
                "vtable": {
                    "id": {
                        "Adt": 2
                    },
                    "generics": {
                        "regions": [],
                        "types": [],
                        "const_generics": [],
                        "trait_refs": []
                    }
                }
            }
        ],
        "trait_impls": [
            {
                "def_id": 0,
                "item_meta": {
                    "name": [
                        {
                            "Ident": [
                                "alloc",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "string",
                                0
                            ]
                        },
                        {
                            "Impl": {
                                "Trait": 0
                            }
                        }
                    ],
                    "span": {
                        "span": {
                            "file_id": 1,
                            "beg": {
                                "line": 3047,
                                "col": 0
                            },
                            "end": {
                                "line": 3047,
                                "col": 26
                            }
                        },
                        "generated_from_span": null
                    },
                    "source_text": null,
                    "attr_info": {
                        "attributes": [],
                        "inline": null,
                        "rename": null,
                        "public": false
                    },
                    "is_local": false,
                    "opacity": "Foreign",
                    "lang_item": null
                },
                "impl_trait": {
                    "id": 0,
                    "generics": {
                        "regions": [],
                        "types": [
                            {
                                "Adt": {
                                    "id": {
                                        "Adt": 0
                                    },
                                    "generics": {
                                        "regions": [],
                                        "types": [],
                                        "const_generics": [],
                                        "trait_refs": []
                                    }
                                }
                            },
                            {
                                "Ref": [
                                    {
                                        "Var": {
                                            "Free": 0
                                        }
                                    },
                                    {
                                        "Adt": {
                                            "id": {
                                                "Builtin": "Str"
                                            },
                                            "generics": {
                                                "regions": [],
                                                "types": [],
                                                "const_generics": [],
                                                "trait_refs": []
                                            }
                                        }
                                    },
                                    "Shared"
                                ]
                            }
                        ],
                        "const_generics": [],
                        "trait_refs": []
                    }
                },
                "generics": {
                    "regions": [
                        {
                            "index": 0,
                            "name": null
                        }
                    ],
                    "types": [],
                    "const_generics": [],
                    "trait_clauses": [],
                    "regions_outlive": [],
                    "types_outlive": [],
                    "trait_type_constraints": []
                },
                "parent_trait_refs": [
                    {
                        "kind": {
                            "BuiltinOrAuto": {
                                "trait_decl_ref": {
                                    "regions": [],
                                    "skip_binder": {
                                        "id": 2,
                                        "generics": {
                                            "regions": [],
                                            "types": [
                                                {
                                                    "Adt": {
                                                        "id": {
                                                            "Adt": 0
                                                        },
                                                        "generics": {
                                                            "regions": [],
                                                            "types": [],
                                                            "const_generics": [],
                                                            "trait_refs": []
                                                        }
                                                    }
                                                }
                                            ],
                                            "const_generics": [],
                                            "trait_refs": []
                                        }
                                    }
                                },
                                "parent_trait_refs": [
                                    {
                                        "kind": {
                                            "BuiltinOrAuto": {
                                                "trait_decl_ref": {
                                                    "regions": [],
                                                    "skip_binder": {
                                                        "id": 3,
                                                        "generics": {
                                                            "regions": [],
                                                            "types": [
                                                                {
                                                                    "Adt": {
                                                                        "id": {
                                                                            "Adt": 0
                                                                        },
                                                                        "generics": {
                                                                            "regions": [],
                                                                            "types": [],
                                                                            "const_generics": [],
                                                                            "trait_refs": []
                                                                        }
                                                                    }
                                                                }
                                                            ],
                                                            "const_generics": [],
                                                            "trait_refs": []
                                                        }
                                                    }
                                                },
                                                "parent_trait_refs": [],
                                                "types": []
                                            }
                                        },
                                        "trait_decl_ref": {
                                            "regions": [],
                                            "skip_binder": {
                                                "id": 3,
                                                "generics": {
                                                    "regions": [],
                                                    "types": [
                                                        {
                                                            "Adt": {
                                                                "id": {
                                                                    "Adt": 0
                                                                },
                                                                "generics": {
                                                                    "regions": [],
                                                                    "types": [],
                                                                    "const_generics": [],
                                                                    "trait_refs": []
                                                                }
                                                            }
                                                        }
                                                    ],
                                                    "const_generics": [],
                                                    "trait_refs": []
                                                }
                                            }
                                        }
                                    }
                                ],
                                "types": []
                            }
                        },
                        "trait_decl_ref": {
                            "regions": [],
                            "skip_binder": {
                                "id": 2,
                                "generics": {
                                    "regions": [],
                                    "types": [
                                        {
                                            "Adt": {
                                                "id": {
                                                    "Adt": 0
                                                },
                                                "generics": {
                                                    "regions": [],
                                                    "types": [],
                                                    "const_generics": [],
                                                    "trait_refs": []
                                                }
                                            }
                                        }
                                    ],
                                    "const_generics": [],
                                    "trait_refs": []
                                }
                            }
                        }
                    },
                    {
                        "kind": {
                            "BuiltinOrAuto": {
                                "trait_decl_ref": {
                                    "regions": [],
                                    "skip_binder": {
                                        "id": 2,
                                        "generics": {
                                            "regions": [],
                                            "types": [
                                                {
                                                    "Ref": [
                                                        "Erased",
                                                        {
                                                            "Adt": {
                                                                "id": {
                                                                    "Builtin": "Str"
                                                                },
                                                                "generics": {
                                                                    "regions": [],
                                                                    "types": [],
                                                                    "const_generics": [],
                                                                    "trait_refs": []
                                                                }
                                                            }
                                                        },
                                                        "Shared"
                                                    ]
                                                }
                                            ],
                                            "const_generics": [],
                                            "trait_refs": []
                                        }
                                    }
                                },
                                "parent_trait_refs": [
                                    {
                                        "kind": {
                                            "BuiltinOrAuto": {
                                                "trait_decl_ref": {
                                                    "regions": [],
                                                    "skip_binder": {
                                                        "id": 3,
                                                        "generics": {
                                                            "regions": [],
                                                            "types": [
                                                                {
                                                                    "Ref": [
                                                                        "Erased",
                                                                        {
                                                                            "Adt": {
                                                                                "id": {
                                                                                    "Builtin": "Str"
                                                                                },
                                                                                "generics": {
                                                                                    "regions": [],
                                                                                    "types": [],
                                                                                    "const_generics": [],
                                                                                    "trait_refs": []
                                                                                }
                                                                            }
                                                                        },
                                                                        "Shared"
                                                                    ]
                                                                }
                                                            ],
                                                            "const_generics": [],
                                                            "trait_refs": []
                                                        }
                                                    }
                                                },
                                                "parent_trait_refs": [],
                                                "types": []
                                            }
                                        },
                                        "trait_decl_ref": {
                                            "regions": [],
                                            "skip_binder": {
                                                "id": 3,
                                                "generics": {
                                                    "regions": [],
                                                    "types": [
                                                        {
                                                            "Ref": [
                                                                "Erased",
                                                                {
                                                                    "Adt": {
                                                                        "id": {
                                                                            "Builtin": "Str"
                                                                        },
                                                                        "generics": {
                                                                            "regions": [],
                                                                            "types": [],
                                                                            "const_generics": [],
                                                                            "trait_refs": []
                                                                        }
                                                                    }
                                                                },
                                                                "Shared"
                                                            ]
                                                        }
                                                    ],
                                                    "const_generics": [],
                                                    "trait_refs": []
                                                }
                                            }
                                        }
                                    }
                                ],
                                "types": []
                            }
                        },
                        "trait_decl_ref": {
                            "regions": [],
                            "skip_binder": {
                                "id": 2,
                                "generics": {
                                    "regions": [],
                                    "types": [
                                        {
                                            "Ref": [
                                                "Erased",
                                                {
                                                    "Adt": {
                                                        "id": {
                                                            "Builtin": "Str"
                                                        },
                                                        "generics": {
                                                            "regions": [],
                                                            "types": [],
                                                            "const_generics": [],
                                                            "trait_refs": []
                                                        }
                                                    }
                                                },
                                                "Shared"
                                            ]
                                        }
                                    ],
                                    "const_generics": [],
                                    "trait_refs": []
                                }
                            }
                        }
                    }
                ],
                "consts": [],
                "types": [],
                "type_clauses": [],
                "methods": [
                    [
                        "from",
                        {
                            "params": {
                                "regions": [],
                                "types": [],
                                "const_generics": [],
                                "trait_clauses": [],
                                "regions_outlive": [],
                                "types_outlive": [],
                                "trait_type_constraints": []
                            },
                            "skip_binder": {
                                "id": 3,
                                "generics": {
                                    "regions": [
                                        {
                                            "Var": {
                                                "Free": 0
                                            }
                                        }
                                    ],
                                    "types": [],
                                    "const_generics": [],
                                    "trait_refs": []
                                }
                            },
                            "kind": {
                                "TraitMethod": [
                                    0,
                                    "from"
                                ]
                            }
                        }
                    ]
                ],
                "vtable": null
            },
            {
                "def_id": 1,
                "item_meta": {
                    "name": [
                        {
                            "Ident": [
                                "alloc",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "string",
                                0
                            ]
                        },
                        {
                            "Ident": [
                                "String",
                                0
                            ]
                        },
                        {
                            "Impl": {
                                "Trait": 1
                            }
                        }
                    ],
                    "span": {
                        "span": {
                            "file_id": 1,
                            "beg": {
                                "line": 360,
                                "col": 0
                            },
                            "end": {
                                "line": 360,
                                "col": 17
                            }
                        },
                        "generated_from_span": null
                    },
                    "source_text": null,
                    "attr_info": {
                        "attributes": [],
                        "inline": null,
                        "rename": null,
                        "public": false
                    },
                    "is_local": false,
                    "opacity": "Foreign",
                    "lang_item": null
                },
                "impl_trait": {
                    "id": 1,
                    "generics": {
                        "regions": [],
                        "types": [
                            {
                                "Adt": {
                                    "id": {
                                        "Adt": 0
                                    },
                                    "generics": {
                                        "regions": [],
                                        "types": [],
                                        "const_generics": [],
                                        "trait_refs": []
                                    }
                                }
                            }
                        ],
                        "const_generics": [],
                        "trait_refs": []
                    }
                },
                "generics": {
                    "regions": [],
                    "types": [],
                    "const_generics": [],
                    "trait_clauses": [],
                    "regions_outlive": [],
                    "types_outlive": [],
                    "trait_type_constraints": []
                },
                "parent_trait_refs": [
                    {
                        "kind": {
                            "BuiltinOrAuto": {
                                "trait_decl_ref": {
                                    "regions": [],
                                    "skip_binder": {
                                        "id": 3,
                                        "generics": {
                                            "regions": [],
                                            "types": [
                                                {
                                                    "Adt": {
                                                        "id": {
                                                            "Adt": 0
                                                        },
                                                        "generics": {
                                                            "regions": [],
                                                            "types": [],
                                                            "const_generics": [],
                                                            "trait_refs": []
                                                        }
                                                    }
                                                }
                                            ],
                                            "const_generics": [],
                                            "trait_refs": []
                                        }
                                    }
                                },
                                "parent_trait_refs": [],
                                "types": []
                            }
                        },
                        "trait_decl_ref": {
                            "regions": [],
                            "skip_binder": {
                                "id": 3,
                                "generics": {
                                    "regions": [],
                                    "types": [
                                        {
                                            "Adt": {
                                                "id": {
                                                    "Adt": 0
                                                },
                                                "generics": {
                                                    "regions": [],
                                                    "types": [],
                                                    "const_generics": [],
                                                    "trait_refs": []
                                                }
                                            }
                                        }
                                    ],
                                    "const_generics": [],
                                    "trait_refs": []
                                }
                            }
                        }
                    }
                ],
                "consts": [],
                "types": [],
                "type_clauses": [],
                "methods": [
                    [
                        "drop",
                        {
                            "params": {
                                "regions": [
                                    {
                                        "index": 0,
                                        "name": null
                                    }
                                ],
                                "types": [],
                                "const_generics": [],
                                "trait_clauses": [],
                                "regions_outlive": [],
                                "types_outlive": [],
                                "trait_type_constraints": []
                            },
                            "skip_binder": {
                                "id": 4,
                                "generics": {
                                    "regions": [
                                        {
                                            "Var": {
                                                "Bound": [
                                                    0,
                                                    0
                                                ]
                                            }
                                        }
                                    ],
                                    "types": [],
                                    "const_generics": [],
                                    "trait_refs": []
                                }
                            },
                            "kind": {
                                "TraitMethod": [
                                    1,
                                    "drop"
                                ]
                            }
                        }
                    ]
                ],
                "vtable": null
            }
        ],
        "ordered_decls": [
            {
                "TraitDecl": {
                    "NonRec": 3
                }
            },
            {
                "TraitDecl": {
                    "NonRec": 2
                }
            },
            {
                "TraitDecl": {
                    "NonRec": 0
                }
            },
            {
                "Fun": {
                    "NonRec": 1
                }
            },
            {
                "TraitDecl": {
                    "NonRec": 1
                }
            },
            {
                "Fun": {
                    "NonRec": 2
                }
            },
            {
                "Type": {
                    "NonRec": 0
                }
            },
            {
                "Fun": {
                    "NonRec": 4
                }
            },
            {
                "TraitImpl": {
                    "NonRec": 1
                }
            },
            {
                "Fun": {
                    "NonRec": 3
                }
            },
            {
                "TraitImpl": {
                    "NonRec": 0
                }
            },
            {
                "Fun": {
                    "NonRec": 0
                }
            }
        ]
    }
}