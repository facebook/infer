# Final ULLBC before control-flow reconstruction:

// Full name: comparisons::comparisons
fn comparisons()
{
    let @0: (); // return
    let a@1: i32; // local
    let b@2: i32; // local
    let @3: bool; // anonymous local
    let @4: i32; // anonymous local
    let @5: i32; // anonymous local
    let @6: bool; // anonymous local
    let @7: i32; // anonymous local
    let @8: i32; // anonymous local
    let @9: bool; // anonymous local
    let @10: i32; // anonymous local
    let @11: i32; // anonymous local
    let @12: bool; // anonymous local
    let @13: i32; // anonymous local
    let @14: i32; // anonymous local
    let @15: bool; // anonymous local
    let @16: i32; // anonymous local
    let @17: i32; // anonymous local
    let @18: bool; // anonymous local
    let @19: i32; // anonymous local
    let @20: i32; // anonymous local
    let @21: (); // anonymous local

    bb0: {
        storage_live(a@1);
        a@1 := const (5 : i32);
        storage_live(b@2);
        b@2 := const (3 : i32);
        storage_live(@3);
        storage_live(@4);
        @4 := copy (a@1);
        storage_live(@5);
        @5 := copy (b@2);
        @3 := move (@4) < move (@5);
        storage_dead(@5);
        storage_dead(@4);
        storage_dead(@3);
        storage_live(@6);
        storage_live(@7);
        @7 := copy (a@1);
        storage_live(@8);
        @8 := copy (b@2);
        @6 := move (@7) >= move (@8);
        storage_dead(@8);
        storage_dead(@7);
        storage_dead(@6);
        storage_live(@9);
        storage_live(@10);
        @10 := copy (a@1);
        storage_live(@11);
        @11 := copy (b@2);
        @9 := move (@10) > move (@11);
        storage_dead(@11);
        storage_dead(@10);
        storage_dead(@9);
        storage_live(@12);
        storage_live(@13);
        @13 := copy (a@1);
        storage_live(@14);
        @14 := copy (b@2);
        @12 := move (@13) <= move (@14);
        storage_dead(@14);
        storage_dead(@13);
        storage_dead(@12);
        storage_live(@15);
        storage_live(@16);
        @16 := copy (a@1);
        storage_live(@17);
        @17 := copy (b@2);
        @15 := move (@16) != move (@17);
        storage_dead(@17);
        storage_dead(@16);
        storage_dead(@15);
        storage_live(@18);
        storage_live(@19);
        @19 := copy (a@1);
        storage_live(@20);
        @20 := copy (b@2);
        @18 := move (@19) == move (@20);
        storage_dead(@20);
        storage_dead(@19);
        storage_dead(@18);
        nop;
        @0 := ();
        storage_dead(b@2);
        storage_dead(a@1);
        @0 := ();
        return;
    }
}

// Full name: comparisons::main
fn main()
{
    let @0: (); // return
    let @1: (); // anonymous local
    let @2: (); // anonymous local

    bb0: {
        storage_live(@1);
        @1 := comparisons() -> bb1 (unwind: bb2);
    }

    bb1: {
        storage_dead(@1);
        nop;
        @0 := ();
        @0 := ();
        return;
    }

    bb2: {
        unwind_continue;
    }
}