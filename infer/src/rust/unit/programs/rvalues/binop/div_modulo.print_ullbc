# Final ULLBC before control-flow reconstruction:

// Full name: div_modulo::div_and_modulo
fn div_and_modulo()
{
    let @0: (); // return
    let a@1: u32; // local
    let b@2: u32; // local
    let @3: u32; // anonymous local
    let @4: u32; // anonymous local
    let @5: u32; // anonymous local
    let @6: bool; // anonymous local
    let @7: u32; // anonymous local
    let @8: u32; // anonymous local
    let @9: u32; // anonymous local
    let @10: bool; // anonymous local
    let c@11: i32; // local
    let d@12: i32; // local
    let @13: i32; // anonymous local
    let @14: i32; // anonymous local
    let @15: i32; // anonymous local
    let @16: bool; // anonymous local
    let @17: bool; // anonymous local
    let @18: bool; // anonymous local
    let @19: bool; // anonymous local
    let @20: i32; // anonymous local
    let @21: i32; // anonymous local
    let @22: i32; // anonymous local
    let @23: bool; // anonymous local
    let @24: bool; // anonymous local
    let @25: bool; // anonymous local
    let @26: bool; // anonymous local
    let e@27: i32; // local
    let f@28: i32; // local
    let @29: i32; // anonymous local
    let @30: i32; // anonymous local
    let @31: i32; // anonymous local
    let @32: bool; // anonymous local
    let @33: bool; // anonymous local
    let @34: bool; // anonymous local
    let @35: bool; // anonymous local
    let @36: i32; // anonymous local
    let @37: i32; // anonymous local
    let @38: i32; // anonymous local
    let @39: bool; // anonymous local
    let @40: bool; // anonymous local
    let @41: bool; // anonymous local
    let @42: bool; // anonymous local
    let @43: (); // anonymous local

    bb0: {
        storage_live(a@1);
        a@1 := const (7 : u32);
        storage_live(b@2);
        b@2 := const (3 : u32);
        storage_live(@3);
        storage_live(@4);
        @4 := copy (a@1);
        storage_live(@5);
        @5 := copy (b@2);
        nop;
        nop;
        @3 := move (@4) panic./ move (@5);
        storage_dead(@5);
        storage_dead(@4);
        storage_dead(@3);
        storage_live(@7);
        storage_live(@8);
        @8 := copy (a@1);
        storage_live(@9);
        @9 := copy (b@2);
        nop;
        nop;
        @7 := move (@8) panic.% move (@9);
        storage_dead(@9);
        storage_dead(@8);
        storage_dead(@7);
        storage_live(c@11);
        c@11 := const (7 : i32);
        storage_live(d@12);
        d@12 := const (-3 : i32);
        storage_live(@13);
        storage_live(@14);
        @14 := copy (c@11);
        storage_live(@15);
        @15 := copy (d@12);
        nop;
        nop;
        nop;
        nop;
        nop;
        nop;
        @13 := move (@14) panic./ move (@15);
        storage_dead(@15);
        storage_dead(@14);
        storage_dead(@13);
        storage_live(@20);
        storage_live(@21);
        @21 := copy (c@11);
        storage_live(@22);
        @22 := copy (d@12);
        nop;
        nop;
        nop;
        nop;
        nop;
        nop;
        @20 := move (@21) panic.% move (@22);
        storage_dead(@22);
        storage_dead(@21);
        storage_dead(@20);
        storage_live(e@27);
        e@27 := const (-7 : i32);
        storage_live(f@28);
        f@28 := const (3 : i32);
        storage_live(@29);
        storage_live(@30);
        @30 := copy (e@27);
        storage_live(@31);
        @31 := copy (f@28);
        nop;
        nop;
        nop;
        nop;
        nop;
        nop;
        @29 := move (@30) panic./ move (@31);
        storage_dead(@31);
        storage_dead(@30);
        storage_dead(@29);
        storage_live(@36);
        storage_live(@37);
        @37 := copy (e@27);
        storage_live(@38);
        @38 := copy (f@28);
        nop;
        nop;
        nop;
        nop;
        nop;
        nop;
        @36 := move (@37) panic.% move (@38);
        storage_dead(@38);
        storage_dead(@37);
        storage_dead(@36);
        nop;
        @0 := ();
        storage_dead(f@28);
        storage_dead(e@27);
        storage_dead(d@12);
        storage_dead(c@11);
        storage_dead(b@2);
        storage_dead(a@1);
        @0 := ();
        return;
    }
}

// Full name: div_modulo::main
fn main()
{
    let @0: (); // return
    let @1: (); // anonymous local
    let @2: (); // anonymous local

    bb0: {
        storage_live(@1);
        @1 := div_and_modulo() -> bb1 (unwind: bb2);
    }

    bb1: {
        storage_dead(@1);
        nop;
        @0 := ();
        @0 := ();
        return;
    }

    bb2: {
        unwind_continue;
    }
}