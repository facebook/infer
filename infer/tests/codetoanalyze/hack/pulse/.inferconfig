{
  "scheduler": "callgraph",
  "pulse-only": true,
  "pulse-force-continue": true,
  "hack-models": [
    "models/test_models.sil",
    "models/test_models.hack"
  ],
  "pulse-taint-short-traces": true,
  "pulse-taint-sources": [
    { "procedure": "$root.Level1::taintSource" },
    { "procedure": "$root.Level1::unknownTaintSource" },
    { "class_names": ["OuterFile"], "method_names": ["taintSource"] },
    { "class_names": ["OuterFileSuper"], "method_names": ["superTaintSource"] },
    { "class_names": ["Level5Base"], "method_names": ["getSuperContext"] },
    {
      "procedure_regex": ".*",
      "taint_target": [
        "ArgumentsMatchingTypes",
        [
          "SensitiveClass"
        ]
      ]
    },
    { "class_names": ["IntraFile::KnownClass"], "method_names": ["genTaintSource"], "kinds": ["IntraFile"]},
    { "class_names": ["Sanitizers::Source"], "method_names": ["getTainted"], "kinds": ["Sanitizers"]},
    { "class_names": ["Propagators::Source"], "method_names": ["getTainted"], "kinds": ["Propagators"]},
    { "class_names": ["Exclusions::Source"], "method_names": ["get"], "kinds": ["Exclusions"]},
    { "class_names": ["Traces::Source"], "method_names": ["get"], "kinds": ["Traces"]}
  ],
  "pulse-taint-sinks": [
    { "procedure": "explicitSinkAllArgs" },
    { "procedure": "$root.Level1::taintSink" },
    { "class_names": ["OuterFile"], "method_names": ["taintSink"] },
    { "class_names": ["DaoQueries"], "method_names": ["query"] },
    { "class_name_regex": "IntraFile::Logger.*" },
    { "class_names": ["ArgIndexMatcher"],
      "method_names": ["sink1", "sink2"],
      "taint_target": ["ArgumentPositions", [1]]
    },
    { "procedure_regex": ".*", "kinds": ["BuiltinCatchAll"]},
    { "class_names": ["Shapes::ShapeLogger"], "method_names": ["logMixed"] },
    { "class_names": ["Sanitizers::Sink"], "procedure_regex": ".*", "kinds": ["Sanitizers"] },
    { "class_names": ["Propagators::Sink"], "procedure_regex": ".*", "kinds": ["Propagators"] },
    { "class_names": ["Exclusions::Sink"], "procedure_regex": ".*", "kinds": ["Exclusions"] }
  ],
  "pulse-taint-sanitizers": [
    { "class_names": ["Sanitizers::San"], "procedure_regex": ".*", "kinds": ["Sanitizers"] }
  ],
  "pulse-taint-propagators": [
    { "class_names": ["Propagators::Prop"], "procedure_regex": ".*" }
  ],
  "pulse-taint-policies": [
    {
      "short_description": "Taint flow where a sink is any procedure",
      "taint_flows": [{"source_kinds": ["IntraFile"], "sink_kinds": ["BuiltinCatchAll"]}]
    },
    {
      "short_description": "Taint flow with a sanitizer and specific sink",
      "taint_flows": [{"source_kinds": ["Sanitizers"], "sink_kinds": ["Sanitizers"], "sanitizer_kinds": ["Sanitizers"]}]
    },
    {
      "short_description": "Taint flow with a propagator and any method sink",
      "taint_flows": [{"source_kinds": ["Propagators"], "sink_kinds": ["BuiltinCatchAll"]}]
    },
    {
      "short_description": "Check that exclude_in works",
      "taint_flows": [
        { "source_kinds": ["Exclusions"], "sink_kinds": ["Exclusions"] }
      ],
      "exclude_in": ["exclusions"]
    },
    {
      "short_description": "Flow with catch-all sink and multiple traces",
      "taint_flows": [{"source_kinds": ["Traces"], "sink_kinds": ["BuiltinCatchAll"]}]
    }
  ]
}
