codetoanalyze/kotlin/pulse/BasicJavaKotlinBoundary.java, codetoanalyze.kotlin.pulse.BasicJavaKotlinBoundary.passNullWhenDisallowedBad1(codetoanalyze.kotlin.pulse.Kotlin):void, 2, NULL_ARGUMENT, no_bucket, ERROR, [is assigned to the null pointer,assigned,when calling `void Kotlin.doesNotAcceptNull(Object)` here,parameter `input` of void Kotlin.doesNotAcceptNull(Object),invalid access occurs here]
codetoanalyze/kotlin/pulse/BasicJavaKotlinBoundary.java, codetoanalyze.kotlin.pulse.BasicJavaKotlinBoundary.passNullWhenDisallowedBad2(codetoanalyze.kotlin.pulse.Kotlin):void, 3, NULL_ARGUMENT, no_bucket, ERROR, [is assigned to the null pointer,assigned,when calling `void Kotlin.paramsWithDifferentNullness(Object,Object)` here,parameter `input2` of void Kotlin.paramsWithDifferentNullness(Object,Object),invalid access occurs here]
codetoanalyze/kotlin/pulse/BasicJavaKotlinBoundary.java, codetoanalyze.kotlin.pulse.BasicJavaKotlinBoundary.passNullWhenDisallowedBad3(codetoanalyze.kotlin.pulse.Kotlin):void, 3, NULL_ARGUMENT, no_bucket, ERROR, [is assigned to the null pointer,assigned,when calling `void Kotlin.paramsWithDifferentNullness(Object,Object)` here,parameter `input2` of void Kotlin.paramsWithDifferentNullness(Object,Object),invalid access occurs here]
codetoanalyze/kotlin/pulse/BasicJavaKotlinBoundary.java, codetoanalyze.kotlin.pulse.BasicJavaKotlinBoundary.passNullWhenDisallowedInterprocBad1(codetoanalyze.kotlin.pulse.Kotlin):void, 2, NULL_ARGUMENT, no_bucket, ERROR, [in call to `Object BasicJavaKotlinBoundary.returnsNull()`,is assigned to the null pointer,returned,return from call to `Object BasicJavaKotlinBoundary.returnsNull()`,assigned,when calling `void Kotlin.doesNotAcceptNull(Object)` here,parameter `input` of void Kotlin.doesNotAcceptNull(Object),invalid access occurs here]
codetoanalyze/kotlin/pulse/BasicJavaKotlinBoundary.java, codetoanalyze.kotlin.pulse.BasicJavaKotlinBoundary.passNullWhenDisallowedInterprocBad2(codetoanalyze.kotlin.pulse.Kotlin):void, 3, NULL_ARGUMENT, no_bucket, ERROR, [in call to `Object BasicJavaKotlinBoundary.returnsNull()`,is assigned to the null pointer,returned,return from call to `Object BasicJavaKotlinBoundary.returnsNull()`,assigned,when calling `void Kotlin.paramsWithDifferentNullness(Object,Object)` here,parameter `input2` of void Kotlin.paramsWithDifferentNullness(Object,Object),invalid access occurs here]
codetoanalyze/kotlin/pulse/BasicJavaKotlinBoundary.java, codetoanalyze.kotlin.pulse.BasicJavaKotlinBoundary.passNullWhenDisallowedInterprocBad3(codetoanalyze.kotlin.pulse.Kotlin):void, 3, NULL_ARGUMENT, no_bucket, ERROR, [in call to `Object BasicJavaKotlinBoundary.returnsNull()`,is assigned to the null pointer,returned,return from call to `Object BasicJavaKotlinBoundary.returnsNull()`,assigned,when calling `void Kotlin.paramsWithDifferentNullness(Object,Object)` here,parameter `input2` of void Kotlin.paramsWithDifferentNullness(Object,Object),invalid access occurs here]
codetoanalyze/kotlin/pulse/Kotlin.kt, codetoanalyze.kotlin.pulse.Kotlin.passNullFromJavaWhenDisallowedBad():void, 2, NULL_ARGUMENT, no_bucket, ERROR, [in call to `Object BasicJavaKotlinBoundary.returnsNull()`,is assigned to the null pointer,returned,return from call to `Object BasicJavaKotlinBoundary.returnsNull()`,assigned,when calling `void Kotlin.doesNotAcceptNull(Object)` here,parameter `input` of void Kotlin.doesNotAcceptNull(Object),invalid access occurs here]
codetoanalyze/kotlin/pulse/taint/Annotations.kt, codetoanalyze.kotlin.pulse.Annotations.markedSourceToMarkedSinkBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `String Annotations.markedSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void Annotations.markedSink(String)` with kind `Simple`], source: String Annotations.markedSource(), sink: void Annotations.markedSink(String), tainted expression: String Annotations.markedSource()
codetoanalyze/kotlin/pulse/taint/Annotations.kt, codetoanalyze.kotlin.pulse.Annotations.markedSourceUsingUnmarkedSanitizerToMarkedSinkBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `String Annotations.markedSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void Annotations.markedSink(String)` with kind `Simple`], source: String Annotations.markedSource(), sink: void Annotations.markedSink(String), tainted expression: String Annotations.unmarkedSanitizer(String)
codetoanalyze/kotlin/pulse/taint/Annotations.kt, codetoanalyze.kotlin.pulse.Annotations.emailToSinkBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `String Annotations.email()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void Annotations.markedSink(String)` with kind `Simple`], source: String Annotations.email(), sink: void Annotations.markedSink(String), tainted expression: String Annotations.email()
codetoanalyze/kotlin/pulse/taint/Annotations.kt, codetoanalyze.kotlin.pulse.Annotations.locationToSinkBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `String Annotations.location()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void Annotations.markedSink(String)` with kind `Simple`], source: String Annotations.location(), sink: void Annotations.markedSink(String), tainted expression: String Annotations.location()
codetoanalyze/kotlin/pulse/taint/Arrays.kt, codetoanalyze.kotlin.pulse.Arrays.viaArrayBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: arr[_]
codetoanalyze/kotlin/pulse/taint/Arrays.kt, codetoanalyze.kotlin.pulse.Arrays.viaArrayThenFieldBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object Arrays$Obj.getF()
codetoanalyze/kotlin/pulse/taint/Arrays.kt, codetoanalyze.kotlin.pulse.Arrays.viaFieldThenArrayBad1(codetoanalyze.kotlin.pulse.Arrays$Obj):void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object[] Arrays$Obj.getArr()[_]
codetoanalyze/kotlin/pulse/taint/Arrays.kt, codetoanalyze.kotlin.pulse.Arrays.viaFieldThenArrayBad2():void, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object[] Arrays$Obj.getArr()[_]
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.directBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object InferTaint.inferSecretSource()
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.viaVarBad1():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.viaVarBad2():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.viaVarBad3():void, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: alias
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.viaCastBad1():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object InferTaint.inferSecretSource()
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.viaCastBad2():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.ifBad1(boolean):void, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.ifBad2(boolean):void, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.ifBad3(boolean):void, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.ifBad4(boolean,boolean):void, 9, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.ifBad5(boolean):void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.switchBad1(int):void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.switchBad2(int):void, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.whileBad1(int):void, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.whileBad2(int):void, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.noTripleReportBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.noTripleReportBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.arrayWithTaintedContentsBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: arr
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.funCallBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Basics.passToSinkOk(int,Object)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.javaSourceBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferJavaTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferJavaTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/Basics.kt, codetoanalyze.kotlin.pulse.Basics.javaSinkBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferJavaTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferJavaTaint.inferSensitiveSink(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/Constants.kt, codetoanalyze.kotlin.pulse.Constants.nonLiteralTaintedBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `void Constants.source(Object)` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: void Constants.source(Object), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: obj
codetoanalyze/kotlin/pulse/taint/DynamicDispatch.kt, codetoanalyze.kotlin.pulse.DynamicDispatch.propagateViaInterfaceBad(codetoanalyze.kotlin.pulse.DynamicDispatch$Interface):void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,in call to function `Object DynamicDispatch$Interface.propagate(Object)` with no summary,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: launderedSource
codetoanalyze/kotlin/pulse/taint/Exceptions.kt, codetoanalyze.kotlin.pulse.Exceptions.sinkInFinallyBad1():void, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: source
codetoanalyze/kotlin/pulse/taint/Exceptions.kt, codetoanalyze.kotlin.pulse.Exceptions.sinkInFinallyBad2():void, 6, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: source
codetoanalyze/kotlin/pulse/taint/Exceptions.kt, codetoanalyze.kotlin.pulse.Exceptions.callSinkThenThrowBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Exceptions.callSinkThenThrow(Object)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object InferTaint.inferSecretSource()
codetoanalyze/kotlin/pulse/taint/Fields.kt, codetoanalyze.kotlin.pulse.Fields.instanceFieldBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: this->mFld
codetoanalyze/kotlin/pulse/taint/Fields.kt, codetoanalyze.kotlin.pulse.Fields.staticFieldBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: #GB<>$codetoanalyze.kotlin.pulse.Fields.sFld
codetoanalyze/kotlin/pulse/taint/Fields.kt, codetoanalyze.kotlin.pulse.Fields.viaFieldBad1(codetoanalyze.kotlin.pulse.Fields$Obj):void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object Fields$Obj.getF()
codetoanalyze/kotlin/pulse/taint/Fields.kt, codetoanalyze.kotlin.pulse.Fields.viaFieldBad2():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object Fields$Obj.getF()
codetoanalyze/kotlin/pulse/taint/Fields.kt, codetoanalyze.kotlin.pulse.Fields.viaFieldBad3():void, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/Fields.kt, codetoanalyze.kotlin.pulse.Fields.viaNestedFieldBad1(codetoanalyze.kotlin.pulse.Fields$Obj):void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object Fields$Obj.getF()
codetoanalyze/kotlin/pulse/taint/Fields.kt, codetoanalyze.kotlin.pulse.Fields.viaNestedFieldBad2():void, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object Fields$Obj.getF()
codetoanalyze/kotlin/pulse/taint/Fields.kt, codetoanalyze.kotlin.pulse.Fields.aliasBad1():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object Fields$Obj.getF()
codetoanalyze/kotlin/pulse/taint/Fields.kt, codetoanalyze.kotlin.pulse.Fields.aliasBad2(codetoanalyze.kotlin.pulse.Fields$Obj):void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object Fields$Obj.getF()
codetoanalyze/kotlin/pulse/taint/Fields.kt, codetoanalyze.kotlin.pulse.Fields.loopFieldTwoIterationsBad(codetoanalyze.kotlin.pulse.Fields$Obj,int):void, 8, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object Fields$Obj.getF()
codetoanalyze/kotlin/pulse/taint/Fields.kt, codetoanalyze.kotlin.pulse.Fields.fieldAsSourceBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: the field `sourceField` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: sourceField, sink: void InferTaint.inferSensitiveSink(Object), tainted expression: #GB<>$codetoanalyze.kotlin.pulse.Fields.sourceField
codetoanalyze/kotlin/pulse/taint/Fields.kt, codetoanalyze.kotlin.pulse.Fields.fieldAsSinkBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: is stored in the field `sinkField` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: sinkField, tainted expression: source
codetoanalyze/kotlin/pulse/taint/FlowSensitivity.kt, codetoanalyze.kotlin.pulse.FlowSensitivity.interproceduralFlowSensitivityBad(codetoanalyze.kotlin.pulse.FlowSensitivity$Obj):void, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `void FlowSensitivity.returnSource(FlowSensitivity$Obj)`,source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,return from call to `void FlowSensitivity.returnSource(FlowSensitivity$Obj)`,when calling `void FlowSensitivity.callSink(FlowSensitivity$Obj)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: o->f
codetoanalyze/kotlin/pulse/taint/FlowSensitivity.kt, codetoanalyze.kotlin.pulse.FlowSensitivity.callSourceAndSinkBad1(codetoanalyze.kotlin.pulse.FlowSensitivity$Obj):void, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `void FlowSensitivity.sourceAndSink(FlowSensitivity$Obj)`,source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,return from call to `void FlowSensitivity.sourceAndSink(FlowSensitivity$Obj)`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object FlowSensitivity$Obj.getF()
codetoanalyze/kotlin/pulse/taint/FlowSensitivity.kt, codetoanalyze.kotlin.pulse.FlowSensitivity.callSourceAndSinkBad2(codetoanalyze.kotlin.pulse.FlowSensitivity$Obj):void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void FlowSensitivity.sourceAndSink(FlowSensitivity$Obj)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: o->f
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural.returnSourceViaGlobalBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `void Interprocedural$Companion.returnSourceViaGlobal()`,source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,return from call to `void Interprocedural$Companion.returnSourceViaGlobal()`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: #GB<>$codetoanalyze.kotlin.pulse.Interprocedural.global
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural.callSinkOnFieldDirectBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Interprocedural.callSinkOnFieldDirect()` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: this->f
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural.callSinkOnLocalBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Interprocedural.callSinkOnLocal()` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: this->f
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural.callSinkNoTripleReportBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Interprocedural$Companion.callSinkParam1(Object,Object)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: source
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural.callSinkNoTripleReportBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Interprocedural$Companion.callSinkParam2(Object,Object)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: source
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural.callDeepSinkIndirectBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Interprocedural.callSinkIndirectOnParam(Object)` here,when calling `void Interprocedural.callSinkOnParam(Object)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: source
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural.callDeepSink2Bad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Interprocedural.callSinkB(Interprocedural$Obj)` here,when calling `void Interprocedural.callSink2(Interprocedural$Obj)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: source->f
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural.callShallowSinkBad(codetoanalyze.kotlin.pulse.Interprocedural$Obj):void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object Interprocedural$Obj.getF()
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural.callDeepSink3Bad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Interprocedural.callSinkC(Interprocedural$Obj)` here,when calling `void Interprocedural.callSink3(Interprocedural$Obj)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: source->f
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural.callDeepSink4Bad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Interprocedural.callSinkD(Interprocedural$Obj)` here,when calling `void Interprocedural.callSink4(Interprocedural$Obj)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: source->f
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.returnSourceDirectBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [in call to `Object Interprocedural$Companion.returnSourceDirect()`,source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,return from call to `Object Interprocedural$Companion.returnSourceDirect()`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object Interprocedural$Companion.returnSourceDirect()
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.returnSourceDirectViaVarBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `Object Interprocedural$Companion.returnSourceDirect()`,source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,return from call to `Object Interprocedural$Companion.returnSourceDirect()`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: source
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.returnSourceIndirectBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [in call to `Object Interprocedural$Companion.returnSourceIndirect()`,in call to `Object Interprocedural$Companion.returnSourceDirect()`,source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,return from call to `Object Interprocedural$Companion.returnSourceDirect()`,return from call to `Object Interprocedural$Companion.returnSourceIndirect()`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object Interprocedural$Companion.returnSourceIndirect()
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.returnSourceViaFieldBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [in call to `Interprocedural$Obj Interprocedural$Companion.returnSourceViaField()`,source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,return from call to `Interprocedural$Obj Interprocedural$Companion.returnSourceViaField()`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object Interprocedural$Obj.getF()
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.returnSourceViaParameter1Bad(codetoanalyze.kotlin.pulse.Interprocedural$Obj):void, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `void Interprocedural$Companion.returnSourceViaParameter1(Interprocedural$Obj)`,source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,return from call to `void Interprocedural$Companion.returnSourceViaParameter1(Interprocedural$Obj)`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object Interprocedural$Obj.getF()
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.returnSourceViaParameter2Bad(codetoanalyze.kotlin.pulse.Interprocedural$Obj,codetoanalyze.kotlin.pulse.Interprocedural$Obj):void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object Interprocedural$Obj.getF()
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.callSinkParam1Bad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Interprocedural$Companion.callSinkParam1(Object,Object)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object InferTaint.inferSecretSource()
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.callSinkParam2Bad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Interprocedural$Companion.callSinkParam2(Object,Object)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object InferTaint.inferSecretSource()
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.callSinkOnFieldIndirectBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Interprocedural$Companion.callSinkOnFieldIndirect(Interprocedural$Obj)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: obj->f
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.callSinkOnGlobalBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Interprocedural$Companion.callSinkOnGlobal()` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: #GB<>$codetoanalyze.kotlin.pulse.Interprocedural.global
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.setGlobalThenCallSinkBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Interprocedural$Companion.callSinkOnGlobal()` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: #GB<>$codetoanalyze.kotlin.pulse.Interprocedural.global
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.getGlobalThenCallSinkBad():kotlin.Unit, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `Unit Interprocedural$Companion.getGlobalThenCallSink()` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: #GB<>$codetoanalyze.kotlin.pulse.Interprocedural.global
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.singlePassthroughBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: launderedSource
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.doublePassthroughBad():void, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: launderedSource2
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.irrelevantPassthroughsIntraprocedural(java.lang.Object):java.lang.Object, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: relevant
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.irrelevantPassthroughsSourceInterprocedural(java.lang.Object):java.lang.Object, 4, TAINT_ERROR, no_bucket, ERROR, [in call to `Object Interprocedural$Companion.returnSourceIrrelevantPassthrough(Object)`,source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,return from call to `Object Interprocedural$Companion.returnSourceIrrelevantPassthrough(Object)`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: relevant
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.irrelevantPassthroughsSinkInterprocedural(java.lang.Object):java.lang.Object, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `Object Interprocedural$Companion.callSinkIrrelevantPassthrough(Object)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object Interprocedural$Companion.callSinkIrrelevantPassthrough(Object)
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.irrelevantPassthroughsSourceAndSinkInterprocedural(java.lang.Object):java.lang.Object, 4, TAINT_ERROR, no_bucket, ERROR, [in call to `Object Interprocedural$Companion.returnSourceIrrelevantPassthrough(Object)`,source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,return from call to `Object Interprocedural$Companion.returnSourceIrrelevantPassthrough(Object)`,when calling `Object Interprocedural$Companion.callSinkIrrelevantPassthrough(Object)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object Interprocedural$Companion.callSinkIrrelevantPassthrough(Object)
codetoanalyze/kotlin/pulse/taint/Interprocedural.kt, codetoanalyze.kotlin.pulse.Interprocedural$Companion.callSinkVariadicBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Interprocedural$Companion.callSinkVariadic(Object[])` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: UNKNOWN
codetoanalyze/kotlin/pulse/taint/Lambdas.kt, codetoanalyze.kotlin.pulse.Lambdas.createAndInvokeFunctionBad():java.lang.String, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `Function Lambdas.createFunctionWithTaintedParam()`,source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,return from call to `Function Lambdas.createFunctionWithTaintedParam()`,when calling `String Lambdas.invokeFunction(Function)` here,when calling `Object Lambdas$Lambda$_8_8.apply(Object)` here,when calling `String Lambdas.access_codetoanalyze.kotlin.pulse.Lambdas$Lambda$_8_8(Object,int)` here,when calling `String Lambdas.createFunctionWithTaintedParam$lambda$0(Object,int)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: function->arg1
codetoanalyze/kotlin/pulse/taint/Lambdas.kt, codetoanalyze.kotlin.pulse.Lambdas.createAndInvokeFunctionBad2():java.lang.String, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `Function Lambdas.createFunctionWithTaintedParam()`,source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,return from call to `Function Lambdas.createFunctionWithTaintedParam()`,when calling `Object Lambdas$Lambda$_8_8.apply(Object)` here,when calling `String Lambdas.access_codetoanalyze.kotlin.pulse.Lambdas$Lambda$_8_8(Object,int)` here,when calling `String Lambdas.createFunctionWithTaintedParam$lambda$0(Object,int)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: function->arg1
codetoanalyze/kotlin/pulse/taint/Lambdas.kt, codetoanalyze.kotlin.pulse.Lambdas.createAndInvokeFunctionFromAnonymousClassBad():java.lang.String, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `Function Lambdas.createFunctionFromAnonymousClassWithTaintedParam()`,source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,return from call to `Function Lambdas.createFunctionFromAnonymousClassWithTaintedParam()`,when calling `String Lambdas.invokeFunction(Function)` here,when calling `Object Lambdas$Lambda$_6_8.apply(Object)` here,when calling `String Lambdas.access_codetoanalyze.kotlin.pulse.Lambdas$Lambda$_6_8(Object,Integer)` here,when calling `String Lambdas.createFunctionFromAnonymousClassWithTaintedParam$lambda$1(Object,Integer)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: function->arg1
codetoanalyze/kotlin/pulse/taint/Lambdas.kt, codetoanalyze.kotlin.pulse.Lambdas.createAndInvokeFunctionFromAnonymousClassBad2():java.lang.String, 2, TAINT_ERROR, no_bucket, ERROR, [in call to `Function Lambdas.createFunctionFromAnonymousClassWithTaintedParam()`,source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,return from call to `Function Lambdas.createFunctionFromAnonymousClassWithTaintedParam()`,when calling `Object Lambdas$Lambda$_6_8.apply(Object)` here,when calling `String Lambdas.access_codetoanalyze.kotlin.pulse.Lambdas$Lambda$_6_8(Object,Integer)` here,when calling `String Lambdas.createFunctionFromAnonymousClassWithTaintedParam$lambda$1(Object,Integer)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: function->arg1
codetoanalyze/kotlin/pulse/taint/Recursion.kt, codetoanalyze.kotlin.pulse.Recursion.callSinkThenDivergeBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Recursion.callSinkThenDiverge(Object)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object InferTaint.inferSecretSource()
codetoanalyze/kotlin/pulse/taint/Recursion.kt, codetoanalyze.kotlin.pulse.Recursion.safeRecursionCallSinkBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Recursion.safeRecursionCallSink(int,Object)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object InferTaint.inferSecretSource()
codetoanalyze/kotlin/pulse/taint/Streams.kt, codetoanalyze.kotlin.pulse.Streams.copyBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,in call to function `String InputStream.toString()` with no summary,in call to function `byte[] String.getBytes(Charset)` with no summary,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: byte[] Streams.read(byte[])
codetoanalyze/kotlin/pulse/taint/Strings.kt, codetoanalyze.kotlin.pulse.Strings.viaStringBuilderSugarBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,in call to function `StringBuilder StringBuilder.append(Object)` with no summary,in call to function `String StringBuilder.toString()` with no summary,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: String StringBuilder.toString()
codetoanalyze/kotlin/pulse/taint/Strings.kt, codetoanalyze.kotlin.pulse.Strings.viaStringBuilderBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,in call to function `StringBuilder StringBuilder.append(Object)` with no summary,in call to function `String StringBuilder.toString()` with no summary,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: String StringBuilder.toString()
codetoanalyze/kotlin/pulse/taint/Strings.kt, codetoanalyze.kotlin.pulse.Strings.viaStringBuilderIgnoreReturnBad():void, 5, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,in call to function `StringBuilder StringBuilder.append(Object)` with no summary,in call to function `String StringBuilder.toString()` with no summary,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: String StringBuilder.toString()
codetoanalyze/kotlin/pulse/taint/Strings.kt, codetoanalyze.kotlin.pulse.Strings.viaStringBufferBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,in call to function `StringBuffer StringBuffer.append(Object)` with no summary,in call to function `String StringBuffer.toString()` with no summary,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: String StringBuffer.toString()
codetoanalyze/kotlin/pulse/taint/Strings.kt, codetoanalyze.kotlin.pulse.Strings.viaStringBufferIgnoreReturnBad():void, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,in call to function `StringBuffer StringBuffer.append(Object)` with no summary,in call to function `String StringBuffer.toString()` with no summary,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: String StringBuffer.toString()
codetoanalyze/kotlin/pulse/taint/Strings.kt, codetoanalyze.kotlin.pulse.Strings.viaFormatterBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: String Formatter.toString()
codetoanalyze/kotlin/pulse/taint/Strings.kt, codetoanalyze.kotlin.pulse.Strings.viaFormatterIgnoreReturnBad():void, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: String Formatter.toString()
codetoanalyze/kotlin/pulse/taint/Strings.kt, codetoanalyze.kotlin.pulse.Strings.viaStringFormatVarArgsDirectBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: tainted
codetoanalyze/kotlin/pulse/taint/Strings.kt, codetoanalyze.kotlin.pulse.Strings.viaStringFormatVarArgsIndirectBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void Strings.viaStringFormatVarArgsIndirect(Object)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object InferTaint.inferSecretSource()
codetoanalyze/kotlin/pulse/taint/TaintMatchers.kt, codetoanalyze.kotlin.pulse.TaintMatchers.taintedBasedOnClassNameRegexBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaintSinks.sink1(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaintSinks.sink1(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/TaintMatchers.kt, codetoanalyze.kotlin.pulse.TaintMatchers.taintedBasedOnClassNameRegexBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaintSinks.sink2(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaintSinks.sink2(Object), tainted expression: src
codetoanalyze/kotlin/pulse/taint/TaintMatchers.kt, codetoanalyze.kotlin.pulse.TaintMatchers.taintedFromInferBaseSourceBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `String InferBaseSource.inferBaseSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: String InferBaseSource.inferBaseSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: source
codetoanalyze/kotlin/pulse/taint/TaintMatchers.kt, codetoanalyze.kotlin.pulse.TaintMatchers.taintedFromInferChildSourceBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `String InferChildSource.inferChildSecretSource()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: String InferChildSource.inferChildSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: source
codetoanalyze/kotlin/pulse/taint/TaintedFormals.kt, codetoanalyze.kotlin.pulse.TaintedFormals.firstParameterTainted(java.lang.Object,java.lang.Object):void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `void TaintedFormals.firstParameterTainted(Object,Object)` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: void TaintedFormals.firstParameterTainted(Object,Object), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: tainted
codetoanalyze/kotlin/pulse/taint/TaintedFormals.kt, codetoanalyze.kotlin.pulse.TaintedFormals$callbackAnonymousClassTaintedBad$1.onCompletion(java.lang.Object):void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `void TaintedFormals$callbackAnonymousClassTaintedBad$1.onCompletion(Object)` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: void TaintedFormals$callbackAnonymousClassTaintedBad$1.onCompletion(Object), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: result
codetoanalyze/kotlin/pulse/taint/TaintedFormals.kt, codetoanalyze.kotlin.pulse.TaintedFormals$Lambda$_4_3.onCompletion(java.lang.Object):void, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `void TaintedFormals$Lambda$_4_3.onCompletion(Object)` with kind `Simple`,when calling `void TaintedFormals.access_codetoanalyze.kotlin.pulse.TaintedFormals$Lambda$_4_3(Object)` here,when calling `void TaintedFormals.callbackLambdaTaintedBad$lambda$0(Object)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: void TaintedFormals$Lambda$_4_3.onCompletion(Object), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: UNKNOWN
codetoanalyze/kotlin/pulse/taint/TaintedFormals.kt, codetoanalyze.kotlin.pulse.TaintedFormals.<init>(java.lang.Object), 28, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `TaintedFormals.<init>(Object)` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: TaintedFormals.<init>(Object), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: tainted
codetoanalyze/kotlin/pulse/taint/TaintedFormals.kt, codetoanalyze.kotlin.pulse.TaintedFormals.instanceFirstParameterTainted(java.lang.Object):void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value passed as argument `#0` to `void TaintedFormals.instanceFirstParameterTainted(Object)` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: void TaintedFormals.instanceFirstParameterTainted(Object), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: tainted
codetoanalyze/kotlin/pulse/taint/TaintedThis.kt, codetoanalyze.kotlin.pulse.TaintedThis.taintThisBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: this/self reference `void TaintedThis.taintThisBad()` with kind `Simple`,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: void TaintedThis.taintThisBad(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: this->field
codetoanalyze/kotlin/pulse/taint/UnknownCode.kt, codetoanalyze.kotlin.pulse.UnknownCode.propagateEmptyBad():void, 6, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,in call to function `StringBuffer StringBuffer.append(String)` with no summary,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: *buffer
codetoanalyze/kotlin/pulse/taint/UnknownCode.kt, codetoanalyze.kotlin.pulse.UnknownCode.propagateEmptyBad():void, 7, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,in call to function `StringBuffer StringBuffer.append(String)` with no summary,in call to function `StringBuffer StringBuffer.append(String)` with no summary,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: alias
codetoanalyze/kotlin/pulse/taint/UnknownCode.kt, codetoanalyze.kotlin.pulse.UnknownCode.callPropagateFootprintBad():void, 1, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void UnknownCode.propagateFootprint(String)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: Object InferTaint.inferSecretSource()
codetoanalyze/kotlin/pulse/taint/UnknownCode.kt, codetoanalyze.kotlin.pulse.UnknownCode.callPropagateThenPropagateFootprintBad():void, 2, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,when calling `void UnknownCode.propagateFootprint(String)` here,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: String UnknownCode.propagateTaint(String)
codetoanalyze/kotlin/pulse/taint/UnknownCode.kt, codetoanalyze.kotlin.pulse.UnknownCode.propagateViaUnknownNativeCodeBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,in call to function `Object UnknownCode$Companion.nativeMethod(Object)` with no summary,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: launderedSource
codetoanalyze/kotlin/pulse/taint/UnknownCode.kt, codetoanalyze.kotlin.pulse.UnknownCode$Companion.propagateViaUnknownConstructorBad():void, 4, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,in call to function `String.<init>(String)` with no summary,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: unknownConstructor
codetoanalyze/kotlin/pulse/taint/UnknownCode.kt, codetoanalyze.kotlin.pulse.UnknownCode$Companion.propagateViaInterfaceCodeBad(codetoanalyze.kotlin.pulse.UnknownCode$Interface):void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,in call to function `Object UnknownCode$Interface.interfaceMethod(Object)` with no summary,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: launderedSource
codetoanalyze/kotlin/pulse/taint/UnknownCode.kt, codetoanalyze.kotlin.pulse.UnknownCode$Companion.propagateViaUnknownAbstractCodeBad():void, 3, TAINT_ERROR, no_bucket, ERROR, [source of the taint here: value returned from `Object InferTaint.inferSecretSource()` with kind `Simple`,in call to function `Object UnknownCode$Companion.nativeMethod(Object)` with no summary,flows to this sink: value passed as argument `#0` to `void InferTaint.inferSensitiveSink(Object)` with kind `Simple`], source: Object InferTaint.inferSecretSource(), sink: void InferTaint.inferSensitiveSink(Object), tainted expression: launderedSource
