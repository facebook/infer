/* @generated */
digraph iCFG {
26 [label="26:  BinaryOperatorStmt: AddAssign \n   n$16=*&p:struct s * [line 15]\n  n$17=*n$16.x:int  [line 15]\n  *n$16.x:int =(n$17 + 1) [line 15]\n " shape="box"]
	

	 26 -> 21 ;
	 26 -> 22 ;
25 [label="25:  BinaryOperatorStmt: AddAssign \n   n$14=*&0$?%__sil_tmpSIL_temp_conditional___n$11:struct s * [line 16]\n  n$15=*n$14.x:int  [line 16]\n  *n$14.x:int =(n$15 + 1) [line 16]\n " shape="box"]
	

	 25 -> 15 ;
	 25 -> 16 ;
24 [label="24:  ConditinalStmt Branch \n   n$13=*&p:struct s * [line 16]\n  *&0$?%__sil_tmpSIL_temp_conditional___n$11:struct s *=n$13 [line 16]\n " shape="box"]
	

	 24 -> 20 ;
23 [label="23:  ConditinalStmt Branch \n   n$12=*&p:struct s * [line 16]\n  *&0$?%__sil_tmpSIL_temp_conditional___n$11:struct s *=n$12 [line 16]\n " shape="box"]
	

	 23 -> 20 ;
22 [label="22: Prune (false branch) \n   PRUNE((1 == 0), false); [line 16]\n " shape="invhouse"]
	

	 22 -> 24 ;
21 [label="21: Prune (true branch) \n   PRUNE((1 != 0), true); [line 16]\n " shape="invhouse"]
	

	 21 -> 23 ;
20 [label="20: + \n  " ]
	

	 20 -> 25 ;
19 [label="19:  BinaryOperatorStmt: AddAssign \n   n$7=*&p:struct s * [line 17]\n  n$9=*&0$?%__sil_tmpSIL_temp_conditional___n$8:int  [line 17]\n  n$10=*n$7.x:int  [line 17]\n  *n$7.x:int =(n$10 + n$9) [line 17]\n " shape="box"]
	

	 19 -> 4 ;
	 19 -> 5 ;
18 [label="18:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$8:int =7 [line 17]\n " shape="box"]
	

	 18 -> 14 ;
17 [label="17:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$8:int =3 [line 17]\n " shape="box"]
	

	 17 -> 14 ;
16 [label="16: Prune (false branch) \n   PRUNE((1 == 0), false); [line 17]\n " shape="invhouse"]
	

	 16 -> 18 ;
15 [label="15: Prune (true branch) \n   PRUNE((1 != 0), true); [line 17]\n " shape="invhouse"]
	

	 15 -> 17 ;
14 [label="14: + \n  " ]
	

	 14 -> 19 ;
13 [label="13:  BinaryOperatorStmt: AddAssign \n   n$3=*&0$?%__sil_tmpSIL_temp_conditional___n$0:struct s * [line 18]\n  n$5=*&0$?%__sil_tmpSIL_temp_conditional___n$4:int  [line 18]\n  n$6=*n$3.x:int  [line 18]\n  *n$3.x:int =(n$6 + n$5) [line 18]\n " shape="box"]
	

	 13 -> 2 ;
12 [label="12:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$4:int =7 [line 18]\n " shape="box"]
	

	 12 -> 8 ;
11 [label="11:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$4:int =3 [line 18]\n " shape="box"]
	

	 11 -> 8 ;
10 [label="10: Prune (false branch) \n   PRUNE((1 == 0), false); [line 18]\n " shape="invhouse"]
	

	 10 -> 12 ;
9 [label="9: Prune (true branch) \n   PRUNE((1 != 0), true); [line 18]\n " shape="invhouse"]
	

	 9 -> 11 ;
8 [label="8: + \n  " ]
	

	 8 -> 13 ;
7 [label="7:  ConditinalStmt Branch \n   n$2=*&p:struct s * [line 18]\n  *&0$?%__sil_tmpSIL_temp_conditional___n$0:struct s *=n$2 [line 18]\n " shape="box"]
	

	 7 -> 3 ;
6 [label="6:  ConditinalStmt Branch \n   n$1=*&p:struct s * [line 18]\n  *&0$?%__sil_tmpSIL_temp_conditional___n$0:struct s *=n$1 [line 18]\n " shape="box"]
	

	 6 -> 3 ;
5 [label="5: Prune (false branch) \n   PRUNE((1 == 0), false); [line 18]\n " shape="invhouse"]
	

	 5 -> 7 ;
4 [label="4: Prune (true branch) \n   PRUNE((1 != 0), true); [line 18]\n " shape="invhouse"]
	

	 4 -> 6 ;
3 [label="3: + \n  " ]
	

	 3 -> 9 ;
	 3 -> 10 ;
2 [label="2: Exit preincrement \n  " color=yellow style=filled]
	

1 [label="1: Start preincrement\nFormals:  p:struct s *\nLocals:  0$?%__sil_tmpSIL_temp_conditional___n$0:struct s * 0$?%__sil_tmpSIL_temp_conditional___n$4:int  0$?%__sil_tmpSIL_temp_conditional___n$8:int  0$?%__sil_tmpSIL_temp_conditional___n$11:struct s * \n   DECLARE_LOCALS(&return,&0$?%__sil_tmpSIL_temp_conditional___n$0,&0$?%__sil_tmpSIL_temp_conditional___n$4,&0$?%__sil_tmpSIL_temp_conditional___n$8,&0$?%__sil_tmpSIL_temp_conditional___n$11); [line 14]\n " color=yellow style=filled]
	

	 1 -> 26 ;
}
