codetoanalyze/objc/pulse-data-lineage/DataFlowToSink.m, DataFlowToSink.test_simple, 2, DATA_FLOW_TO_SINK, no_bucket, ADVICE, [in call to `DataFlowToSink.create_then_mutate`,in call to `DataFlowToSink.create_taint`,in call to `DataFlowToSink.might_be_a_source`,allocated by call to `alloc` (modelled),source of the taint here: allocation of type `NSObject` by `alloc` with kind `InitSource` (data flow only),return from call to `DataFlowToSink.might_be_a_source`,return from call to `DataFlowToSink.create_taint`,return from call to `DataFlowToSink.create_then_mutate`,when calling `DataFlowToSink.mutate_then_consume:` here,when calling `DataFlowToSink.consume:` here,flows to this sink: value passed as argument `#0` to `DataFlowToSink.__infer_taint_sink:` with kind `SimpleSink`], , sink: DataFlowToSink.__infer_taint_sink:, tainted expression: start
codetoanalyze/objc/pulse-data-lineage/DataFlowToSink.m, DataFlowToSink.test_simple_inheritance, 2, DATA_FLOW_TO_SINK, no_bucket, ADVICE, [allocated by call to `alloc` (modelled),source of the taint here: allocation of type `NSObject` by `alloc` with kind `InitSource` (data flow only),when calling `DataFlowToSink.consume:` here,flows to this sink: value passed as argument `#0` to `DataFlowToSink.__infer_taint_sink:` with kind `SimpleSink`], , sink: DataFlowToSink.__infer_taint_sink:, tainted expression: start
codetoanalyze/objc/pulse-data-lineage/SensitiveDataFlow.m, SensitiveDataFlow.create_then_mutate, 2, SENSITIVE_DATA_FLOW, no_bucket, ADVICE, [in call to `SensitiveDataFlow.create_taint`,source of the taint here: value returned from `SensitiveDataFlow.__infer_taint_source` with kind `SimpleSource`,return from call to `SensitiveDataFlow.create_taint`,flows to this sink: value passed as argument `#0` to `SensitiveDataFlow.mutate:` with kind `SensitiveSink` (data flow only)], source: SensitiveDataFlow.__infer_taint_source, tainted expression: SensitiveDataFlow.mutate:
codetoanalyze/objc/pulse-data-lineage/SensitiveDataFlow.m, SensitiveDataFlow.test, 2, SENSITIVE_DATA_FLOW, no_bucket, ADVICE, [in call to `SensitiveDataFlow.create_then_mutate`,in call to `SensitiveDataFlow.create_taint`,source of the taint here: value returned from `SensitiveDataFlow.__infer_taint_source` with kind `SimpleSource`,return from call to `SensitiveDataFlow.create_taint`,return from call to `SensitiveDataFlow.create_then_mutate`,when calling `SensitiveDataFlow.mutate_then_consume:` here,flows to this sink: value passed as argument `#0` to `SensitiveDataFlow.consume:` with kind `SensitiveSink` (data flow only)], source: SensitiveDataFlow.__infer_taint_source, tainted expression: start
codetoanalyze/objc/pulse-data-lineage/SensitiveDataFlow.m, SensitiveDataFlow.test_flow_to_unknown, 2, SENSITIVE_DATA_FLOW, no_bucket, ADVICE, [source of the taint here: value returned from `SensitiveDataFlow.__infer_taint_source` with kind `SimpleSource`,flows to this sink: value passed as argument `#0` to `unknown` with kind `SensitiveSink` (data flow only)], source: SensitiveDataFlow.__infer_taint_source, tainted expression: obj
codetoanalyze/objc/pulse-data-lineage/SensitiveDataFlow.m, SensitiveDataFlow.test_taint_propagation, 2, SENSITIVE_DATA_FLOW, no_bucket, ADVICE, [source of the taint here: value returned from `SensitiveDataFlow.__infer_taint_source` with kind `SimpleSource`,when calling `SensitiveDataFlow.propagate_taint:` here,flows to this sink: value passed as argument `#0` to `unknown` with kind `SensitiveSink` (data flow only)], source: SensitiveDataFlow.__infer_taint_source, tainted expression: obj
codetoanalyze/objc/pulse-data-lineage/SensitiveDataFlow.m, SensitiveDataFlow.test_ignored_calls, 2, SENSITIVE_DATA_FLOW, no_bucket, ADVICE, [source of the taint here: value returned from `TaintedObject.__infer_taint_source` with kind `SimpleSource`,flows to this sink: value passed as argument `#0` to `SensitiveDataFlow.might_be_a_sink:` with kind `SensitiveSink` (data flow only)], source: TaintedObject.__infer_taint_source, tainted expression: tainted
codetoanalyze/objc/pulse-data-lineage/basics.m, callSinkDirectBad, 2, DATA_FLOW_TO_SINK, no_bucket, ADVICE, [in call to `InferTaint.source`,allocated by call to `alloc` (modelled),source of the taint here: allocation of type `NSObject` by `alloc` with kind `InitSource` (data flow only),return from call to `InferTaint.source`,flows to this sink: value passed as argument `#0` to `InferTaint.sink:` with kind `SimpleSink`], , sink: InferTaint.sink:, tainted expression: source
codetoanalyze/objc/pulse-data-lineage/basics.m, callSinkDirectBad, 2, SENSITIVE_DATA_FLOW, no_bucket, ADVICE, [source of the taint here: value returned from `InferTaint.source` with kind `SimpleSource`,flows to this sink: value passed as argument `#0` to `InferTaint.sink:` with kind `SensitiveSink` (data flow only)], source: InferTaint.source, tainted expression: source
codetoanalyze/objc/pulse-data-lineage/basics.m, callSinkOnNonSourceBad, 2, DATA_FLOW_TO_SINK, no_bucket, ADVICE, [allocated by call to `alloc` (modelled),source of the taint here: allocation of type `NSObject` by `alloc` with kind `InitSource` (data flow only),flows to this sink: value passed as argument `#0` to `InferTaint.sink:` with kind `SimpleSink`], , sink: InferTaint.sink:, tainted expression: source
codetoanalyze/objc/pulse-data-lineage/basics.m, callNonSinkOnSourceBad, 2, SENSITIVE_DATA_FLOW, no_bucket, ADVICE, [source of the taint here: value returned from `InferTaint.source` with kind `SimpleSource`,flows to this sink: value passed as argument `#0` to `InferTaint.notASink:` with kind `SensitiveSink` (data flow only)], source: InferTaint.source, tainted expression: source
codetoanalyze/objc/pulse-data-lineage/basics.m, taintSourceParameterBad, 0, SENSITIVE_DATA_FLOW, no_bucket, ADVICE, [source of the taint here: value passed as argument `#0` to `taintSourceParameterBad` with kind `SimpleSource`,flows to this sink: value passed as argument `#0` to `InferTaint.sink:` with kind `SensitiveSink` (data flow only)], source: taintSourceParameterBad, tainted expression: source
codetoanalyze/objc/pulse-data-lineage/basics.m, objc_block_basics.m:51, 1, SENSITIVE_DATA_FLOW, no_bucket, ADVICE, [source of the taint here: value passed as argument `#0` to a block passed to `InferTaint.call_block:` with kind `SimpleSource`,flows to this sink: value passed as argument `#0` to `InferTaint.sink:` with kind `SensitiveSink` (data flow only)], source: a block passed to InferTaint.call_block:, tainted expression: source
