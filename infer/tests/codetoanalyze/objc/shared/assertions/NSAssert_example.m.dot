/* @generated */
digraph iCFG {
105 [label="105:  DeclStmt \n   n$23=_fun_NSString_stringWithUTF8String:(\"\":char *) [line 36]\n  _fun___objc_retain(n$23:class NSString *) [line 36]\n  *&__assert_fn__:class NSString *=n$23 [line 36]\n " shape="box"]
	

	 105 -> 100 ;
	 105 -> 101 ;
104 [label="104:  BinaryOperatorStmt: Assign \n   n$21=*&0$?%__sil_tmpSIL_temp_conditional___n$17:class NSString * [line 36]\n  _fun___objc_retain(n$21:class NSString *) [line 36]\n  n$22=*&__assert_fn__:class NSString * [line 36]\n  *&__assert_fn__:class NSString *=n$21 [line 36]\n  _fun___objc_release(n$22:class NSString *) [line 36]\n " shape="box"]
	

	 104 -> 98 ;
103 [label="103:  ConditinalStmt Branch \n   n$20=_fun_NSString_stringWithUTF8String:(\"<Unknown Function>\":char *) [line 36]\n  *&0$?%__sil_tmpSIL_temp_conditional___n$17:class NSString *=n$20 [line 36]\n " shape="box"]
	

	 103 -> 99 ;
102 [label="102:  ConditinalStmt Branch \n   n$19=*&__assert_fn__:class NSString * [line 36]\n  *&0$?%__sil_tmpSIL_temp_conditional___n$17:class NSString *=n$19 [line 36]\n " shape="box"]
	

	 102 -> 99 ;
101 [label="101: Prune (false branch) \n   n$18=*&__assert_fn__:class NSString * [line 36]\n  PRUNE((n$18 == 0), false); [line 36]\n " shape="invhouse"]
	

	 101 -> 103 ;
100 [label="100: Prune (true branch) \n   n$18=*&__assert_fn__:class NSString * [line 36]\n  PRUNE((n$18 != 0), true); [line 36]\n " shape="invhouse"]
	

	 100 -> 102 ;
99 [label="99: + \n  " ]
	

	 99 -> 104 ;
98 [label="98:  DeclStmt \n   n$16=_fun_NSString_stringWithUTF8String:(\"shared/assertions/NSAssert_example.m\":char *) [line 36]\n  _fun___objc_retain(n$16:class NSString *) [line 36]\n  *&__assert_file__:class NSString *=n$16 [line 36]\n " shape="box"]
	

	 98 -> 93 ;
	 98 -> 94 ;
97 [label="97:  BinaryOperatorStmt: Assign \n   n$14=*&0$?%__sil_tmpSIL_temp_conditional___n$10:class NSString * [line 36]\n  _fun___objc_retain(n$14:class NSString *) [line 36]\n  n$15=*&__assert_file__:class NSString * [line 36]\n  *&__assert_file__:class NSString *=n$14 [line 36]\n  _fun___objc_release(n$15:class NSString *) [line 36]\n " shape="box"]
	

	 97 -> 91 ;
96 [label="96:  ConditinalStmt Branch \n   n$13=_fun_NSString_stringWithUTF8String:(\"<Unknown File>\":char *) [line 36]\n  *&0$?%__sil_tmpSIL_temp_conditional___n$10:class NSString *=n$13 [line 36]\n " shape="box"]
	

	 96 -> 92 ;
95 [label="95:  ConditinalStmt Branch \n   n$12=*&__assert_file__:class NSString * [line 36]\n  *&0$?%__sil_tmpSIL_temp_conditional___n$10:class NSString *=n$12 [line 36]\n " shape="box"]
	

	 95 -> 92 ;
94 [label="94: Prune (false branch) \n   n$11=*&__assert_file__:class NSString * [line 36]\n  PRUNE((n$11 == 0), false); [line 36]\n " shape="invhouse"]
	

	 94 -> 96 ;
93 [label="93: Prune (true branch) \n   n$11=*&__assert_file__:class NSString * [line 36]\n  PRUNE((n$11 != 0), true); [line 36]\n " shape="invhouse"]
	

	 93 -> 95 ;
92 [label="92: + \n  " ]
	

	 92 -> 97 ;
91 [label="91: Prune (true branch) \n   PRUNE(0, true); [line 36]\n " shape="invhouse"]
	

	 91 -> 83 ;
90 [label="90: Prune (false branch) \n   n$4=*&0$?%__sil_tmpSIL_temp_conditional___n$2:int  [line 36]\n  PRUNE((n$4 == 0), false); [line 36]\n " shape="invhouse"]
	

	 90 -> 83 ;
89 [label="89: Prune (true branch) \n   n$4=*&0$?%__sil_tmpSIL_temp_conditional___n$2:int  [line 36]\n  PRUNE((n$4 != 0), true); [line 36]\n " shape="invhouse"]
	

	 89 -> 105 ;
88 [label="88:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$2:int =1 [line 36]\n " shape="box"]
	

	 88 -> 84 ;
87 [label="87:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$2:int =0 [line 36]\n " shape="box"]
	

	 87 -> 84 ;
86 [label="86: Prune (false branch) \n   n$3=*&target:class NSAssert * [line 36]\n  PRUNE((n$3 == 0), false); [line 36]\n " shape="invhouse"]
	

	 86 -> 88 ;
85 [label="85: Prune (true branch) \n   n$3=*&target:class NSAssert * [line 36]\n  PRUNE((n$3 != 0), true); [line 36]\n " shape="invhouse"]
	

	 85 -> 87 ;
84 [label="84: + \n  " ]
	

	 84 -> 89 ;
	 84 -> 90 ;
83 [label="83: + \n  " ]
	

	 83 -> 81 ;
	 83 -> 82 ;
82 [label="82: Prune (false branch) \n   PRUNE((0 == 0), false); [line 36]\n " shape="invhouse"]
	

	 82 -> 79 ;
81 [label="81: Prune (true branch) \n   PRUNE((0 != 0), true); [line 36]\n " shape="invhouse"]
	

	 81 -> 80 ;
80 [label="80: + \n  " ]
	

	 80 -> 85 ;
	 80 -> 86 ;
79 [label="79:  Return Stmt \n   n$0=*&target:class NSAssert * [line 37]\n  n$1=_fun_NSAssert_x(n$0:class NSAssert *) [line 37]\n  *&return:int =n$1 [line 37]\n " shape="box"]
	

	 79 -> 78 ;
78 [label="78: Exit test2 \n  " color=yellow style=filled]
	

77 [label="77: Start test2\nFormals:  target:class NSAssert *\nLocals:  0$?%__sil_tmpSIL_temp_conditional___n$2:int  0$?%__sil_tmpSIL_temp_conditional___n$10:class NSString * __assert_file__:class NSString * 0$?%__sil_tmpSIL_temp_conditional___n$17:class NSString * __assert_fn__:class NSString * \n   DECLARE_LOCALS(&return,&0$?%__sil_tmpSIL_temp_conditional___n$2,&0$?%__sil_tmpSIL_temp_conditional___n$10,&__assert_file__,&0$?%__sil_tmpSIL_temp_conditional___n$17,&__assert_fn__); [line 35]\n " color=yellow style=filled]
	

	 77 -> 80 ;
76 [label="76:  DeclStmt \n   n$22=_fun_NSString_stringWithUTF8String:(\"\":char *) [line 31]\n  _fun___objc_retain(n$22:class NSString *) [line 31]\n  *&__assert_fn__:class NSString *=n$22 [line 31]\n " shape="box"]
	

	 76 -> 71 ;
	 76 -> 72 ;
75 [label="75:  BinaryOperatorStmt: Assign \n   n$20=*&0$?%__sil_tmpSIL_temp_conditional___n$16:class NSString * [line 31]\n  _fun___objc_retain(n$20:class NSString *) [line 31]\n  n$21=*&__assert_fn__:class NSString * [line 31]\n  *&__assert_fn__:class NSString *=n$20 [line 31]\n  _fun___objc_release(n$21:class NSString *) [line 31]\n " shape="box"]
	

	 75 -> 69 ;
74 [label="74:  ConditinalStmt Branch \n   n$19=_fun_NSString_stringWithUTF8String:(\"<Unknown Function>\":char *) [line 31]\n  *&0$?%__sil_tmpSIL_temp_conditional___n$16:class NSString *=n$19 [line 31]\n " shape="box"]
	

	 74 -> 70 ;
73 [label="73:  ConditinalStmt Branch \n   n$18=*&__assert_fn__:class NSString * [line 31]\n  *&0$?%__sil_tmpSIL_temp_conditional___n$16:class NSString *=n$18 [line 31]\n " shape="box"]
	

	 73 -> 70 ;
72 [label="72: Prune (false branch) \n   n$17=*&__assert_fn__:class NSString * [line 31]\n  PRUNE((n$17 == 0), false); [line 31]\n " shape="invhouse"]
	

	 72 -> 74 ;
71 [label="71: Prune (true branch) \n   n$17=*&__assert_fn__:class NSString * [line 31]\n  PRUNE((n$17 != 0), true); [line 31]\n " shape="invhouse"]
	

	 71 -> 73 ;
70 [label="70: + \n  " ]
	

	 70 -> 75 ;
69 [label="69:  DeclStmt \n   n$15=_fun_NSString_stringWithUTF8String:(\"shared/assertions/NSAssert_example.m\":char *) [line 31]\n  _fun___objc_retain(n$15:class NSString *) [line 31]\n  *&__assert_file__:class NSString *=n$15 [line 31]\n " shape="box"]
	

	 69 -> 64 ;
	 69 -> 65 ;
68 [label="68:  BinaryOperatorStmt: Assign \n   n$13=*&0$?%__sil_tmpSIL_temp_conditional___n$9:class NSString * [line 31]\n  _fun___objc_retain(n$13:class NSString *) [line 31]\n  n$14=*&__assert_file__:class NSString * [line 31]\n  *&__assert_file__:class NSString *=n$13 [line 31]\n  _fun___objc_release(n$14:class NSString *) [line 31]\n " shape="box"]
	

	 68 -> 62 ;
67 [label="67:  ConditinalStmt Branch \n   n$12=_fun_NSString_stringWithUTF8String:(\"<Unknown File>\":char *) [line 31]\n  *&0$?%__sil_tmpSIL_temp_conditional___n$9:class NSString *=n$12 [line 31]\n " shape="box"]
	

	 67 -> 63 ;
66 [label="66:  ConditinalStmt Branch \n   n$11=*&__assert_file__:class NSString * [line 31]\n  *&0$?%__sil_tmpSIL_temp_conditional___n$9:class NSString *=n$11 [line 31]\n " shape="box"]
	

	 66 -> 63 ;
65 [label="65: Prune (false branch) \n   n$10=*&__assert_file__:class NSString * [line 31]\n  PRUNE((n$10 == 0), false); [line 31]\n " shape="invhouse"]
	

	 65 -> 67 ;
64 [label="64: Prune (true branch) \n   n$10=*&__assert_file__:class NSString * [line 31]\n  PRUNE((n$10 != 0), true); [line 31]\n " shape="invhouse"]
	

	 64 -> 66 ;
63 [label="63: + \n  " ]
	

	 63 -> 68 ;
62 [label="62: Prune (true branch) \n   PRUNE(0, true); [line 31]\n " shape="invhouse"]
	

	 62 -> 53 ;
61 [label="61: Prune (false branch) \n   n$4=*&0$?%__sil_tmpSIL_temp_conditional___n$2:int  [line 31]\n  PRUNE((n$4 == 0), false); [line 31]\n " shape="invhouse"]
	

	 61 -> 53 ;
60 [label="60: Prune (true branch) \n   n$4=*&0$?%__sil_tmpSIL_temp_conditional___n$2:int  [line 31]\n  PRUNE((n$4 != 0), true); [line 31]\n " shape="invhouse"]
	

	 60 -> 76 ;
59 [label="59:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$2:int =1 [line 31]\n " shape="box"]
	

	 59 -> 54 ;
58 [label="58:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$2:int =0 [line 31]\n " shape="box"]
	

	 58 -> 54 ;
57 [label="57: Prune (false branch) \n   PRUNE(((n$3 != 0) == 0), false); [line 31]\n " shape="invhouse"]
	

	 57 -> 59 ;
56 [label="56: Prune (true branch) \n   PRUNE(((n$3 != 0) != 0), true); [line 31]\n " shape="invhouse"]
	

	 56 -> 58 ;
55 [label="55:  BinaryOperatorStmt: NE \n   n$3=*&target:class NSAssert * [line 31]\n " shape="box"]
	

	 55 -> 56 ;
	 55 -> 57 ;
54 [label="54: + \n  " ]
	

	 54 -> 60 ;
	 54 -> 61 ;
53 [label="53: + \n  " ]
	

	 53 -> 51 ;
	 53 -> 52 ;
52 [label="52: Prune (false branch) \n   PRUNE((0 == 0), false); [line 31]\n " shape="invhouse"]
	

	 52 -> 49 ;
51 [label="51: Prune (true branch) \n   PRUNE((0 != 0), true); [line 31]\n " shape="invhouse"]
	

	 51 -> 50 ;
50 [label="50: + \n  " ]
	

	 50 -> 55 ;
49 [label="49:  Return Stmt \n   n$0=*&target:class NSAssert * [line 32]\n  n$1=_fun_NSAssert_x(n$0:class NSAssert *) [line 32]\n  *&return:int =n$1 [line 32]\n " shape="box"]
	

	 49 -> 48 ;
48 [label="48: Exit test1 \n  " color=yellow style=filled]
	

47 [label="47: Start test1\nFormals:  target:class NSAssert *\nLocals:  0$?%__sil_tmpSIL_temp_conditional___n$2:int  0$?%__sil_tmpSIL_temp_conditional___n$9:class NSString * __assert_file__:class NSString * 0$?%__sil_tmpSIL_temp_conditional___n$16:class NSString * __assert_fn__:class NSString * \n   DECLARE_LOCALS(&return,&0$?%__sil_tmpSIL_temp_conditional___n$2,&0$?%__sil_tmpSIL_temp_conditional___n$9,&__assert_file__,&0$?%__sil_tmpSIL_temp_conditional___n$16,&__assert_fn__); [line 30]\n " color=yellow style=filled]
	

	 47 -> 50 ;
46 [label="46:  DeclStmt \n   n$33=_fun_NSString_stringWithUTF8String:(\"shared/assertions/NSAssert_example.m\":char *) [line 24]\n  _fun___objc_retain(n$33:class NSString *) [line 24]\n  *&__assert_file__:class NSString *=n$33 [line 24]\n " shape="box"]
	

	 46 -> 41 ;
	 46 -> 42 ;
45 [label="45:  BinaryOperatorStmt: Assign \n   n$31=*&0$?%__sil_tmpSIL_temp_conditional___n$27:class NSString * [line 24]\n  _fun___objc_retain(n$31:class NSString *) [line 24]\n  n$32=*&__assert_file__:class NSString * [line 24]\n  *&__assert_file__:class NSString *=n$31 [line 24]\n  _fun___objc_release(n$32:class NSString *) [line 24]\n " shape="box"]
	

	 45 -> 39 ;
44 [label="44:  ConditinalStmt Branch \n   n$30=_fun_NSString_stringWithUTF8String:(\"<Unknown File>\":char *) [line 24]\n  *&0$?%__sil_tmpSIL_temp_conditional___n$27:class NSString *=n$30 [line 24]\n " shape="box"]
	

	 44 -> 40 ;
43 [label="43:  ConditinalStmt Branch \n   n$29=*&__assert_file__:class NSString * [line 24]\n  *&0$?%__sil_tmpSIL_temp_conditional___n$27:class NSString *=n$29 [line 24]\n " shape="box"]
	

	 43 -> 40 ;
42 [label="42: Prune (false branch) \n   n$28=*&__assert_file__:class NSString * [line 24]\n  PRUNE((n$28 == 0), false); [line 24]\n " shape="invhouse"]
	

	 42 -> 44 ;
41 [label="41: Prune (true branch) \n   n$28=*&__assert_file__:class NSString * [line 24]\n  PRUNE((n$28 != 0), true); [line 24]\n " shape="invhouse"]
	

	 41 -> 43 ;
40 [label="40: + \n  " ]
	

	 40 -> 45 ;
39 [label="39: Prune (true branch) \n   PRUNE(0, true); [line 24]\n " shape="invhouse"]
	

	 39 -> 30 ;
38 [label="38: Prune (false branch) \n   n$21=*&0$?%__sil_tmpSIL_temp_conditional___n$19:int  [line 24]\n  PRUNE((n$21 == 0), false); [line 24]\n " shape="invhouse"]
	

	 38 -> 30 ;
37 [label="37: Prune (true branch) \n   n$21=*&0$?%__sil_tmpSIL_temp_conditional___n$19:int  [line 24]\n  PRUNE((n$21 != 0), true); [line 24]\n " shape="invhouse"]
	

	 37 -> 46 ;
36 [label="36:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$19:int =1 [line 24]\n " shape="box"]
	

	 36 -> 31 ;
35 [label="35:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$19:int =0 [line 24]\n " shape="box"]
	

	 35 -> 31 ;
34 [label="34: Prune (false branch) \n   PRUNE(((n$20 != 0) == 0), false); [line 24]\n " shape="invhouse"]
	

	 34 -> 36 ;
33 [label="33: Prune (true branch) \n   PRUNE(((n$20 != 0) != 0), true); [line 24]\n " shape="invhouse"]
	

	 33 -> 35 ;
32 [label="32:  BinaryOperatorStmt: NE \n   n$20=*&a:class NSAssert * [line 24]\n " shape="box"]
	

	 32 -> 33 ;
	 32 -> 34 ;
31 [label="31: + \n  " ]
	

	 31 -> 37 ;
	 31 -> 38 ;
30 [label="30: + \n  " ]
	

	 30 -> 28 ;
	 30 -> 29 ;
29 [label="29: Prune (false branch) \n   PRUNE((0 == 0), false); [line 24]\n " shape="invhouse"]
	

	 29 -> 26 ;
28 [label="28: Prune (true branch) \n   PRUNE((0 != 0), true); [line 24]\n " shape="invhouse"]
	

	 28 -> 27 ;
27 [label="27: + \n  " ]
	

	 27 -> 32 ;
26 [label="26:  Return Stmt \n   n$17=*&a:class NSAssert * [line 25]\n  n$18=_fun_NSAssert_x(n$17:class NSAssert *) [line 25]\n  *&return:int =n$18 [line 25]\n " shape="box"]
	

	 26 -> 25 ;
25 [label="25: Exit NSAssert_initWithRequest: \n  " color=yellow style=filled]
	

24 [label="24: Start NSAssert_initWithRequest:\nFormals:  self:class NSAssert * a:class NSAssert *\nLocals:  0$?%__sil_tmpSIL_temp_conditional___n$19:int  0$?%__sil_tmpSIL_temp_conditional___n$27:class NSString * __assert_file__:class NSString * \n   DECLARE_LOCALS(&return,&0$?%__sil_tmpSIL_temp_conditional___n$19,&0$?%__sil_tmpSIL_temp_conditional___n$27,&__assert_file__); [line 23]\n " color=yellow style=filled]
	

	 24 -> 27 ;
23 [label="23:  DeclStmt \n   n$16=_fun_NSString_stringWithUTF8String:(\"shared/assertions/NSAssert_example.m\":char *) [line 19]\n  _fun___objc_retain(n$16:class NSString *) [line 19]\n  *&__assert_file__:class NSString *=n$16 [line 19]\n " shape="box"]
	

	 23 -> 18 ;
	 23 -> 19 ;
22 [label="22:  BinaryOperatorStmt: Assign \n   n$14=*&0$?%__sil_tmpSIL_temp_conditional___n$10:class NSString * [line 19]\n  _fun___objc_retain(n$14:class NSString *) [line 19]\n  n$15=*&__assert_file__:class NSString * [line 19]\n  *&__assert_file__:class NSString *=n$14 [line 19]\n  _fun___objc_release(n$15:class NSString *) [line 19]\n " shape="box"]
	

	 22 -> 16 ;
21 [label="21:  ConditinalStmt Branch \n   n$13=_fun_NSString_stringWithUTF8String:(\"<Unknown File>\":char *) [line 19]\n  *&0$?%__sil_tmpSIL_temp_conditional___n$10:class NSString *=n$13 [line 19]\n " shape="box"]
	

	 21 -> 17 ;
20 [label="20:  ConditinalStmt Branch \n   n$12=*&__assert_file__:class NSString * [line 19]\n  *&0$?%__sil_tmpSIL_temp_conditional___n$10:class NSString *=n$12 [line 19]\n " shape="box"]
	

	 20 -> 17 ;
19 [label="19: Prune (false branch) \n   n$11=*&__assert_file__:class NSString * [line 19]\n  PRUNE((n$11 == 0), false); [line 19]\n " shape="invhouse"]
	

	 19 -> 21 ;
18 [label="18: Prune (true branch) \n   n$11=*&__assert_file__:class NSString * [line 19]\n  PRUNE((n$11 != 0), true); [line 19]\n " shape="invhouse"]
	

	 18 -> 20 ;
17 [label="17: + \n  " ]
	

	 17 -> 22 ;
16 [label="16: Prune (true branch) \n   PRUNE(0, true); [line 19]\n " shape="invhouse"]
	

	 16 -> 7 ;
15 [label="15: Prune (false branch) \n   n$4=*&0$?%__sil_tmpSIL_temp_conditional___n$2:int  [line 19]\n  PRUNE((n$4 == 0), false); [line 19]\n " shape="invhouse"]
	

	 15 -> 7 ;
14 [label="14: Prune (true branch) \n   n$4=*&0$?%__sil_tmpSIL_temp_conditional___n$2:int  [line 19]\n  PRUNE((n$4 != 0), true); [line 19]\n " shape="invhouse"]
	

	 14 -> 23 ;
13 [label="13:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$2:int =1 [line 19]\n " shape="box"]
	

	 13 -> 8 ;
12 [label="12:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$2:int =0 [line 19]\n " shape="box"]
	

	 12 -> 8 ;
11 [label="11: Prune (false branch) \n   PRUNE(((n$3 != 0) == 0), false); [line 19]\n " shape="invhouse"]
	

	 11 -> 13 ;
10 [label="10: Prune (true branch) \n   PRUNE(((n$3 != 0) != 0), true); [line 19]\n " shape="invhouse"]
	

	 10 -> 12 ;
9 [label="9:  BinaryOperatorStmt: NE \n   n$3=*&target:class NSAssert * [line 19]\n " shape="box"]
	

	 9 -> 10 ;
	 9 -> 11 ;
8 [label="8: + \n  " ]
	

	 8 -> 14 ;
	 8 -> 15 ;
7 [label="7: + \n  " ]
	

	 7 -> 5 ;
	 7 -> 6 ;
6 [label="6: Prune (false branch) \n   PRUNE((0 == 0), false); [line 19]\n " shape="invhouse"]
	

	 6 -> 3 ;
5 [label="5: Prune (true branch) \n   PRUNE((0 != 0), true); [line 19]\n " shape="invhouse"]
	

	 5 -> 4 ;
4 [label="4: + \n  " ]
	

	 4 -> 9 ;
3 [label="3:  Return Stmt \n   n$0=*&target:class NSAssert * [line 20]\n  n$1=_fun_NSAssert_x(n$0:class NSAssert *) [line 20]\n  *&return:int =n$1 [line 20]\n " shape="box"]
	

	 3 -> 2 ;
2 [label="2: Exit NSAssert_addTarget: \n  " color=yellow style=filled]
	

1 [label="1: Start NSAssert_addTarget:\nFormals:  self:class NSAssert * target:class NSAssert *\nLocals:  0$?%__sil_tmpSIL_temp_conditional___n$2:int  0$?%__sil_tmpSIL_temp_conditional___n$10:class NSString * __assert_file__:class NSString * \n   DECLARE_LOCALS(&return,&0$?%__sil_tmpSIL_temp_conditional___n$2,&0$?%__sil_tmpSIL_temp_conditional___n$10,&__assert_file__); [line 18]\n " color=yellow style=filled]
	

	 1 -> 4 ;
}
