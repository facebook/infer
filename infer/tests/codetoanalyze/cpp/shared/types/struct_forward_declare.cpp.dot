/* @generated */
digraph iCFG {
41 [label="41:  BinaryOperatorStmt: Assign \n   n$3=*&z:class struct_forward_declare::Z * [line 67]\n  *n$3.f:int =0 [line 67]\n " shape="box"]
	

	 41 -> 40 ;
40 [label="40:  Return Stmt \n   n$0=*&z:class struct_forward_declare::Z * [line 68]\n  _=*n$0:class struct_forward_declare::Z  [line 68]\n  n$2=_fun_struct_forward_declare::Z_getF(n$0:class struct_forward_declare::Z *) [line 68]\n  *&return:int =(1 / n$2) [line 68]\n " shape="box"]
	

	 40 -> 39 ;
39 [label="39: Exit struct_forward_declare::Z_ptr_div0 \n  " color=yellow style=filled]
	

38 [label="38: Start struct_forward_declare::Z_ptr_div0\nFormals:  z:class struct_forward_declare::Z *\nLocals:  \n   DECLARE_LOCALS(&return); [line 63]\n " color=yellow style=filled]
	

	 38 -> 41 ;
37 [label="37:  DeclStmt \n   _fun_struct_forward_declare::Z_Z(&z:class struct_forward_declare::Z *) [line 58]\n " shape="box"]
	

	 37 -> 36 ;
36 [label="36:  BinaryOperatorStmt: Assign \n   *&z.f:int =0 [line 59]\n " shape="box"]
	

	 36 -> 35 ;
35 [label="35:  Return Stmt \n   _=*&z:class struct_forward_declare::Z  [line 60]\n  n$1=_fun_struct_forward_declare::Z_getF(&z:class struct_forward_declare::Z &) [line 60]\n  *&return:int =(1 / n$1) [line 60]\n " shape="box"]
	

	 35 -> 34 ;
34 [label="34: Exit struct_forward_declare::Z_div0 \n  " color=yellow style=filled]
	

33 [label="33: Start struct_forward_declare::Z_div0\nFormals: \nLocals:  z:class struct_forward_declare::Z  \n   DECLARE_LOCALS(&return,&z); [line 57]\n " color=yellow style=filled]
	

	 33 -> 37 ;
32 [label="32:  DeclStmt \n   _fun_struct_forward_declare::X_X(&x:class struct_forward_declare::X *) [line 48]\n " shape="box"]
	

	 32 -> 31 ;
31 [label="31:  BinaryOperatorStmt: Assign \n   *&x.y:class struct_forward_declare::Y *=null [line 49]\n " shape="box"]
	

	 31 -> 30 ;
30 [label="30:  BinaryOperatorStmt: Assign \n   *&x.f:int =0 [line 50]\n " shape="box"]
	

	 30 -> 27 ;
	 30 -> 28 ;
29 [label="29:  Return Stmt \n   *&return:int =1 [line 52]\n " shape="box"]
	

	 29 -> 24 ;
28 [label="28: Prune (false branch) \n   n$2=*&x.y:class struct_forward_declare::Y * [line 51]\n  PRUNE((n$2 == 0), false); [line 51]\n " shape="invhouse"]
	

	 28 -> 26 ;
27 [label="27: Prune (true branch) \n   n$2=*&x.y:class struct_forward_declare::Y * [line 51]\n  PRUNE((n$2 != 0), true); [line 51]\n " shape="invhouse"]
	

	 27 -> 29 ;
26 [label="26: + \n  " ]
	

	 26 -> 25 ;
25 [label="25:  Return Stmt \n   _=*&x:class struct_forward_declare::X  [line 54]\n  n$1=_fun_struct_forward_declare::X_getF(&x:class struct_forward_declare::X &) [line 54]\n  *&return:int =(1 / n$1) [line 54]\n " shape="box"]
	

	 25 -> 24 ;
24 [label="24: Exit struct_forward_declare::X_Y_div0 \n  " color=yellow style=filled]
	

23 [label="23: Start struct_forward_declare::X_Y_div0\nFormals: \nLocals:  x:class struct_forward_declare::X  \n   DECLARE_LOCALS(&return,&x); [line 47]\n " color=yellow style=filled]
	

	 23 -> 32 ;
22 [label="22:  BinaryOperatorStmt: Assign \n   n$3=*&x:class struct_forward_declare::X * [line 43]\n  *n$3.f:int =0 [line 43]\n " shape="box"]
	

	 22 -> 21 ;
21 [label="21:  Return Stmt \n   n$0=*&x:class struct_forward_declare::X * [line 44]\n  _=*n$0:class struct_forward_declare::X  [line 44]\n  n$2=_fun_struct_forward_declare::X_getF(n$0:class struct_forward_declare::X *) [line 44]\n  *&return:int =(1 / n$2) [line 44]\n " shape="box"]
	

	 21 -> 20 ;
20 [label="20: Exit struct_forward_declare::X_ptr_div0 \n  " color=yellow style=filled]
	

19 [label="19: Start struct_forward_declare::X_ptr_div0\nFormals:  x:class struct_forward_declare::X *\nLocals:  \n   DECLARE_LOCALS(&return); [line 42]\n " color=yellow style=filled]
	

	 19 -> 22 ;
18 [label="18:  DeclStmt \n   _fun_struct_forward_declare::X_X(&x:class struct_forward_declare::X *) [line 37]\n " shape="box"]
	

	 18 -> 17 ;
17 [label="17:  BinaryOperatorStmt: Assign \n   *&x.f:int =0 [line 38]\n " shape="box"]
	

	 17 -> 16 ;
16 [label="16:  Return Stmt \n   _=*&x:class struct_forward_declare::X  [line 39]\n  n$1=_fun_struct_forward_declare::X_getF(&x:class struct_forward_declare::X &) [line 39]\n  *&return:int =(1 / n$1) [line 39]\n " shape="box"]
	

	 16 -> 15 ;
15 [label="15: Exit struct_forward_declare::X_div0 \n  " color=yellow style=filled]
	

14 [label="14: Start struct_forward_declare::X_div0\nFormals: \nLocals:  x:class struct_forward_declare::X  \n   DECLARE_LOCALS(&return,&x); [line 36]\n " color=yellow style=filled]
	

	 14 -> 18 ;
13 [label="13: Exit struct_forward_declare::Z_Z \n  " color=yellow style=filled]
	

12 [label="12: Start struct_forward_declare::Z_Z\nFormals:  this:class struct_forward_declare::Z *\nLocals:  \n   DECLARE_LOCALS(&return); [line 28]\n " color=yellow style=filled]
	

	 12 -> 13 ;
11 [label="11:  Return Stmt \n   n$0=*&this:class struct_forward_declare::Z * [line 30]\n  n$1=*n$0.f:int  [line 30]\n  *&return:int =n$1 [line 30]\n " shape="box"]
	

	 11 -> 10 ;
10 [label="10: Exit struct_forward_declare::Z_getF \n  " color=yellow style=filled]
	

9 [label="9: Start struct_forward_declare::Z_getF\nFormals:  this:class struct_forward_declare::Z *\nLocals:  \n   DECLARE_LOCALS(&return); [line 30]\n " color=yellow style=filled]
	

	 9 -> 11 ;
8 [label="8:  DeclStmt \n   n$0=*&z1:class struct_forward_declare::Z * [line 26]\n  *&z2:class struct_forward_declare::Z *=n$0 [line 26]\n " shape="box"]
	

	 8 -> 7 ;
7 [label="7: Exit struct_forward_declare::fun_with_Z \n  " color=yellow style=filled]
	

6 [label="6: Start struct_forward_declare::fun_with_Z\nFormals:  z1:class struct_forward_declare::Z *\nLocals:  z2:class struct_forward_declare::Z * \n   DECLARE_LOCALS(&return,&z2); [line 26]\n " color=yellow style=filled]
	

	 6 -> 8 ;
5 [label="5: Exit struct_forward_declare::X_X \n  " color=yellow style=filled]
	

4 [label="4: Start struct_forward_declare::X_X\nFormals:  this:class struct_forward_declare::X *\nLocals:  \n   DECLARE_LOCALS(&return); [line 19]\n " color=yellow style=filled]
	

	 4 -> 5 ;
3 [label="3:  Return Stmt \n   n$0=*&this:class struct_forward_declare::X * [line 21]\n  n$1=*n$0.f:int  [line 21]\n  *&return:int =n$1 [line 21]\n " shape="box"]
	

	 3 -> 2 ;
2 [label="2: Exit struct_forward_declare::X_getF \n  " color=yellow style=filled]
	

1 [label="1: Start struct_forward_declare::X_getF\nFormals:  this:class struct_forward_declare::X *\nLocals:  \n   DECLARE_LOCALS(&return); [line 21]\n " color=yellow style=filled]
	

	 1 -> 3 ;
}
