/* @generated */
digraph iCFG {
61 [label="61:  DeclStmt \n   _fun_conversion_operator::X_X(&x:class conversion_operator::X *,1:int ,1:_Bool ) [line 64]\n " shape="box"]
	

	 61 -> 56 ;
60 [label="60:  DeclStmt \n   _=*&x:class conversion_operator::X  [line 66]\n  n$6=_fun_conversion_operator::X_operator_int(&x:class conversion_operator::X &) [line 66]\n  *&v:int =n$6 [line 66]\n " shape="box"]
	

	 60 -> 59 ;
59 [label="59:  Return Stmt \n   n$4=*&v:int  [line 67]\n  *&return:int =(1 / n$4) [line 67]\n " shape="box"]
	

	 59 -> 53 ;
58 [label="58: Prune (false branch) \n   PRUNE((n$3 == 0), false); [line 65]\n " shape="invhouse"]
	

	 58 -> 55 ;
57 [label="57: Prune (true branch) \n   PRUNE((n$3 != 0), true); [line 65]\n " shape="invhouse"]
	

	 57 -> 60 ;
56 [label="56:  Call _fun_conversion_operator::X_operator_bool \n   _=*&x:class conversion_operator::X  [line 65]\n  n$3=_fun_conversion_operator::X_operator_bool(&x:class conversion_operator::X &) [line 65]\n " shape="box"]
	

	 56 -> 57 ;
	 56 -> 58 ;
55 [label="55: + \n  " ]
	

	 55 -> 54 ;
54 [label="54:  Return Stmt \n   _=*&x:class conversion_operator::X  [line 69]\n  n$1=_fun_conversion_operator::X_operator_int(&x:class conversion_operator::X &) [line 69]\n  *&return:int =n$1 [line 69]\n " shape="box"]
	

	 54 -> 53 ;
53 [label="53: Exit conversion_operator::branch_div1 \n  " color=yellow style=filled]
	

52 [label="52: Start conversion_operator::branch_div1\nFormals: \nLocals:  v:int  x:class conversion_operator::X  \n   DECLARE_LOCALS(&return,&v,&x); [line 63]\n " color=yellow style=filled]
	

	 52 -> 61 ;
51 [label="51:  DeclStmt \n   _fun_conversion_operator::X_X(&x:class conversion_operator::X *,0:int ,0:_Bool ) [line 55]\n " shape="box"]
	

	 51 -> 46 ;
50 [label="50:  DeclStmt \n   _=*&x:class conversion_operator::X  [line 57]\n  n$6=_fun_conversion_operator::X_operator_int(&x:class conversion_operator::X &) [line 57]\n  *&v:int =n$6 [line 57]\n " shape="box"]
	

	 50 -> 49 ;
49 [label="49:  Return Stmt \n   n$4=*&v:int  [line 58]\n  *&return:int =(1 / n$4) [line 58]\n " shape="box"]
	

	 49 -> 43 ;
48 [label="48: Prune (false branch) \n   PRUNE((n$3 == 0), false); [line 56]\n " shape="invhouse"]
	

	 48 -> 45 ;
47 [label="47: Prune (true branch) \n   PRUNE((n$3 != 0), true); [line 56]\n " shape="invhouse"]
	

	 47 -> 50 ;
46 [label="46:  Call _fun_conversion_operator::X_operator_bool \n   _=*&x:class conversion_operator::X  [line 56]\n  n$3=_fun_conversion_operator::X_operator_bool(&x:class conversion_operator::X &) [line 56]\n " shape="box"]
	

	 46 -> 47 ;
	 46 -> 48 ;
45 [label="45: + \n  " ]
	

	 45 -> 44 ;
44 [label="44:  Return Stmt \n   _=*&x:class conversion_operator::X  [line 60]\n  n$1=_fun_conversion_operator::X_operator_int(&x:class conversion_operator::X &) [line 60]\n  *&return:int =n$1 [line 60]\n " shape="box"]
	

	 44 -> 43 ;
43 [label="43: Exit conversion_operator::branch_no_div \n  " color=yellow style=filled]
	

42 [label="42: Start conversion_operator::branch_no_div\nFormals: \nLocals:  v:int  x:class conversion_operator::X  \n   DECLARE_LOCALS(&return,&v,&x); [line 54]\n " color=yellow style=filled]
	

	 42 -> 51 ;
41 [label="41:  DeclStmt \n   _fun_conversion_operator::Y_Y(&y:class conversion_operator::Y *) [line 44]\n " shape="box"]
	

	 41 -> 40 ;
40 [label="40:  BinaryOperatorStmt: Assign \n   *&y.f:int =0 [line 45]\n " shape="box"]
	

	 40 -> 39 ;
39 [label="39:  BinaryOperatorStmt: Assign \n   *&y.b:int =1 [line 46]\n " shape="box"]
	

	 39 -> 34 ;
38 [label="38:  DeclStmt \n   _=*&y:class conversion_operator::Y  [line 48]\n  _fun_conversion_operator::Y_operator_X(&y:class conversion_operator::Y &,&0$?%__sil_tmpSIL_materialize_temp__n$12:class conversion_operator::X *) [line 48]\n  _fun_conversion_operator::X_X(&0$?%__sil_tmp__temp_construct_n$11:class conversion_operator::X *,&0$?%__sil_tmpSIL_materialize_temp__n$12:class conversion_operator::X &) [line 48]\n  n$15=_fun_conversion_operator::X_operator_int(&0$?%__sil_tmp__temp_construct_n$11:class conversion_operator::X &) [line 48]\n  *&v:int =n$15 [line 48]\n " shape="box"]
	

	 38 -> 37 ;
37 [label="37:  Return Stmt \n   n$10=*&v:int  [line 49]\n  *&return:int =(1 / n$10) [line 49]\n " shape="box"]
	

	 37 -> 31 ;
36 [label="36: Prune (false branch) \n   PRUNE((n$9 == 0), false); [line 47]\n " shape="invhouse"]
	

	 36 -> 33 ;
35 [label="35: Prune (true branch) \n   PRUNE((n$9 != 0), true); [line 47]\n " shape="invhouse"]
	

	 35 -> 38 ;
34 [label="34:  Call _fun_conversion_operator::X_operator_bool \n   _=*&y:class conversion_operator::Y  [line 47]\n  _fun_conversion_operator::Y_operator_X(&y:class conversion_operator::Y &,&0$?%__sil_tmpSIL_materialize_temp__n$6:class conversion_operator::X *) [line 47]\n  _fun_conversion_operator::X_X(&0$?%__sil_tmp__temp_construct_n$5:class conversion_operator::X *,&0$?%__sil_tmpSIL_materialize_temp__n$6:class conversion_operator::X &) [line 47]\n  n$9=_fun_conversion_operator::X_operator_bool(&0$?%__sil_tmp__temp_construct_n$5:class conversion_operator::X &) [line 47]\n " shape="box"]
	

	 34 -> 35 ;
	 34 -> 36 ;
33 [label="33: + \n  " ]
	

	 33 -> 32 ;
32 [label="32:  Return Stmt \n   _=*&y:class conversion_operator::Y  [line 51]\n  _fun_conversion_operator::Y_operator_X(&y:class conversion_operator::Y &,&0$?%__sil_tmpSIL_materialize_temp__n$1:class conversion_operator::X *) [line 51]\n  _fun_conversion_operator::X_X(&0$?%__sil_tmp__temp_construct_n$0:class conversion_operator::X *,&0$?%__sil_tmpSIL_materialize_temp__n$1:class conversion_operator::X &) [line 51]\n  n$4=_fun_conversion_operator::X_operator_int(&0$?%__sil_tmp__temp_construct_n$0:class conversion_operator::X &) [line 51]\n  *&return:int =n$4 [line 51]\n " shape="box"]
	

	 32 -> 31 ;
31 [label="31: Exit conversion_operator::y_branch_div0 \n  " color=yellow style=filled]
	

30 [label="30: Start conversion_operator::y_branch_div0\nFormals: \nLocals:  0$?%__sil_tmp__temp_construct_n$0:class conversion_operator::X  0$?%__sil_tmpSIL_materialize_temp__n$1:class conversion_operator::X  0$?%__sil_tmp__temp_construct_n$5:class conversion_operator::X  0$?%__sil_tmpSIL_materialize_temp__n$6:class conversion_operator::X  v:int  0$?%__sil_tmp__temp_construct_n$11:class conversion_operator::X  0$?%__sil_tmpSIL_materialize_temp__n$12:class conversion_operator::X  y:class conversion_operator::Y  \n   DECLARE_LOCALS(&return,&0$?%__sil_tmp__temp_construct_n$0,&0$?%__sil_tmpSIL_materialize_temp__n$1,&0$?%__sil_tmp__temp_construct_n$5,&0$?%__sil_tmpSIL_materialize_temp__n$6,&v,&0$?%__sil_tmp__temp_construct_n$11,&0$?%__sil_tmpSIL_materialize_temp__n$12,&y); [line 43]\n " color=yellow style=filled]
	

	 30 -> 41 ;
29 [label="29:  DeclStmt \n   _fun_conversion_operator::X_X(&x:class conversion_operator::X *,0:int ,1:_Bool ) [line 35]\n " shape="box"]
	

	 29 -> 24 ;
28 [label="28:  DeclStmt \n   _=*&x:class conversion_operator::X  [line 37]\n  n$6=_fun_conversion_operator::X_operator_int(&x:class conversion_operator::X &) [line 37]\n  *&v:int =n$6 [line 37]\n " shape="box"]
	

	 28 -> 27 ;
27 [label="27:  Return Stmt \n   n$4=*&v:int  [line 38]\n  *&return:int =(1 / n$4) [line 38]\n " shape="box"]
	

	 27 -> 21 ;
26 [label="26: Prune (false branch) \n   PRUNE((n$3 == 0), false); [line 36]\n " shape="invhouse"]
	

	 26 -> 23 ;
25 [label="25: Prune (true branch) \n   PRUNE((n$3 != 0), true); [line 36]\n " shape="invhouse"]
	

	 25 -> 28 ;
24 [label="24:  Call _fun_conversion_operator::X_operator_bool \n   _=*&x:class conversion_operator::X  [line 36]\n  n$3=_fun_conversion_operator::X_operator_bool(&x:class conversion_operator::X &) [line 36]\n " shape="box"]
	

	 24 -> 25 ;
	 24 -> 26 ;
23 [label="23: + \n  " ]
	

	 23 -> 22 ;
22 [label="22:  Return Stmt \n   _=*&x:class conversion_operator::X  [line 40]\n  n$1=_fun_conversion_operator::X_operator_int(&x:class conversion_operator::X &) [line 40]\n  *&return:int =n$1 [line 40]\n " shape="box"]
	

	 22 -> 21 ;
21 [label="21: Exit conversion_operator::branch_div0 \n  " color=yellow style=filled]
	

20 [label="20: Start conversion_operator::branch_div0\nFormals: \nLocals:  v:int  x:class conversion_operator::X  \n   DECLARE_LOCALS(&return,&v,&x); [line 34]\n " color=yellow style=filled]
	

	 20 -> 29 ;
19 [label="19: Exit conversion_operator::Y_Y \n  " color=yellow style=filled]
	

18 [label="18: Start conversion_operator::Y_Y\nFormals:  this:class conversion_operator::Y *\nLocals:  \n   DECLARE_LOCALS(&return); [line 27]\n " color=yellow style=filled]
	

	 18 -> 19 ;
17 [label="17:  Return Stmt \n   n$0=*&__return_param:class conversion_operator::X * [line 29]\n  n$2=*&this:class conversion_operator::Y * [line 29]\n  n$3=*n$2.f:int  [line 29]\n  n$4=*&this:class conversion_operator::Y * [line 29]\n  n$5=*n$4.b:int  [line 29]\n  _fun_conversion_operator::X_X(&0$?%__sil_tmpSIL_materialize_temp__n$1:class conversion_operator::X *,n$3:int ,n$5:_Bool ) [line 29]\n  _fun_conversion_operator::X_X(n$0:class conversion_operator::X *,&0$?%__sil_tmpSIL_materialize_temp__n$1:class conversion_operator::X &) [line 29]\n " shape="box"]
	

	 17 -> 16 ;
16 [label="16: Exit conversion_operator::Y_operator_X \n  " color=yellow style=filled]
	

15 [label="15: Start conversion_operator::Y_operator_X\nFormals:  this:class conversion_operator::Y * __return_param:class conversion_operator::X *\nLocals:  0$?%__sil_tmpSIL_materialize_temp__n$1:class conversion_operator::X  \n   DECLARE_LOCALS(&return,&0$?%__sil_tmpSIL_materialize_temp__n$1); [line 29]\n " color=yellow style=filled]
	

	 15 -> 17 ;
14 [label="14:  BinaryOperatorStmt: Assign \n   n$3=*&this:class conversion_operator::X * [line 22]\n  n$4=*&x:class conversion_operator::X & [line 22]\n  n$5=*n$4.f_:int  [line 22]\n  *n$3.f_:int =n$5 [line 22]\n " shape="box"]
	

	 14 -> 13 ;
13 [label="13:  BinaryOperatorStmt: Assign \n   n$0=*&this:class conversion_operator::X * [line 23]\n  n$1=*&x:class conversion_operator::X & [line 23]\n  n$2=*n$1.b_:_Bool  [line 23]\n  *n$0.b_:_Bool =n$2 [line 23]\n " shape="box"]
	

	 13 -> 12 ;
12 [label="12: Exit conversion_operator::X_X \n  " color=yellow style=filled]
	

11 [label="11: Start conversion_operator::X_X\nFormals:  this:class conversion_operator::X * x:class conversion_operator::X &\nLocals:  \n   DECLARE_LOCALS(&return); [line 21]\n " color=yellow style=filled]
	

	 11 -> 14 ;
10 [label="10:  BinaryOperatorStmt: Assign \n   n$2=*&this:class conversion_operator::X * [line 18]\n  n$3=*&f:int  [line 18]\n  *n$2.f_:int =n$3 [line 18]\n " shape="box"]
	

	 10 -> 9 ;
9 [label="9:  BinaryOperatorStmt: Assign \n   n$0=*&this:class conversion_operator::X * [line 19]\n  n$1=*&b:_Bool  [line 19]\n  *n$0.b_:_Bool =n$1 [line 19]\n " shape="box"]
	

	 9 -> 8 ;
8 [label="8: Exit conversion_operator::X_X \n  " color=yellow style=filled]
	

7 [label="7: Start conversion_operator::X_X\nFormals:  this:class conversion_operator::X * f:int  b:_Bool \nLocals:  \n   DECLARE_LOCALS(&return); [line 17]\n " color=yellow style=filled]
	

	 7 -> 10 ;
6 [label="6:  Return Stmt \n   n$0=*&this:class conversion_operator::X * [line 14]\n  n$1=*n$0.b_:_Bool  [line 14]\n  *&return:_Bool =n$1 [line 14]\n " shape="box"]
	

	 6 -> 5 ;
5 [label="5: Exit conversion_operator::X_operator_bool \n  " color=yellow style=filled]
	

4 [label="4: Start conversion_operator::X_operator_bool\nFormals:  this:class conversion_operator::X *\nLocals:  \n   DECLARE_LOCALS(&return); [line 14]\n " color=yellow style=filled]
	

	 4 -> 6 ;
3 [label="3:  Return Stmt \n   n$0=*&this:class conversion_operator::X * [line 13]\n  n$1=*n$0.f_:int  [line 13]\n  *&return:int =n$1 [line 13]\n " shape="box"]
	

	 3 -> 2 ;
2 [label="2: Exit conversion_operator::X_operator_int \n  " color=yellow style=filled]
	

1 [label="1: Start conversion_operator::X_operator_int\nFormals:  this:class conversion_operator::X *\nLocals:  \n   DECLARE_LOCALS(&return); [line 13]\n " color=yellow style=filled]
	

	 1 -> 3 ;
}
