/* @generated */
digraph iCFG {
28 [label="28:  DeclStmt \n   *&x:int =10 [line 21]\n " shape="box"]
	

	 28 -> 27 ;
27 [label="27:  DeclStmt \n   *&result:int =0 [line 22]\n " shape="box"]
	

	 27 -> 15 ;
26 [label="26:  BinaryOperatorStmt: AddAssign \n   n$6=*&a:int  [line 24]\n  n$7=*&result:int  [line 24]\n  *&result:int =(n$7 + n$6) [line 24]\n " shape="box"]
	

	 26 -> 25 ;
25 [label="25:  BinaryOperatorStmt: SubAssign \n   n$5=*&x:int  [line 25]\n  *&x:int =(n$5 - 1) [line 25]\n " shape="box"]
	

	 25 -> 15 ;
24 [label="24:  DeclStmt \n   n$4=*&0$?%__sil_tmpSIL_temp_conditional___n$1:int  [line 23]\n  *&a:int =n$4 [line 23]\n " shape="box"]
	

	 24 -> 16 ;
	 24 -> 17 ;
23 [label="23:  ConditinalStmt Branch \n   *&0$?%__sil_tmpSIL_temp_conditional___n$1:int =0 [line 23]\n " shape="box"]
	

	 23 -> 18 ;
22 [label="22:  ConditinalStmt Branch \n   n$3=*&x:int  [line 23]\n  *&0$?%__sil_tmpSIL_temp_conditional___n$1:int =n$3 [line 23]\n " shape="box"]
	

	 22 -> 18 ;
21 [label="21: Prune (false branch) \n   PRUNE(((n$2 > 0) == 0), false); [line 23]\n " shape="invhouse"]
	

	 21 -> 23 ;
20 [label="20: Prune (true branch) \n   PRUNE(((n$2 > 0) != 0), true); [line 23]\n " shape="invhouse"]
	

	 20 -> 22 ;
19 [label="19:  BinaryOperatorStmt: GT \n   n$2=*&x:int  [line 23]\n " shape="box"]
	

	 19 -> 20 ;
	 19 -> 21 ;
18 [label="18: + \n  " ]
	

	 18 -> 24 ;
17 [label="17: Prune (false branch) \n   n$0=*&a:int  [line 23]\n  PRUNE((n$0 == 0), false); [line 23]\n " shape="invhouse"]
	

	 17 -> 14 ;
16 [label="16: Prune (true branch) \n   n$0=*&a:int  [line 23]\n  PRUNE((n$0 != 0), true); [line 23]\n " shape="invhouse"]
	

	 16 -> 26 ;
15 [label="15: + \n  " ]
	

	 15 -> 19 ;
14 [label="14:  Return Stmt \n   *&return:int =0 [line 27]\n " shape="box"]
	

	 14 -> 13 ;
13 [label="13: Exit conditional_assignment \n  " color=yellow style=filled]
	

12 [label="12: Start conditional_assignment\nFormals: \nLocals:  a:int  0$?%__sil_tmpSIL_temp_conditional___n$1:int  result:int  x:int  \n   DECLARE_LOCALS(&return,&a,&0$?%__sil_tmpSIL_temp_conditional___n$1,&result,&x); [line 20]\n " color=yellow style=filled]
	

	 12 -> 28 ;
11 [label="11:  DeclStmt \n   *&x:int =10 [line 11]\n " shape="box"]
	

	 11 -> 10 ;
10 [label="10:  DeclStmt \n   *&result:int =0 [line 12]\n " shape="box"]
	

	 10 -> 4 ;
9 [label="9:  BinaryOperatorStmt: AddAssign \n   n$3=*&a:int  [line 14]\n  n$4=*&result:int  [line 14]\n  *&result:int =(n$4 + n$3) [line 14]\n " shape="box"]
	

	 9 -> 8 ;
8 [label="8:  BinaryOperatorStmt: SubAssign \n   n$2=*&x:int  [line 15]\n  *&x:int =(n$2 - 1) [line 15]\n " shape="box"]
	

	 8 -> 4 ;
7 [label="7:  DeclStmt \n   n$1=*&x:int  [line 13]\n  *&a:int =n$1 [line 13]\n " shape="box"]
	

	 7 -> 5 ;
	 7 -> 6 ;
6 [label="6: Prune (false branch) \n   n$0=*&a:int  [line 13]\n  PRUNE((n$0 == 0), false); [line 13]\n " shape="invhouse"]
	

	 6 -> 3 ;
5 [label="5: Prune (true branch) \n   n$0=*&a:int  [line 13]\n  PRUNE((n$0 != 0), true); [line 13]\n " shape="invhouse"]
	

	 5 -> 9 ;
4 [label="4: + \n  " ]
	

	 4 -> 7 ;
3 [label="3:  Return Stmt \n   *&return:int =0 [line 17]\n " shape="box"]
	

	 3 -> 2 ;
2 [label="2: Exit simple_assignment \n  " color=yellow style=filled]
	

1 [label="1: Start simple_assignment\nFormals: \nLocals:  a:int  result:int  x:int  \n   DECLARE_LOCALS(&return,&a,&result,&x); [line 10]\n " color=yellow style=filled]
	

	 1 -> 11 ;
}
