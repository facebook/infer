build_systems/pulse_messages/decompiler.c, trace_name_parameter, 27, 3, ERROR, NULLPTR_DEREFERENCE, `p` could be null (last assigned on line 26) and is dereferenced.
build_systems/pulse_messages/decompiler.c, trace_name_local, 32, 3, ERROR, NULLPTR_DEREFERENCE, `p` could be null (last assigned on line 31) and is dereferenced.
build_systems/pulse_messages/decompiler.c, trace_name_local_aliased, 43, 4, ERROR, PULSE_UNINITIALIZED_VALUE, `p` is read without initialization.
build_systems/pulse_messages/decompiler.c, trace_outer_name_return, 55, 3, ERROR, NULLPTR_DEREFERENCE, `x.ptr` could be null (from the call to `trace_inner()` on line 54) and is dereferenced.
build_systems/pulse_messages/decompiler.c, trace_outer_name_return_complex, 66, 5, ERROR, NULLPTR_DEREFERENCE, `x->ptr` could be null (from the call to `trace_inner()` on line 63) and is dereferenced.
build_systems/pulse_messages/decompiler.c, trace_outer_alias_return_indirect_deref_complex, 87, 5, ERROR, NULLPTR_DEREFERENCE, `x->ptr` could be null (from the call to `trace_inner()` on line 82) and is dereferenced in the call to `deref()`.
build_systems/pulse_messages/decompiler.c, trace_outer_anon_return, 94, 3, ERROR, NULLPTR_DEREFERENCE, `trace_inner()` could be null (from the call to `trace_inner()` on line 94) and is dereferenced.
build_systems/pulse_messages/decompiler.c, fields_in_correct_order, 99, 3, ERROR, NULLPTR_DEREFERENCE, `(**x->next.a.a_ptr)->ptr` could be null (last assigned on line 98) and is dereferenced.
build_systems/pulse_messages/decompiler.c, array_deref_of_address, 105, 3, ERROR, NULLPTR_DEREFERENCE, `x` could be null (last assigned on line 104) and is dereferenced.
build_systems/pulse_messages/decompiler.c, pass_null_to_deref, 110, 3, ERROR, NULLPTR_DEREFERENCE, null (last assigned on line 110) is dereferenced in the call to `deref()`.
build_systems/pulse_messages/field_taint.c, test_taint_field_bad, 27, 3, ERROR, TAINT_ERROR, `s->manipulated` is tainted by field manipulated of passed as argument #0 to taint_manipulated with kind Simple and flows to passed as argument #0 to sink_int with kind Simple (tainted flow) and policy (Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way).
build_systems/pulse_messages/field_taint.c, test_sink_field_bad, 38, 3, ERROR, TAINT_ERROR, `s->manipulated` is tainted by value returned from int_source with kind Simple and flows to field manipulated of passed as argument #0 to sink_manipulated with kind Simple (tainted flow) and policy (Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way).
build_systems/pulse_messages/field_taint.c, test_sanitize_field_bad, 57, 3, ERROR, TAINT_ERROR, `s->other` is tainted by passed as argument #0 to taint_structure with kind Simple and flows to passed as argument #0 to sink_int with kind Simple (tainted flow) and policy (Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way).
build_systems/pulse_messages/field_taint.c, test_propagate_to_field_bad, 70, 3, ERROR, TAINT_ERROR, `s->manipulated` is tainted by value returned from int_source with kind Simple and flows to passed as argument #0 to sink_int with kind Simple (tainted flow) and policy (Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way).
build_systems/pulse_messages/field_taint.c, test_taint_field_with_indirections_bad, 83, 3, ERROR, TAINT_ERROR, `(*s_ptr_ptr)->manipulated` is tainted by field manipulated of passed as argument #0 to taint_manipulated_with_indirections with kind Simple and flows to passed as argument #0 to sink_int with kind Simple (tainted flow) and policy (Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way).
build_systems/pulse_messages/field_taint.c, test_taint_previously_unaccessed_field_bad, 95, 3, ERROR, TAINT_ERROR, `s->manipulated` is tainted by passed as argument #0 to taint_structure with kind Simple and flows to passed as argument #0 to sink_int with kind Simple (tainted flow) and policy (Built-in Simple taint kind, matching any Simple source with any Simple sink except if any Simple sanitizer is in the way).
build_systems/pulse_messages/memory_leak.c, intraprocedural_leak_bad, 10, 35, ERROR, MEMORY_LEAK_C, Memory dynamically allocated by `malloc` on line 10 is not freed after the last access at line 10, column 35.
build_systems/pulse_messages/memory_leak.c, malloc_wrapper_leak_bad, 14, 34, ERROR, MEMORY_LEAK_C, Memory dynamically allocated by `malloc`, indirectly via call to `malloc_wrapper()` on line 14 is not freed after the last access at line 14, column 34.
build_systems/pulse_messages/null_dereference.c, intraprocedural_bad, 12, 3, ERROR, NULLPTR_DEREFERENCE, `p` could be null (last assigned on line 11) and is dereferenced.
build_systems/pulse_messages/null_dereference.c, null_via_return_bad, 19, 3, ERROR, NULLPTR_DEREFERENCE, `p` could be null (from the call to `return_null()` on line 18) and is dereferenced.
build_systems/pulse_messages/null_dereference.c, via_deref_bad, 26, 3, ERROR, NULLPTR_DEREFERENCE, `p` could be null (last assigned on line 25) and is dereferenced in the call to `deref()`.
build_systems/pulse_messages/null_dereference.c, null_via_return_via_deref_bad, 31, 3, ERROR, NULLPTR_DEREFERENCE, `p` could be null (from the call to `return_null()` on line 30) and is dereferenced in the call to `deref()`.
build_systems/pulse_messages/null_dereference.c, follow_value_by_ref_bad, 52, 3, ERROR, NULLPTR_DEREFERENCE, `z` could be null (from the call to `set_to_null()` on line 49) and is dereferenced.
build_systems/pulse_messages/null_dereference.c, latent, 58, 5, ERROR, NULLPTR_DEREFERENCE_LATENT, `p` could be null (last assigned on line 57) and is dereferenced.
build_systems/pulse_messages/null_dereference.c, make_latent_manifest, 68, 31, ERROR, NULLPTR_DEREFERENCE, The call to `propagate_latent_3_latent` ends up calling `latent` (after 2 more calls) and may trigger the following issue: `p` could be null (from the call to `propagate_latent_3_latent()` on line 57) and is dereferenced in the call to `propagate_latent_3_latent()`.
build_systems/pulse_messages/optional.cpp, optional_empty_access::intraprocedural_bad, 13, 10, ERROR, OPTIONAL_EMPTY_ACCESS, accessing memory that is assigned an empty value on line 12.
build_systems/pulse_messages/optional.cpp, optional_empty_access::empty_via_return_bad, 20, 10, ERROR, OPTIONAL_EMPTY_ACCESS, accessing memory that is assigned an empty value during the call to `optional_empty_access::return_empty()` on line 19.
build_systems/pulse_messages/optional.cpp, optional_empty_access::via_access_bad, 27, 3, ERROR, OPTIONAL_EMPTY_ACCESS, call to `optional_empty_access::access()` eventually accesses memory that is assigned an empty value on line 26.
build_systems/pulse_messages/optional.cpp, optional_empty_access::empty_via_return_via_access_bad, 32, 3, ERROR, OPTIONAL_EMPTY_ACCESS, call to `optional_empty_access::access()` eventually accesses memory that is assigned an empty value during the call to `optional_empty_access::return_empty()` on line 31.
build_systems/pulse_messages/optional.cpp, optional_empty_access::latent, 38, 13, ERROR, OPTIONAL_EMPTY_ACCESS_LATENT, accessing memory that is assigned an empty value on line 37.
build_systems/pulse_messages/optional.cpp, optional_empty_access::make_latent_manifest, 48, 31, ERROR, OPTIONAL_EMPTY_ACCESS, The call to `optional_empty_access::propagate_latent_3_latent` ends up calling `optional_empty_access::latent` (after 2 more calls) and may trigger the following issue: call to `optional_empty_access::propagate_latent_3_latent()` eventually accesses memory that is assigned an empty value during the call to `optional_empty_access::propagate_latent_3_latent()` on line 37.
build_systems/pulse_messages/readonly_shared_ptr_param.cpp, read_shared_ptr_param, 11, 1, ERROR, PULSE_READONLY_SHARED_PTR_PARAM, Function parameter `x` with type `std::shared_ptr<int>` is passed by-value but its lifetime is not extended inside the function on line 11. This might result in an unnecessary copy at the callsite of this function. Consider passing a raw pointer instead and changing its usages if necessary at line 14.
build_systems/pulse_messages/readonly_shared_ptr_param.cpp, multiple_read_shared_ptr_param, 17, 1, ERROR, PULSE_READONLY_SHARED_PTR_PARAM, Function parameter `x` with type `std::shared_ptr<int>` is passed by-value but its lifetime is not extended inside the function on line 17. This might result in an unnecessary copy at the callsite of this function. Consider passing a raw pointer instead and changing its usages if necessary at line 19, line 21.
build_systems/pulse_messages/unnecessary_copy.cpp, copy_decl_bad, 21, 14, ERROR, PULSE_UNNECESSARY_COPY, copied variable `cpy` is not modified after it is copied from `get_a_ref()` with type `A&` on line 21. To avoid the copy, try using a reference `&`. If this copy was intentional, consider calling `folly::copy` to make it explicit and hence suppress the warning.
build_systems/pulse_messages/unnecessary_copy.cpp, copy_assignment_bad, 26, 1, ERROR, PULSE_CONST_REFABLE, Function parameter `source` with type `A` is passed by-value but not modified inside the function on line 26. This might result in an unnecessary copy at the callsite of this function. Consider changing the type of this function parameter to `const &`.
build_systems/pulse_messages/unnecessary_copy.cpp, copy_assignment_bad, 28, 3, ERROR, PULSE_UNNECESSARY_COPY_ASSIGNMENT, copy assigned variable `c` is not modified after it is copied from `source` with type `A&` on line 28. To avoid the copy, try moving it by calling `std::move` instead. If this copy was intentional, consider calling `folly::copy` to make it explicit and hence suppress the warning.
build_systems/pulse_messages/unnecessary_copy.cpp, Test::unnecessary_copy_moveable_bad, 34, 47, ERROR, PULSE_UNNECESSARY_COPY_ASSIGNMENT_MOVABLE, `a` with type `A&&` is copy assigned into field `mem_a` but is not modified afterwards. Rather than copying into the field, consider moving into it instead.
build_systems/pulse_messages/unnecessary_copy.cpp, Test::intermediate_member_field_copy_bad, 38, 33, ERROR, PULSE_UNNECESSARY_COPY_INTERMEDIATE, variable `&a` with type `A&` is copied unnecessarily into an intermediate on line 38. To avoid the copy, try moving it by calling `std::move` instead.
build_systems/pulse_messages/unnecessary_copy.cpp, get_size, 42, 1, ERROR, PULSE_CONST_REFABLE, Function parameter `a` with type `A` is passed by-value but not modified inside the function on line 42. This might result in an unnecessary copy at the callsite of this function. Consider changing the type of this function parameter to `const &`.
build_systems/pulse_messages/unnecessary_copy.cpp, unnecessary_intermediate_copy, 47, 12, ERROR, PULSE_UNNECESSARY_COPY_INTERMEDIATE_CONST, variable `my_a` with type `A const &` is copied unnecessarily into an intermediate on line 47. To avoid the copy, try 1) removing the `const &` from the source and 2) moving it by calling `std::move` instead.
build_systems/pulse_messages/unnecessary_copy.cpp, call_value_or_bad, 66, 9, ERROR, PULSE_UNNECESSARY_COPY_RETURN, the return value `g` is not modified after it is copied in the callee `MyValueOr::value_or` with type `A` at `build_systems/pulse_messages/unnecessary_copy.cpp:57`. Please check if we can avoid the copy, e.g. by changing the return type of `MyValueOr::value_or` or by revising the function body of it.
build_systems/pulse_messages/unnecessary_copy.cpp, call_value_or_bad, 66, 9, ERROR, PULSE_UNNECESSARY_COPY_RETURN, the return value `g` is not modified after it is copied in the callee `MyValueOr::value_or` with type `A` at `build_systems/pulse_messages/unnecessary_copy.cpp:59`. Please check if we can avoid the copy, e.g. by changing the return type of `MyValueOr::value_or` or by revising the function body of it.
build_systems/pulse_messages/unnecessary_copy.cpp, ns::creates_copy<A>, 72, 1, ERROR, PULSE_CONST_REFABLE, Function parameter `a` with type `A` is passed by-value but not modified inside the function on line 72. This might result in an unnecessary copy at the callsite of this function. Consider changing the type of this function parameter to `const &`.
build_systems/pulse_messages/unnecessary_copy.cpp, intermediate_copy_via_model_bad, 77, 1, ERROR, PULSE_CONST_REFABLE, Function parameter `arr` with type `A` is passed by-value but not modified inside the function on line 77. This might result in an unnecessary copy at the callsite of this function. Consider changing the type of this function parameter to `const &`.
build_systems/pulse_messages/unnecessary_copy.cpp, intermediate_copy_via_model_bad, 78, 12, ERROR, PULSE_UNNECESSARY_COPY_INTERMEDIATE, An intermediate with type `A` is copied on line 78. To avoid the copy, try moving it by calling `std::move` instead.
build_systems/pulse_messages/unnecessary_copy.cpp, intermediate_copy_via_model_bad, 79, 7, ERROR, PULSE_UNNECESSARY_COPY_INTERMEDIATE, variable `arr` with type `A&` is copied unnecessarily into an intermediate on line 79. To avoid the copy, try moving it by calling `std::move` instead.
build_systems/pulse_messages/unnecessary_copy.cpp, call_get_optional_value_bad, 86, 22, ERROR, PULSE_UNNECESSARY_COPY_OPTIONAL, variable `x` with type `A&` is copied by Optional value construction unnecessarily into an intermediate on line 86. To avoid the copy, try moving it by calling `std::move` instead or changing the callee's type.
build_systems/pulse_messages/use_after_free.c, uaf_intraprocedural_bad, 12, 11, ERROR, USE_AFTER_FREE, accessing memory that was invalidated by call to `free()` on line 11.
build_systems/pulse_messages/use_after_free.c, free_wrapper_uaf_bad, 19, 11, ERROR, USE_AFTER_FREE, accessing memory that was invalidated by call to `free()` during the call to `free_wrapper()` on line 18.
build_systems/pulse_messages/use_after_free.c, uaf_via_deref_bad, 26, 3, ERROR, USE_AFTER_FREE, call to `deref_int()` eventually accesses memory that was invalidated by call to `free()` on line 25.
build_systems/pulse_messages/use_after_free.c, uaf_via_deref_and_free_wrapper_bad, 31, 3, ERROR, USE_AFTER_FREE, call to `deref_int()` eventually accesses memory that was invalidated by call to `free()` during the call to `free_wrapper()` on line 30.
