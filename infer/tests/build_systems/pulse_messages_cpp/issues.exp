build_systems/pulse_messages_cpp/optional.cpp, optional_empty_access::intraprocedural_bad, 13, 10, ERROR, OPTIONAL_EMPTY_ACCESS, accessing `foo.__infer_backing_value` that is assigned an empty value on line 12., 
build_systems/pulse_messages_cpp/optional.cpp, optional_empty_access::empty_via_return_bad, 20, 10, ERROR, OPTIONAL_EMPTY_ACCESS, accessing `o.__infer_backing_value` that is assigned an empty value during the call to `optional_empty_access::return_empty()` on line 19., 
build_systems/pulse_messages_cpp/optional.cpp, optional_empty_access::via_access_bad, 27, 3, ERROR, OPTIONAL_EMPTY_ACCESS, call to `optional_empty_access::access()` eventually accesses `o.__infer_backing_value` that is assigned an empty value on line 26., 
build_systems/pulse_messages_cpp/optional.cpp, optional_empty_access::empty_via_return_via_access_bad, 32, 3, ERROR, OPTIONAL_EMPTY_ACCESS, call to `optional_empty_access::access()` eventually accesses `p.__infer_backing_value` that is assigned an empty value during the call to `optional_empty_access::return_empty()` on line 31., 
build_systems/pulse_messages_cpp/optional.cpp, optional_empty_access::latent, 38, 13, ERROR, OPTIONAL_EMPTY_ACCESS_LATENT, accessing `foo.__infer_backing_value` that is assigned an empty value on line 37., 
build_systems/pulse_messages_cpp/optional.cpp, optional_empty_access::make_latent_manifest, 48, 31, ERROR, OPTIONAL_EMPTY_ACCESS, The call to `optional_empty_access::propagate_latent_3_latent` ends up calling `optional_empty_access::latent` (after 2 more calls) and may trigger the following issue: call to `optional_empty_access::propagate_latent_3_latent()` eventually accesses `foo.__infer_backing_value` that is assigned an empty value during the call to `optional_empty_access::propagate_latent_3_latent()` on line 48., 
build_systems/pulse_messages_cpp/readonly_shared_ptr_param.cpp, read_shared_ptr_param, 11, 1, ERROR, PULSE_READONLY_SHARED_PTR_PARAM, Function parameter `x` is passed as a shared pointer but its lifetime is not extended inside the function on line 11. At the callsite, this might cause a potentially expensive unnecessary copy of the shared pointer, especially when many number of threads are sharing it., Pass the raw pointer instead and change its usages if necessary at line 14.
build_systems/pulse_messages_cpp/readonly_shared_ptr_param.cpp, multiple_read_shared_ptr_param, 17, 1, ERROR, PULSE_READONLY_SHARED_PTR_PARAM, Function parameter `x` is passed as a shared pointer but its lifetime is not extended inside the function on line 17. At the callsite, this might cause a potentially expensive unnecessary copy of the shared pointer, especially when many number of threads are sharing it., Pass the raw pointer instead and change its usages if necessary at line 19, line 21.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, copy_decl_bad, 21, 14, ERROR, PULSE_UNNECESSARY_COPY, copied variable `cpy` is not modified after it is copied from `get_a_ref()` on line 21., To avoid the copy, use reference `&`. If this copy was intentional, call `folly::copy` to make it explicit and hence suppress the warning.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, copy_assignment_bad, 26, 1, ERROR, PULSE_CONST_REFABLE, Function parameter `source` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites., Change the type of the parameter to `const &`.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, copy_assignment_bad, 28, 3, ERROR, PULSE_UNNECESSARY_COPY_ASSIGNMENT, copy assigned variable `c` is not modified after it is copied from `source` on line 28., To avoid the copy, call `std::move` instead. If this copy was intentional, call `folly::copy` to make it explicit and hence suppress the warning.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, Test::unnecessary_copy_moveable_bad, 34, 47, ERROR, PULSE_UNNECESSARY_COPY_ASSIGNMENT_MOVABLE, `a` is copy assigned into field `mem_a` but is not modified afterwards., Rather than copying into the field, move into it instead.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, Test::intermediate_member_field_copy_bad, 38, 33, ERROR, PULSE_UNNECESSARY_COPY_INTERMEDIATE, variable `&a` is copied into an intermediate and is never modified., To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, get_size, 42, 1, ERROR, PULSE_CONST_REFABLE, Function parameter `a` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites., Change the type of the parameter to `const &`.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, call_value_or_bad, 66, 9, ERROR, PULSE_UNNECESSARY_COPY_RETURN, the return value `g` is not modified after it is copied in the callee `MyValueOr::value_or` at `build_systems/pulse_messages_cpp/unnecessary_copy.cpp:57`., Either change the return type of `MyValueOr::value_or` or revise the function body.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, call_value_or_bad, 66, 9, ERROR, PULSE_UNNECESSARY_COPY_RETURN, the return value `g` is not modified after it is copied in the callee `MyValueOr::value_or` at `build_systems/pulse_messages_cpp/unnecessary_copy.cpp:59`., Either change the return type of `MyValueOr::value_or` or revise the function body.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, ns::creates_copy<A>, 72, 1, ERROR, PULSE_CONST_REFABLE, Function parameter `a` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites., Change the type of the parameter to `const &`.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, intermediate_copy_via_model_bad, 77, 1, ERROR, PULSE_CONST_REFABLE, Function parameter `arr` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites., Change the type of the parameter to `const &`.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, intermediate_copy_via_model_bad, 78, 12, ERROR, PULSE_UNNECESSARY_COPY_INTERMEDIATE, An intermediate is copied on line 78., To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, intermediate_copy_via_model_bad, 79, 7, ERROR, PULSE_UNNECESSARY_COPY_INTERMEDIATE, variable `arr` is copied into an intermediate and is never modified., To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, call_get_optional_value_bad, 86, 22, ERROR, PULSE_UNNECESSARY_COPY_OPTIONAL, variable `x` is copied by Optional value construction into an intermediate and is never modified., To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, UnMovable::unnecessary_copy_assignment_const_bad, 97, 5, ERROR, PULSE_UNNECESSARY_COPY_ASSIGNMENT_CONST, `vec` is copy assigned into field `vec_` but is not modified afterwards., Rather than copying into the field, first remove `const` qualifier from the source and then move into it instead.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, no_move_intermediate_bad, 105, 7, ERROR, PULSE_UNNECESSARY_COPY_INTERMEDIATE, The return value from std::move() is copied unnecessarily  on line 105., Even though `std::move` is called, nothing is actually getting moved (e.g. the type doesn't have a move operation) so make sure the copy is expected.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, ConstTest::unnecessary_copy_intermediate_const_bad, 112, 3, ERROR, PULSE_CONST_REFABLE, Function parameter `my_a` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites., Change the type of the parameter to `const &`.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, ConstTest::unnecessary_copy_intermediate_const_bad, 113, 21, ERROR, PULSE_UNNECESSARY_COPY_INTERMEDIATE_CONST, variable `my_a` is copied into an intermediate and is never modified., To avoid the copy, either 1) remove the `const` from the source and call `std::move` instead or 2) change the callee's parameter type to `const &`.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, ConstTest::unnecessary_copy_intermediate_const_move_bad, 117, 21, ERROR, PULSE_UNNECESSARY_COPY_INTERMEDIATE_CONST, The return value from std::move() is copied unnecessarily  on line 117., Even though `std::move` is called, nothing is actually getting moved (e.g. it is being called on a `const` which resolves to the copy operation) so make sure the copy is expected.
build_systems/pulse_messages_cpp/unnecessary_copy.cpp, ConstTest::unnecessary_copy_assignment_const_move_bad, 121, 5, ERROR, PULSE_UNNECESSARY_COPY_ASSIGNMENT_CONST, `std::move()` is copy assigned into field `test_field` but is not modified afterwards., Even though `std::move` is called, nothing is actually getting moved (e.g. it is being called on a `const` which resolves to the copy operation) so make sure the copy is expected.
