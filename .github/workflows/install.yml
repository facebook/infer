name: Install

on:
  - push
  - pull_request

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - macOS-latest
          - ubuntu-latest
        ocaml-version:
          - 4.09.1

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Use OCaml ${{ matrix.ocaml-version }}
        uses: avsm/setup-ocaml@v1
        with:
          ocaml-version: ${{ matrix.ocaml-version }}

      - name: Restore opam cache
        uses: actions/cache@v2
        with:
          path: ${HOME}/.opam
          key: ${{ runner.os }}-${{ hashFiles('opam.locked') }}

      - name: Install Required Brew Packages for MacOS
        run: brew install pkg-config automake jq
        if: runner.os == 'macOS'

      - name: Fetch clang Release
        run: |
          REPO="facebook/facebook-clang-plugins"
          URL="https://api.github.com/repos/$REPO"

          CLANGFILE="clang-install-${{ matrix.os }}.tar.gz"

          RELEASE_INFO="$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$URL/releases/latest")"
          if ! ASSET_ID="$(jq ".assets | map(select(.name == \"$CLANGFILE\"))[0].id" <<< "$RELEASE_INFO")"; then
              echo "$RELEASE_INFO"
              exit 1
          fi

          if [[ -z "$ASSET_ID" || "$ASSET_ID" == "null" ]]; then
              echo "Could not find asset ID" >&2
              exit 1
          fi

          curl -J -L "$URL/releases/assets/$ASSET_ID" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/octet-stream" \
              -o "$CLANGFILE"

      - run: tar -xzf clang-install-${{ matrix.os }}.tar.gz -C facebook-clang-plugins/clang/

      # let the build run with c analyzers enabled
      - run: sed -i -e '/"--disable-c-analyzers"/d' opam opam.locked
      - run: ./facebook-clang-plugins/clang/setup.sh --only-record-install

      # ensure infer isn't installed in this switch, then deal with dependencies
      - run: opam remove infer || true

      - run: opam update --upgrade

      - run: opam pin add --no-action infer .

      - run: opam depext --update infer;

      - run: opam install --deps-only infer

      - run: opam install infer

      - name: Test infer
        run: |
          eval $(opam env)

          echo -e "#include <stdio.h> \n int main() { int *s = NULL; *s = 42; return 0; } " > FailingTest.c
          echo -e "#include <stdio.h> \n int main() { int *s = NULL; if (s != NULL) { *s = 42; } return 0; }" > PassingTest.c

          # first command should exit with status 2
          infer --fail-on-issue -P -- clang -c FailingTest.c || if [[ $? -ne 2 ]]; then exit 1; fi
          infer --fail-on-issue -P -- clang -c PassingTest.c

          echo 'class FailingTest {' >> FailingTest.java
          echo '  String mayReturnNull(int i) {' >> FailingTest.java
          echo '    if (i > 0) {' >> FailingTest.java
          echo '      return "Hello, Infer!";' >> FailingTest.java
          echo '    }' >> FailingTest.java
          echo '    return null;' >> FailingTest.java
          echo '  }' >> FailingTest.java
          echo '  int mayCauseNPE() {' >> FailingTest.java
          echo '    String s = mayReturnNull(0);' >> FailingTest.java
          echo '    return s.length();' >> FailingTest.java
          echo '  }' >> FailingTest.java
          echo '}' >> FailingTest.java

          echo "  class PassingTest {" >> PassingTest.java
          echo "    String mayReturnNull(int i) {" >> PassingTest.java
          echo "      if (i > 0) {" >> PassingTest.java
          echo '        return "Hello, Infer!";' >> PassingTest.java
          echo "      }" >> PassingTest.java
          echo "      return null;" >> PassingTest.java
          echo "    }" >> PassingTest.java
          echo "    int mayCauseNPE() {" >> PassingTest.java
          echo "      String s = mayReturnNull(0);" >> PassingTest.java
          echo "      return s == null ? 0 : s.length();" >> PassingTest.java
          echo "    }" >> PassingTest.java
          echo "  }" >> PassingTest.java

          # first command should exit with status 2
          infer --fail-on-issue -P -- javac FailingTest.java || if [[ $? -ne 2 ]]; then exit 1; fi
          infer --fail-on-issue -P -- javac PassingTest.java
