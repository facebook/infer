{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "version": "2.0.0",
  "runs": [
    {
      "tool": {
        "name": "Infer"
      },
      "results": [
        {
          "message": {
            "text": "[B1] object `a` last assigned on line 28 could be null and is dereferenced at line 30."
          },
          "level": "warning",
          "ruleId": "NULL_DEREFERENCE",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///java_hello/Hello.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": -1
                }
              }
            }
          ]
        },
        {
          "message": {
            "text": "resource of type `java.io.FileOutputStream` acquired by call to `allocateResource()` at line 118 is not released after line 124."
          },
          "level": "warning",
          "ruleId": "RESOURCE_LEAK",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///java_hello/Hello.java"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": -1
                }
              }
            }
          ]
        },
        {
          "message": {
            "text": "resource of type `java.io.FileOutputStream` acquired to `fos` by call to `FileOutputStream(...)` at line 139 is not released after line 149.\n**Note**: potential exception at line 143"
          },
          "level": "warning",
          "ruleId": "RESOURCE_LEAK",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///java_hello/Hello.java"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": -1
                }
              }
            }
          ]
        },
        {
          "message": {
            "text": "Read/Write race. Non-private method `Hello.TestMethod()` reads without synchronization from `hello.Hello.StaticIntegerField`. Potentially races with write in method `Hello.FieldWrite()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not."
          },
          "level": "warning",
          "ruleId": "THREAD_SAFETY_VIOLATION",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///java_hello/Hello.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": -1
                }
              }
            }
          ]
        },
        {
          "message": {
            "text": "Potential deadlock. `void Hello.lockAThenAddToVector()` (Trace 1) and `void Hello.lockVectorThenA()` (Trace 2) acquire locks `this.vector` in `class hello.Hello` and `hello.Hello.lockA` in `class hello.Hello` in reverse orders."
          },
          "level": "warning",
          "ruleId": "DEADLOCK",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///java_hello/Hello.java"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": -1
                }
              }
            }
          ]
        },
        {
          "message": {
            "text": "Potential deadlock. `void Hello.lockAThenB()` (Trace 1) and `void Hello.lockBThenA()` (Trace 2) acquire locks `hello.Hello.lockB` in `class hello.Hello` and `hello.Hello.lockA` in `class hello.Hello` in reverse orders."
          },
          "level": "warning",
          "ruleId": "DEADLOCK",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///java_hello/Hello.java"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": -1
                }
              }
            }
          ]
        },
        {
          "message": {
            "text": "Potential deadlock. `void Hello$1.run()` (Trace 1) and `void Hello.deadlock()` (Trace 2) acquire locks `hello.Hello.locker2` in `class hello.Hello` and `hello.Hello.locker1` in `class hello.Hello` in reverse orders."
          },
          "level": "warning",
          "ruleId": "DEADLOCK",
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "file:///java_hello/Hello.java"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": -1
                }
              }
            }
          ]
        }
      ],
      "resources": {
        "rules": {
          "NULL_DEREFERENCE": {
            "id": "NULL_DEREFERENCE",
            "name": {
              "text": "Null Dereference"
            }
          },
          "RESOURCE_LEAK": {
            "id": "RESOURCE_LEAK",
            "name": {
              "text": "Resource Leak"
            }
          },
          "THREAD_SAFETY_VIOLATION": {
            "id": "THREAD_SAFETY_VIOLATION",
            "name": {
              "text": "Thread Safety Violation"
            }
          },
          "DEADLOCK": {
            "id": "DEADLOCK",
            "name": {
              "text": "Deadlock"
            }
          }
        }
      },
      "files": {
        "file:///java_hello/Hello.java": {
          "fileLocation": {
            "uri": "file:///java_hello/Hello.java"
          },
        },
        "file:///java_hello/Pointers.java": {
          "fileLocation": {
            "uri": "file:///java_hello/Pointers.java"
          },
        },
        "file:///java_hello/Resources.java": {
          "fileLocation": {
            "uri": "file:///java_hello/Resources.java"
          },
        }
      }
    }
  ]
}