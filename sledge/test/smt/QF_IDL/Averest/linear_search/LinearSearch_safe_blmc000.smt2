(set-info :smt-lib-version 2.6)
(set-logic QF_IDL)
(set-info :source |The Averest Framework (http://www.averest.org)|)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun cvclZero () Int)
(declare-fun F0 () Int)
(declare-fun F2 () Int)
(declare-fun F4 () Int)
(declare-fun F6 () Int)
(declare-fun F8 () Int)
(declare-fun F14 () Int)
(declare-fun F16 () Int)
(declare-fun F18 () Int)
(declare-fun F20 () Int)
(declare-fun F22 () Int)
(declare-fun F30 () Int)
(declare-fun F31 () Int)
(declare-fun F32 () Int)
(declare-fun F33 () Int)
(declare-fun F34 () Int)
(declare-fun F37 () Int)
(declare-fun F38 () Int)
(declare-fun F39 () Int)
(declare-fun F40 () Int)
(declare-fun F41 () Int)
(declare-fun F62 () Int)
(declare-fun F63 () Int)
(declare-fun F64 () Int)
(declare-fun F65 () Int)
(declare-fun F66 () Int)
(declare-fun F70 () Int)
(declare-fun F71 () Int)
(declare-fun F72 () Int)
(declare-fun F73 () Int)
(declare-fun F74 () Int)
(declare-fun F77 () Int)
(declare-fun F78 () Int)
(declare-fun F79 () Int)
(declare-fun F80 () Int)
(declare-fun F81 () Int)
(declare-fun P10 () Bool)
(declare-fun P12 () Bool)
(declare-fun P24 () Bool)
(declare-fun P26 () Bool)
(declare-fun P28 () Bool)
(declare-fun P35 () Bool)
(declare-fun P36 () Bool)
(declare-fun P42 () Bool)
(declare-fun P43 () Bool)
(declare-fun P44 () Bool)
(declare-fun P60 () Bool)
(declare-fun P61 () Bool)
(declare-fun P67 () Bool)
(declare-fun P68 () Bool)
(declare-fun P69 () Bool)
(declare-fun P75 () Bool)
(declare-fun P76 () Bool)
(declare-fun P82 () Bool)
(declare-fun P83 () Bool)
(declare-fun P84 () Bool)
(assert (let ((?v_0 (not P10)) (?v_3 (and P10 P24))) (let ((?v_8 (and ?v_0 ?v_3)) (?v_2 (and P10 P26))) (let ((?v_1 (and ?v_8 ?v_2)) (?v_10 (and P10 ?v_3))) (let ((?v_4 (and ?v_2 ?v_10)) (?v_6 (not ?v_3))) (let ((?v_13 (and ?v_0 ?v_6))) (let ((?v_5 (and ?v_2 ?v_13)) (?v_15 (and P10 ?v_6))) (let ((?v_7 (and ?v_2 ?v_15)) (?v_11 (not ?v_2))) (let ((?v_9 (and ?v_8 ?v_11)) (?v_12 (and ?v_10 ?v_11)) (?v_14 (and ?v_13 ?v_11)) (?v_16 (and ?v_15 ?v_11)) (?v_28 (and P82 P75))) (let ((?v_31 (and ?v_28 P75)) (?v_27 (and P83 P75))) (let ((?v_37 (not ?v_27))) (let ((?v_39 (and ?v_31 ?v_37)) (?v_29 (not P75)) (?v_34 (not ?v_28))) (let ((?v_40 (and ?v_34 ?v_29))) (let ((?v_33 (and ?v_27 ?v_40)) (?v_36 (and ?v_28 ?v_29))) (let ((?v_30 (and ?v_27 ?v_36)) (?v_32 (and ?v_27 ?v_31)) (?v_42 (and ?v_34 P75))) (let ((?v_35 (and ?v_27 ?v_42)) (?v_38 (and ?v_36 ?v_37)) (?v_41 (and ?v_40 ?v_37)) (?v_43 (and ?v_42 ?v_37)) (?v_44 (and P84 P75))) (let ((?v_48 (not (= ?v_44 (and ?v_27 ?v_28)))) (?v_51 (not (= ?v_27 ?v_28))) (?v_61 (not P35)) (?v_69 (and P35 P43))) (let ((?v_63 (not ?v_69)) (?v_66 (and P35 P42))) (let ((?v_64 (not ?v_66))) (let ((?v_70 (and P35 ?v_64))) (let ((?v_62 (and ?v_63 ?v_70)) (?v_72 (and ?v_61 ?v_64))) (let ((?v_65 (and ?v_63 ?v_72)) (?v_74 (and P35 ?v_66))) (let ((?v_67 (and ?v_63 ?v_74)) (?v_76 (and ?v_61 ?v_66))) (let ((?v_68 (and ?v_63 ?v_76)) (?v_71 (and ?v_69 ?v_70)) (?v_73 (and ?v_69 ?v_72)) (?v_75 (and ?v_69 ?v_74)) (?v_77 (and ?v_69 ?v_76)) (?v_84 (and P35 P44)) (?v_83 (not (= ?v_66 ?v_69)))) (let ((?v_85 (not (= (and ?v_66 ?v_69) ?v_84))) (?v_25 (= (- F2 F0) 0)) (?v_26 (= (- F22 F14) 0)) (?v_23 (= (- F4 F0) 0)) (?v_24 (= (- F22 F16) 0)) (?v_22 (= (- F6 F0) 0)) (?v_21 (= (- F22 F18) 0)) (?v_19 (= (- F8 F0) 0)) (?v_20 (= (- F22 F20) 0))) (let ((?v_18 (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (and ?v_25 (and ?v_0 ?v_1)) (and (= (- F22 F2) 0) (and P10 ?v_1))) (and (= (- F14 F0) 0) (and ?v_0 ?v_4))) (and ?v_26 (and P10 ?v_4))) (and ?v_23 (and ?v_0 ?v_5))) (and (= (- F22 F4) 0) (and P10 ?v_5))) (and (= (- F16 F0) 0) (and ?v_0 ?v_7))) (and ?v_24 (and P10 ?v_7))) (and ?v_22 (and ?v_0 ?v_9))) (and (= (- F22 F6) 0) (and P10 ?v_9))) (and (= (- F18 F0) 0) (and ?v_0 ?v_12))) (and ?v_21 (and P10 ?v_12))) (and (and ?v_0 ?v_14) ?v_19)) (and (and P10 ?v_14) (= (- F22 F8) 0))) (and (and ?v_0 ?v_16) (= (- F20 F0) 0))) (and (and P10 ?v_16) ?v_20)))) (let ((?v_17 (not (and (not (and P10 P28)) ?v_18)))) (let ((?v_60 (or (not (or (and P12 ?v_17) (and ?v_0 ?v_17))) ?v_18)) (?v_56 (= (- F72 F70) 0)) (?v_54 (= (- F71 F70) 0)) (?v_55 (= (- F81 F77) 0)) (?v_57 (= (- F81 F78) 0)) (?v_59 (= (- F73 F70) 0)) (?v_58 (= (- F81 F79) 0)) (?v_52 (= (- F74 F70) 0)) (?v_53 (= (- F81 F80) 0))) (let ((?v_46 (and (or (or (or (or (or (or (and (and ?v_39 ?v_29) (= (- F79 F70) 0)) (or (or (or (or (or (or (and ?v_56 (and ?v_33 ?v_29)) (or (or (or (and ?v_54 (and ?v_30 ?v_29)) (and (= (- F81 F71) 0) (and ?v_30 P75))) (and (and ?v_32 ?v_29) (= (- F77 F70) 0))) (and ?v_55 (and ?v_32 P75)))) (and (= (- F81 F72) 0) (and ?v_33 P75))) (and (= (- F78 F70) 0) (and ?v_35 ?v_29))) (and ?v_57 (and ?v_35 P75))) (and ?v_59 (and ?v_38 ?v_29))) (and (= (- F81 F73) 0) (and ?v_38 P75)))) (and (and ?v_39 P75) ?v_58)) (and (and ?v_41 ?v_29) ?v_52)) (and (and ?v_41 P75) (= (- F81 F74) 0))) (and (and ?v_43 ?v_29) (= (- F80 F70) 0))) (and (and ?v_43 P75) ?v_53)) (not ?v_44)))) (let ((?v_45 (and ?v_46 P76))) (let ((?v_49 (not ?v_45)) (?v_47 (and ?v_46 ?v_29))) (let ((?v_50 (not ?v_47)) (?v_92 (= (- F41 F40) 0)) (?v_93 (= (- F34 F30) 0)) (?v_91 (= (- F41 F39) 0)) (?v_90 (= (- F33 F30) 0)) (?v_88 (= (- F41 F38) 0)) (?v_89 (= (- F32 F30) 0)) (?v_86 (= (- F41 F37) 0)) (?v_87 (= (- F31 F30) 0))) (let ((?v_78 (and (or (and ?v_92 (and P35 ?v_62)) (or (and (= (- F40 F30) 0) (and ?v_61 ?v_62)) (or (and (= (- F41 F34) 0) (and P35 ?v_65)) (or (and ?v_93 (and ?v_61 ?v_65)) (or (and ?v_91 (and P35 ?v_67)) (or (and (and ?v_61 ?v_67) (= (- F39 F30) 0)) (or (and (and P35 ?v_68) (= (- F41 F33) 0)) (or (and ?v_90 (and ?v_61 ?v_68)) (or (and ?v_88 (and P35 ?v_71)) (or (and (and ?v_61 ?v_71) (= (- F38 F30) 0)) (or (and (and P35 ?v_73) (= (- F41 F32) 0)) (or (and ?v_89 (and ?v_61 ?v_73)) (or (and ?v_86 (and P35 ?v_75)) (or (and (and ?v_61 ?v_75) (= (- F37 F30) 0)) (or (and (and P35 ?v_77) (= (- F41 F31) 0)) (and ?v_87 (and ?v_61 ?v_77))))))))))))))))) (not ?v_84)))) (let ((?v_79 (and ?v_61 ?v_78)) (?v_80 (and P36 ?v_78))) (let ((?v_81 (not ?v_79)) (?v_82 (not ?v_80))) (or (not (or ?v_60 (not (and (and (and (and (and (= (- cvclZero F22) 0) (and (= (- cvclZero F20) 0) (and (= (- cvclZero F18) 0) (and (and (= (- cvclZero F14) 0) (and ?v_0 (not P12))) (= (- cvclZero F16) 0))))) (not P24)) (not P26)) (not P28)) (or (or (and ?v_0 ?v_19) (and P10 ?v_20)) (or (or (and P10 ?v_21) (and ?v_0 ?v_22)) (or (or (and ?v_0 ?v_23) (and P10 ?v_24)) (or (and ?v_0 ?v_25) (and P10 ?v_26))))))))) (and (and (and (= (or (and (or (and ?v_45 ?v_48) (and ?v_44 ?v_49)) ?v_50) (and ?v_47 ?v_48)) P69) (and (= (or (and (or (and ?v_51 ?v_45) (and ?v_27 ?v_49)) ?v_50) (and ?v_51 ?v_47)) P68) (and (= (or (and (or (and ?v_49 ?v_28) (and ?v_45 ?v_34)) ?v_50) (and ?v_47 ?v_34)) P67) (and (and (or (and (= (- F74 F65) 0) ?v_29) (and (= (- F80 F65) 0) P75)) (and (or (and (= (- F73 F64) 0) ?v_29) (and (= (- F79 F64) 0) P75)) (and (and (or (and (= (- F77 F62) 0) P75) (and (= (- F71 F62) 0) ?v_29)) (and (= (or ?v_47 ?v_45) P61) P60)) (or (and (= (- F72 F63) 0) ?v_29) (and (= (- F78 F63) 0) P75))))) (or (and (= (- F81 F66) 0) P75) (and (= (- F70 F66) 0) ?v_29)))))) (and (or (or (and ?v_52 ?v_29) (and ?v_53 P75)) (or (or (or (and ?v_54 ?v_29) (and ?v_55 P75)) (or (and ?v_56 ?v_29) (and ?v_57 P75))) (or (and ?v_58 P75) (and ?v_59 ?v_29)))) (and (not P84) (and (and (and (= (- cvclZero F81) 0) (and (= (- cvclZero F80) 0) (and (= (- cvclZero F79) 0) (and (= (- cvclZero F78) 0) (and (= (- cvclZero F77) 0) (and (not P76) ?v_29)))))) (not P82)) (not P83))))) (not (or ?v_60 (not (and (and (and (and (and (and (and (and (and (or (and P35 (= (- F37 F14) 0)) (and ?v_61 (= (- F31 F14) 0))) (and P10 (= P12 (or ?v_79 ?v_80)))) (or (and P35 (= (- F38 F16) 0)) (and ?v_61 (= (- F32 F16) 0)))) (or (and P35 (= (- F39 F18) 0)) (and ?v_61 (= (- F33 F18) 0)))) (or (and P35 (= (- F40 F20) 0)) (and ?v_61 (= (- F34 F20) 0)))) (or (and ?v_61 (= (- F30 F22) 0)) (and P35 (= (- F41 F22) 0)))) (= P24 (or (and ?v_64 ?v_79) (and ?v_81 (or (and ?v_64 ?v_80) (and ?v_66 ?v_82)))))) (= P26 (or (and ?v_79 ?v_83) (and ?v_81 (or (and ?v_69 ?v_82) (and ?v_80 ?v_83)))))) (= P28 (or (and ?v_85 ?v_79) (and (or (and ?v_84 ?v_82) (and ?v_85 ?v_80)) ?v_81)))) (and (or (or (or (or (and ?v_86 P35) (and ?v_87 ?v_61)) (or (and P35 ?v_88) (and ?v_61 ?v_89))) (or (and ?v_61 ?v_90) (and P35 ?v_91))) (or (and P35 ?v_92) (and ?v_61 ?v_93))) (and (not P44) (and (not P43) (and (not P42) (and (and (and (and (= (- cvclZero F38) 0) (and (and ?v_61 (not P36)) (= (- cvclZero F37) 0))) (= (- cvclZero F39) 0)) (= (- cvclZero F40) 0)) (= (- cvclZero F41) 0)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
