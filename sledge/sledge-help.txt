SLEdge static analyzer

  sledge SUBCOMMAND

The [-trace <spec>] argument of each subcommand enables debug tracing according to <spec>, which is a sequence of module and function names separated by + or -. For example, M-M.f enables all tracing in the M module except the M.f function. The <spec> value * enables all debug tracing.

=== subcommands ===

  buck                       . integration with Buck
  . bitcode                  . report bitcode files in buck target
  . link                     . link buck target to LLVM bitcode
  llvm                       . integration with LLVM
  . analyze                  . analyze LLVM bitcode
  . translate                . translate LLVM bitcode to LLAIR
  . disassemble              . translate LLVM bitcode to LLAIR and print in
                               textual form
  analyze                    . analyze LLAIR code
  validate                   . validate goal trace witness
  disassemble                . print LLAIR code in textual form
  smt                        . process SMT-LIB benchmarks
  version                    . print version information
  help                       . explain a given subcommand (perhaps recursively)


====== sledge buck ======

integration with Buck

  sledge buck SUBCOMMAND

Code can be provided by a buck build target, such as //fully/qualified/build:target. The mechanism used to integrate with buck uses the arguments passed to the linker, so the target must specify a binary that will be linked, not for instance a library archive. Sledge passes the --config sledge.build=True flag to buck, which can be used to configure buck targets for sledge.

=== subcommands ===

  bitcode                    . report bitcode files in buck target
  link                       . link buck target to LLVM bitcode
  help                       . explain a given subcommand (perhaps recursively)


====== sledge buck bitcode ======

report bitcode files in buck target

  sledge buck bitcode <target>

Build a buck target and report the included bitcode files.

=== flags ===

  [-append-report]           . append to report file
  [-colors]                  . enable printing in colors
  [-margin <cols>]           . wrap debug tracing at <cols> columns
  [-modules <file>]          . write list of bitcode files to <file>, or to
                               standard output if <file> is `-`
  [-report <file>]           . write report sexp to <file>, or to standard error
                               if "-"
  [-trace <spec>]            . enable debug tracing
  [-unbuffered]              . disable buffering of stdout and stderr
  [-help], -?                . print this help text and exit


====== sledge buck link ======

link buck target to LLVM bitcode

  sledge buck link <target>

Link code in a buck target to a single LLVM bitcode module. This also internalizes all symbols except `main` and removes dead code.

=== flags ===

  -bitcode-output <file>     . write linked bitcode to <file>
  [-append-report]           . append to report file
  [-colors]                  . enable printing in colors
  [-fuzzer]                  . add a harness for libFuzzer targets
  [-margin <cols>]           . wrap debug tracing at <cols> columns
  [-modules <file>]          . write list of bitcode files to <file>, or to
                               standard output if <file> is `-`
  [-report <file>]           . write report sexp to <file>, or to standard error
                               if "-"
  [-trace <spec>]            . enable debug tracing
  [-unbuffered]              . disable buffering of stdout and stderr
  [-help], -?                . print this help text and exit


====== sledge llvm ======

integration with LLVM

  sledge llvm SUBCOMMAND

=== subcommands ===

  analyze                    . analyze LLVM bitcode
  translate                  . translate LLVM bitcode to LLAIR
  disassemble                . translate LLVM bitcode to LLAIR and print in
                               textual form
  help                       . explain a given subcommand (perhaps recursively)


====== sledge llvm analyze ======

analyze LLVM bitcode

  sledge llvm analyze <input>

Analyze LLVM bitcode. This is a convenience wrapper for the sequence `sledge llvm translate`; `sledge analyze`.

=== flags ===

  [-O0]                      . optimization level 0
  [-O1]                      . optimization level 1
  [-O2]                      . optimization level 2
  [-O3]                      . optimization level 3
  [-Os]                      . like -O2 with extra optimizations for size
  [-Oz]                      . like -Os but reduces code size further (default)
  [-append-report]           . append to report file
  [-cct-schedule-points]     . context switch only at cct_point calls
  [-colors]                  . enable printing in colors
  [-constprop-branch-inference]
                             . infer integer-constant information from branch
                               conditions during the distance heuristic
                               pre-analysis
  [-domain <string>]         . select abstract domain; must be one of "sh"
                               (default, symbolic heap domain), "globals"
                               (used-globals domain), or "unit" (unit domain)
                               (can be: globals, itv, sh, unit)
  [-dump-bitcode <file>]     . write transformed LLVM bitcode to <file>
  [-dump-query <int>]        . dump solver query <int> and halt
  [-dump-simplify <int>]     . dump simplify query <int> and halt
  [-dump-witness <file>]     . dump goal witness trace to <file>
  [-function-summaries]      . use function summaries (in development)
  [-goal-trace <file>]       . specify a trace to try to explore, in the form of
                               a file containing one LLVM function name per
                               line. If provided, translation avoids inlining
                               traced functions and analysis prioritizes trace
                               progress. When an execution is found that visits
                               each function in order, terminate if
                               "Stop.on_reached_goal" is being traced.
  [-llair-output <file>]     . write generated textual LLAIR to <file>, or to
                               standard output if "-"
  [-loop-bound <int>], -bound
                             . limit execution exploration to <int> loop
                               iterations, a negative bound is never hit and
                               leads to unbounded exploration
  [-margin <cols>]           . wrap debug tracing at <cols> columns
  [-max-disjuncts <int>]     . set an upper bound on the number of
                               constant-return summary disjuncts in the distance
                               heuristic pre-analysis
  [-no-internalize]          . do not internalize all functions except the entry
                               points specified in the config file
  [-no-simplify-states]      . do not simplify states during symbolic execution
  [-no-strong-infer-frame]   . do not fallback to Z3 before failing infer_frame
                               queries
  [-normalize-states]        . normalize states during symbolic execution
  [-output <file>]           . write generated binary LLAIR to <file>
  [-preanalyze-globals]      . pre-analyze global variables used by each
                               function
  [-report <file>]           . write report sexp to <file>, or to standard error
                               if "-"
  [-sample]                  . randomly sample execution paths
  [-seed <int>]              . specify random number generator seed
  [-stats]                   . output performance statistics to stderr
  [-switch-bound <int>], -yield
                             . limit execution exploration to <int> context
                               switches, a negative bound is never hit and leads
                               to unbounded exploration
  [-trace <spec>]            . enable debug tracing
  [-unbuffered]              . disable buffering of stdout and stderr
  [-help], -?                . print this help text and exit


====== sledge llvm translate ======

translate LLVM bitcode to LLAIR

  sledge llvm translate <input>

Translate LLVM bitcode to LLAIR. The <input> file must contain LLVM bitcode in either binary (.bc) or textual (.ll) form.

=== flags ===

  [-O0]                      . optimization level 0
  [-O1]                      . optimization level 1
  [-O2]                      . optimization level 2
  [-O3]                      . optimization level 3
  [-Os]                      . like -O2 with extra optimizations for size
  [-Oz]                      . like -Os but reduces code size further (default)
  [-append-report]           . append to report file
  [-colors]                  . enable printing in colors
  [-constprop-branch-inference]
                             . infer integer-constant information from branch
                               conditions during the distance heuristic
                               pre-analysis
  [-dump-bitcode <file>]     . write transformed LLVM bitcode to <file>
  [-goal-trace <file>]       . specify a trace to try to explore, in the form of
                               a file containing one LLVM function name per
                               line. If provided, translation avoids inlining
                               traced functions and analysis prioritizes trace
                               progress. When an execution is found that visits
                               each function in order, terminate if
                               "Stop.on_reached_goal" is being traced.
  [-llair-output <file>]     . write generated textual LLAIR to <file>, or to
                               standard output if "-"
  [-margin <cols>]           . wrap debug tracing at <cols> columns
  [-max-disjuncts <int>]     . set an upper bound on the number of
                               constant-return summary disjuncts in the distance
                               heuristic pre-analysis
  [-no-internalize]          . do not internalize all functions except the entry
                               points specified in the config file
  [-output <file>]           . write generated binary LLAIR to <file>
  [-report <file>]           . write report sexp to <file>, or to standard error
                               if "-"
  [-trace <spec>]            . enable debug tracing
  [-unbuffered]              . disable buffering of stdout and stderr
  [-help], -?                . print this help text and exit


====== sledge llvm disassemble ======

translate LLVM bitcode to LLAIR and print in textual form

  sledge llvm disassemble <input>

The <input> file must be LLVM bitcode.

=== flags ===

  [-O0]                      . optimization level 0
  [-O1]                      . optimization level 1
  [-O2]                      . optimization level 2
  [-O3]                      . optimization level 3
  [-Os]                      . like -O2 with extra optimizations for size
  [-Oz]                      . like -Os but reduces code size further (default)
  [-append-report]           . append to report file
  [-colors]                  . enable printing in colors
  [-constprop-branch-inference]
                             . infer integer-constant information from branch
                               conditions during the distance heuristic
                               pre-analysis
  [-dump-bitcode <file>]     . write transformed LLVM bitcode to <file>
  [-goal-trace <file>]       . specify a trace to try to explore, in the form of
                               a file containing one LLVM function name per
                               line. If provided, translation avoids inlining
                               traced functions and analysis prioritizes trace
                               progress. When an execution is found that visits
                               each function in order, terminate if
                               "Stop.on_reached_goal" is being traced.
  [-llair-output <file>]     . write generated textual LLAIR to <file>, or to
                               standard output if "-"
  [-margin <cols>]           . wrap debug tracing at <cols> columns
  [-max-disjuncts <int>]     . set an upper bound on the number of
                               constant-return summary disjuncts in the distance
                               heuristic pre-analysis
  [-no-internalize]          . do not internalize all functions except the entry
                               points specified in the config file
  [-output <file>]           . write generated binary LLAIR to <file>
  [-report <file>]           . write report sexp to <file>, or to standard error
                               if "-"
  [-trace <spec>]            . enable debug tracing
  [-unbuffered]              . disable buffering of stdout and stderr
  [-help], -?                . print this help text and exit


====== sledge analyze ======

analyze LLAIR code

  sledge analyze <input>

The <input> file must be binary LLAIR, such as produced by `sledge translate`.

=== flags ===

  [-append-report]           . append to report file
  [-cct-schedule-points]     . context switch only at cct_point calls
  [-colors]                  . enable printing in colors
  [-constprop-branch-inference]
                             . infer integer-constant information from branch
                               conditions during the distance heuristic
                               pre-analysis
  [-domain <string>]         . select abstract domain; must be one of "sh"
                               (default, symbolic heap domain), "globals"
                               (used-globals domain), or "unit" (unit domain)
                               (can be: globals, itv, sh, unit)
  [-dump-query <int>]        . dump solver query <int> and halt
  [-dump-simplify <int>]     . dump simplify query <int> and halt
  [-dump-witness <file>]     . dump goal witness trace to <file>
  [-function-summaries]      . use function summaries (in development)
  [-goal-trace <file>]       . specify a trace to try to explore, in the form of
                               a file containing one LLVM function name per
                               line. If provided, translation avoids inlining
                               traced functions and analysis prioritizes trace
                               progress. When an execution is found that visits
                               each function in order, terminate if
                               "Stop.on_reached_goal" is being traced.
  [-llair-output <file>]     . write generated textual LLAIR to <file>, or to
                               standard output if "-"
  [-loop-bound <int>], -bound
                             . limit execution exploration to <int> loop
                               iterations, a negative bound is never hit and
                               leads to unbounded exploration
  [-margin <cols>]           . wrap debug tracing at <cols> columns
  [-max-disjuncts <int>]     . set an upper bound on the number of
                               constant-return summary disjuncts in the distance
                               heuristic pre-analysis
  [-no-simplify-states]      . do not simplify states during symbolic execution
  [-no-strong-infer-frame]   . do not fallback to Z3 before failing infer_frame
                               queries
  [-normalize-states]        . normalize states during symbolic execution
  [-preanalyze-globals]      . pre-analyze global variables used by each
                               function
  [-report <file>]           . write report sexp to <file>, or to standard error
                               if "-"
  [-sample]                  . randomly sample execution paths
  [-seed <int>]              . specify random number generator seed
  [-stats]                   . output performance statistics to stderr
  [-switch-bound <int>], -yield
                             . limit execution exploration to <int> context
                               switches, a negative bound is never hit and leads
                               to unbounded exploration
  [-trace <spec>]            . enable debug tracing
  [-unbuffered]              . disable buffering of stdout and stderr
  [-help], -?                . print this help text and exit


====== sledge validate ======

validate goal trace witness

  sledge validate <input>

The <input> file must have been produced by `sledge analyze -dump-witness`.

=== flags ===

  [-append-report]           . append to report file
  [-colors]                  . enable printing in colors
  [-jobs <int>], -j          . use the given number of parallel processes
  [-margin <cols>]           . wrap debug tracing at <cols> columns
  [-report <file>]           . write report sexp to <file>, or to standard error
                               if "-"
  [-trace <spec>]            . enable debug tracing
  [-unbuffered]              . disable buffering of stdout and stderr
  [-help], -?                . print this help text and exit


====== sledge disassemble ======

print LLAIR code in textual form

  sledge disassemble <input>

The <input> file must be LLAIR code, as produced by `sledge llvm translate`.

=== flags ===

  [-append-report]           . append to report file
  [-colors]                  . enable printing in colors
  [-constprop-branch-inference]
                             . infer integer-constant information from branch
                               conditions during the distance heuristic
                               pre-analysis
  [-goal-trace <file>]       . specify a trace to try to explore, in the form of
                               a file containing one LLVM function name per
                               line. If provided, translation avoids inlining
                               traced functions and analysis prioritizes trace
                               progress. When an execution is found that visits
                               each function in order, terminate if
                               "Stop.on_reached_goal" is being traced.
  [-llair-output <file>]     . write generated textual LLAIR to <file>, or to
                               standard output if "-"
  [-margin <cols>]           . wrap debug tracing at <cols> columns
  [-max-disjuncts <int>]     . set an upper bound on the number of
                               constant-return summary disjuncts in the distance
                               heuristic pre-analysis
  [-report <file>]           . write report sexp to <file>, or to standard error
                               if "-"
  [-trace <spec>]            . enable debug tracing
  [-unbuffered]              . disable buffering of stdout and stderr
  [-help], -?                . print this help text and exit


====== sledge smt ======

process SMT-LIB benchmarks

  sledge smt <input>

The <input> file is interpreted as an SMT-LIB 2 benchmark.

=== flags ===

  [-append-report]           . append to report file
  [-colors]                  . enable printing in colors
  [-margin <cols>]           . wrap debug tracing at <cols> columns
  [-report <file>]           . write report sexp to <file>, or to standard error
                               if "-"
  [-trace <spec>]            . enable debug tracing
  [-unbuffered]              . disable buffering of stdout and stderr
  [-help], -?                . print this help text and exit


====== sledge version ======

print version information

  sledge version 

=== flags ===

  [-build-info]              . print build info for this build
  [-version]                 . print the version of this build
  [-help], -?                . print this help text and exit


====== sledge help ======

explain a given subcommand (perhaps recursively)

  sledge help [SUBCOMMAND]

=== flags ===

  [-expand-dots]             . expand subcommands in recursive help
  [-flags]                   . show flags as well in recursive help
  [-recursive]               . show subcommands of subcommands, etc.
  [-help], -?                . print this help text and exit

