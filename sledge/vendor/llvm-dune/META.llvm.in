version = "11.0.0"
description = "LLVM OCaml bindings"
directory(-llvm.static) = "shared"
archive(byte, -llvm.static) = "llvm_shared.cma"
archive(native, -llvm.static) = "llvm_shared.cmxa"
directory(llvm.static) = "static"
archive(byte, llvm.static) = "llvm_static.cma"
archive(native, llvm.static) = "llvm_static.cmxa"

package "analysis" (
    requires = "llvm"
    version = "11.0.0"
    description = "Intermediate representation analysis for LLVM"
    directory(-llvm.static) = "shared"
    archive(byte, -llvm.static) = "llvm_analysis_shared.cma"
    archive(native, -llvm.static) = "llvm_analysis_shared.cmxa"
    directory(llvm.static) = "static"
    archive(byte, llvm.static) = "llvm_analysis_static.cma"
    archive(native, llvm.static) = "llvm_analysis_static.cmxa"
)

package "bitreader" (
    requires = "llvm"
    version  = "11.0.0"
    description = "Bitcode reader for LLVM"
    directory(-llvm.static) = "shared"
    archive(byte, -llvm.static) = "llvm_bitreader_shared.cma"
    archive(native, -llvm.static) = "llvm_bitreader_shared.cmxa"
    directory(llvm.static) = "static"
    archive(byte, llvm.static) = "llvm_bitreader_static.cma"
    archive(native, llvm.static) = "llvm_bitreader_static.cmxa"
)

package "bitwriter" (
    requires = "llvm,unix"
    version = "11.0.0"
    description = "Bitcode writer for LLVM"
    directory(-llvm.static) = "shared"
    archive(byte, -llvm.static) = "llvm_bitwriter_shared.cma"
    archive(native, -llvm.static) = "llvm_bitwriter_shared.cmxa"
    directory(llvm.static) = "static"
    archive(byte, llvm.static) = "llvm_bitwriter_static.cma"
    archive(native, llvm.static) = "llvm_bitwriter_static.cmxa"
)

package "executionengine" (
    requires = "llvm,llvm.target,ctypes.foreign"
    version = "11.0.0"
    description = "JIT and Interpreter for LLVM"
    directory(-llvm.static) = "shared"
    archive(byte, -llvm.static) = "llvm_executionengine_shared.cma"
    archive(native, -llvm.static) = "llvm_executionengine_shared.cmxa"
    directory(llvm.static) = "static"
    archive(byte, llvm.static) = "llvm_executionengine_static.cma"
    archive(native, llvm.static) = "llvm_executionengine_static.cmxa"
)

package "ipo" (
    requires = "llvm"
    version  = "11.0.0"
    description = "IPO Transforms for LLVM"
    directory(-llvm.static) = "shared"
    archive(byte, -llvm.static) = "llvm_ipo_shared.cma"
    archive(native, -llvm.static) = "llvm_ipo_shared.cmxa"
    directory(llvm.static) = "static"
    archive(byte, llvm.static) = "llvm_ipo_static.cma"
    archive(native, llvm.static) = "llvm_ipo_static.cmxa"
)

package "irreader" (
    requires = "llvm"
    version  = "11.0.0"
    description = "IR assembly reader for LLVM"
    directory(-llvm.static) = "shared"
    archive(byte, -llvm.static) = "llvm_irreader_shared.cma"
    archive(native, -llvm.static) = "llvm_irreader_shared.cmxa"
    directory(llvm.static) = "static"
    archive(byte, llvm.static) = "llvm_irreader_static.cma"
    archive(native, llvm.static) = "llvm_irreader_static.cmxa"
)

package "scalar_opts" (
    requires = "llvm"
    version = "11.0.0"
    description = "Scalar Transforms for LLVM"
    directory(-llvm.static) = "shared"
    archive(byte, -llvm.static) = "llvm_scalar_opts_shared.cma"
    archive(native, -llvm.static) = "llvm_scalar_opts_shared.cmxa"
    directory(llvm.static) = "static"
    archive(byte, llvm.static) = "llvm_scalar_opts_static.cma"
    archive(native, llvm.static) = "llvm_scalar_opts_static.cmxa"
)

package "transform_utils" (
    requires = "llvm"
    version = "11.0.0"
    description = "Transform utilities for LLVM"
    directory(-llvm.static) = "shared"
    archive(byte, -llvm.static) = "llvm_transform_utils_shared.cma"
    archive(native, -llvm.static) = "llvm_transform_utils_shared.cmxa"
    directory(llvm.static) = "static"
    archive(byte, llvm.static) = "llvm_transform_utils_static.cma"
    archive(native, llvm.static) = "llvm_transform_utils_static.cmxa"
)

package "vectorize" (
    requires = "llvm"
    version = "11.0.0"
    description = "Vector Transforms for LLVM"
    directory(-llvm.static) = "shared"
    archive(byte, -llvm.static) = "llvm_vectorize_shared.cma"
    archive(native, -llvm.static) = "llvm_vectorize_shared.cmxa"
    directory(llvm.static) = "static"
    archive(byte, llvm.static) = "llvm_vectorize_static.cma"
    archive(native, llvm.static) = "llvm_vectorize_static.cmxa"
)

package "passmgr_builder" (
    requires = "llvm"
    version = "11.0.0"
    description = "Pass Manager Builder for LLVM"
    directory(-llvm.static) = "shared"
    archive(byte, -llvm.static) = "llvm_passmgr_builder_shared.cma"
    archive(native, -llvm.static) = "llvm_passmgr_builder_shared.cmxa"
    directory(llvm.static) = "static"
    archive(byte, llvm.static) = "llvm_passmgr_builder_static.cma"
    archive(native, llvm.static) = "llvm_passmgr_builder_static.cmxa"
)

package "target" (
    requires = "llvm"
    version  = "11.0.0"
    description = "Target Information for LLVM"
    directory(-llvm.static) = "shared"
    archive(byte, -llvm.static) = "llvm_target_shared.cma"
    archive(native, -llvm.static) = "llvm_target_shared.cmxa"
    directory(llvm.static) = "static"
    archive(byte, llvm.static) = "llvm_target_static.cma"
    archive(native, llvm.static) = "llvm_target_static.cmxa"
)

package "linker" (
    requires = "llvm"
    version  = "11.0.0"
    description = "Intermediate Representation Linker for LLVM"
    directory(-llvm.static) = "shared"
    archive(byte, -llvm.static) = "llvm_linker_shared.cma"
    archive(native, -llvm.static) = "llvm_linker_shared.cmxa"
    directory(llvm.static) = "static"
    archive(byte, llvm.static) = "llvm_linker_static.cma"
    archive(native, llvm.static) = "llvm_linker_static.cmxa"
)

package "all_backends" (
    requires = "llvm"
    version  = "11.0.0"
    description = "All backends for LLVM"
    directory(-llvm.static) = "shared"
    archive(byte, -llvm.static) = "llvm_all_backends_shared.cma"
    archive(native, -llvm.static) = "llvm_all_backends_shared.cmxa"
    directory(llvm.static) = "static"
    archive(byte, llvm.static) = "llvm_all_backends_static.cma"
    archive(native, llvm.static) = "llvm_all_backends_static.cmxa"
)
